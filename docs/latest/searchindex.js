Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "flex/coordinator", "flex/coordinator/restful_api", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/cpp_procedure", "flex/interactive/development/cypher_procedure", "flex/interactive/development/java/AdminServiceGraphManagementApi", "flex/interactive/development/java/AdminServiceJobManagementApi", "flex/interactive/development/java/AdminServiceProcedureManagementApi", "flex/interactive/development/java/AdminServiceServiceManagementApi", "flex/interactive/development/java/BaseEdgeType", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/java/BasePropertyMeta", "flex/interactive/development/java/BaseVertexType", "flex/interactive/development/java/BaseVertexTypeXCsrParams", "flex/interactive/development/java/ColumnMapping", "flex/interactive/development/java/CreateEdgeType", "flex/interactive/development/java/CreateGraphRequest", "flex/interactive/development/java/CreateGraphResponse", "flex/interactive/development/java/CreateGraphSchemaRequest", "flex/interactive/development/java/CreateProcedureRequest", "flex/interactive/development/java/CreateProcedureResponse", "flex/interactive/development/java/CreatePropertyMeta", "flex/interactive/development/java/CreateVertexType", "flex/interactive/development/java/DateType", "flex/interactive/development/java/EdgeData", "flex/interactive/development/java/EdgeMapping", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/java/EdgeMappingTypeTriplet", "flex/interactive/development/java/EdgeRequest", "flex/interactive/development/java/EdgeStatistics", "flex/interactive/development/java/FixedChar", "flex/interactive/development/java/FixedCharChar", "flex/interactive/development/java/GSDataType", "flex/interactive/development/java/GetEdgeType", "flex/interactive/development/java/GetGraphResponse", "flex/interactive/development/java/GetGraphSchemaResponse", "flex/interactive/development/java/GetGraphStatisticsResponse", "flex/interactive/development/java/GetProcedureResponse", "flex/interactive/development/java/GetPropertyMeta", "flex/interactive/development/java/GetVertexType", "flex/interactive/development/java/GraphServiceEdgeManagementApi", "flex/interactive/development/java/GraphServiceVertexManagementApi", "flex/interactive/development/java/JobResponse", "flex/interactive/development/java/JobStatus", "flex/interactive/development/java/LongText", "flex/interactive/development/java/Parameter", "flex/interactive/development/java/PrimitiveType", "flex/interactive/development/java/Property", "flex/interactive/development/java/PropertyArray", "flex/interactive/development/java/QueryRequest", "flex/interactive/development/java/QueryServiceApi", "flex/interactive/development/java/SchemaMapping", "flex/interactive/development/java/SchemaMappingLoadingConfig", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat", "flex/interactive/development/java/ServiceStatus", "flex/interactive/development/java/StartServiceRequest", "flex/interactive/development/java/StoredProcedureMeta", "flex/interactive/development/java/StringType", "flex/interactive/development/java/StringTypeString", "flex/interactive/development/java/TemporalType", "flex/interactive/development/java/TemporalTypeTemporal", "flex/interactive/development/java/TimeStampType", "flex/interactive/development/java/TypedValue", "flex/interactive/development/java/UpdateProcedureRequest", "flex/interactive/development/java/VarChar", "flex/interactive/development/java/VarCharVarChar", "flex/interactive/development/java/VertexData", "flex/interactive/development/java/VertexMapping", "flex/interactive/development/java/VertexRequest", "flex/interactive/development/java/VertexStatistics", "flex/interactive/development/java/VertexTypePairStatistics", "flex/interactive/development/java/java_sdk", "flex/interactive/development/python/AdminServiceGraphManagementApi", "flex/interactive/development/python/AdminServiceJobManagementApi", "flex/interactive/development/python/AdminServiceProcedureManagementApi", "flex/interactive/development/python/AdminServiceServiceManagementApi", "flex/interactive/development/python/BaseEdgeType", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/python/BasePropertyMeta", "flex/interactive/development/python/BaseVertexType", "flex/interactive/development/python/BaseVertexTypeXCsrParams", "flex/interactive/development/python/ColumnMapping", "flex/interactive/development/python/CreateEdgeType", "flex/interactive/development/python/CreateGraphRequest", "flex/interactive/development/python/CreateGraphResponse", "flex/interactive/development/python/CreateGraphSchemaRequest", "flex/interactive/development/python/CreateProcedureRequest", "flex/interactive/development/python/CreateProcedureResponse", "flex/interactive/development/python/CreatePropertyMeta", "flex/interactive/development/python/CreateVertexType", "flex/interactive/development/python/DateType", "flex/interactive/development/python/EdgeData", "flex/interactive/development/python/EdgeMapping", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/python/EdgeMappingTypeTriplet", "flex/interactive/development/python/EdgeRequest", "flex/interactive/development/python/EdgeStatistics", "flex/interactive/development/python/FixedChar", "flex/interactive/development/python/FixedCharChar", "flex/interactive/development/python/GSDataType", "flex/interactive/development/python/GetEdgeType", "flex/interactive/development/python/GetGraphResponse", "flex/interactive/development/python/GetGraphSchemaResponse", "flex/interactive/development/python/GetGraphStatisticsResponse", "flex/interactive/development/python/GetProcedureResponse", "flex/interactive/development/python/GetPropertyMeta", "flex/interactive/development/python/GetVertexType", "flex/interactive/development/python/GraphServiceEdgeManagementApi", "flex/interactive/development/python/GraphServiceVertexManagementApi", "flex/interactive/development/python/JobResponse", "flex/interactive/development/python/JobStatus", "flex/interactive/development/python/LongText", "flex/interactive/development/python/ModelProperty", "flex/interactive/development/python/Parameter", "flex/interactive/development/python/PrimitiveType", "flex/interactive/development/python/PropertyArray", "flex/interactive/development/python/QueryRequest", "flex/interactive/development/python/QueryServiceApi", "flex/interactive/development/python/SchemaMapping", "flex/interactive/development/python/SchemaMappingLoadingConfig", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat", "flex/interactive/development/python/ServiceStatus", "flex/interactive/development/python/StartServiceRequest", "flex/interactive/development/python/StoredProcedureMeta", "flex/interactive/development/python/StringType", "flex/interactive/development/python/StringTypeString", "flex/interactive/development/python/TemporalType", "flex/interactive/development/python/TemporalTypeTemporal", "flex/interactive/development/python/TimeStampType", "flex/interactive/development/python/TypedValue", "flex/interactive/development/python/UpdateProcedureRequest", "flex/interactive/development/python/VarChar", "flex/interactive/development/python/VarCharVarChar", "flex/interactive/development/python/VertexData", "flex/interactive/development/python/VertexMapping", "flex/interactive/development/python/VertexRequest", "flex/interactive/development/python/VertexStatistics", "flex/interactive/development/python/VertexTypePairStatistics", "flex/interactive/development/python/python_sdk", "flex/interactive/development/restful_api", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/sdk", "flex/interactive/stored_procedures", "flex/interactive/tools", "flex/interactive/tools/admin_tool", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_k8s", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "flex/coordinator.md", "flex/coordinator/restful_api.rst", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/cpp_procedure.md", "flex/interactive/development/cypher_procedure.md", "flex/interactive/development/java/AdminServiceGraphManagementApi.md", "flex/interactive/development/java/AdminServiceJobManagementApi.md", "flex/interactive/development/java/AdminServiceProcedureManagementApi.md", "flex/interactive/development/java/AdminServiceServiceManagementApi.md", "flex/interactive/development/java/BaseEdgeType.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/java/BasePropertyMeta.md", "flex/interactive/development/java/BaseVertexType.md", "flex/interactive/development/java/BaseVertexTypeXCsrParams.md", "flex/interactive/development/java/ColumnMapping.md", "flex/interactive/development/java/CreateEdgeType.md", "flex/interactive/development/java/CreateGraphRequest.md", "flex/interactive/development/java/CreateGraphResponse.md", "flex/interactive/development/java/CreateGraphSchemaRequest.md", "flex/interactive/development/java/CreateProcedureRequest.md", "flex/interactive/development/java/CreateProcedureResponse.md", "flex/interactive/development/java/CreatePropertyMeta.md", "flex/interactive/development/java/CreateVertexType.md", "flex/interactive/development/java/DateType.md", "flex/interactive/development/java/EdgeData.md", "flex/interactive/development/java/EdgeMapping.md", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/java/EdgeMappingTypeTriplet.md", "flex/interactive/development/java/EdgeRequest.md", "flex/interactive/development/java/EdgeStatistics.md", "flex/interactive/development/java/FixedChar.md", "flex/interactive/development/java/FixedCharChar.md", "flex/interactive/development/java/GSDataType.md", "flex/interactive/development/java/GetEdgeType.md", "flex/interactive/development/java/GetGraphResponse.md", "flex/interactive/development/java/GetGraphSchemaResponse.md", "flex/interactive/development/java/GetGraphStatisticsResponse.md", "flex/interactive/development/java/GetProcedureResponse.md", "flex/interactive/development/java/GetPropertyMeta.md", "flex/interactive/development/java/GetVertexType.md", "flex/interactive/development/java/GraphServiceEdgeManagementApi.md", "flex/interactive/development/java/GraphServiceVertexManagementApi.md", "flex/interactive/development/java/JobResponse.md", "flex/interactive/development/java/JobStatus.md", "flex/interactive/development/java/LongText.md", "flex/interactive/development/java/Parameter.md", "flex/interactive/development/java/PrimitiveType.md", "flex/interactive/development/java/Property.md", "flex/interactive/development/java/PropertyArray.md", "flex/interactive/development/java/QueryRequest.md", "flex/interactive/development/java/QueryServiceApi.md", "flex/interactive/development/java/SchemaMapping.md", "flex/interactive/development/java/SchemaMappingLoadingConfig.md", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/java/ServiceStatus.md", "flex/interactive/development/java/StartServiceRequest.md", "flex/interactive/development/java/StoredProcedureMeta.md", "flex/interactive/development/java/StringType.md", "flex/interactive/development/java/StringTypeString.md", "flex/interactive/development/java/TemporalType.md", "flex/interactive/development/java/TemporalTypeTemporal.md", "flex/interactive/development/java/TimeStampType.md", "flex/interactive/development/java/TypedValue.md", "flex/interactive/development/java/UpdateProcedureRequest.md", "flex/interactive/development/java/VarChar.md", "flex/interactive/development/java/VarCharVarChar.md", "flex/interactive/development/java/VertexData.md", "flex/interactive/development/java/VertexMapping.md", "flex/interactive/development/java/VertexRequest.md", "flex/interactive/development/java/VertexStatistics.md", "flex/interactive/development/java/VertexTypePairStatistics.md", "flex/interactive/development/java/java_sdk.md", "flex/interactive/development/python/AdminServiceGraphManagementApi.md", "flex/interactive/development/python/AdminServiceJobManagementApi.md", "flex/interactive/development/python/AdminServiceProcedureManagementApi.md", "flex/interactive/development/python/AdminServiceServiceManagementApi.md", "flex/interactive/development/python/BaseEdgeType.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/python/BasePropertyMeta.md", "flex/interactive/development/python/BaseVertexType.md", "flex/interactive/development/python/BaseVertexTypeXCsrParams.md", "flex/interactive/development/python/ColumnMapping.md", "flex/interactive/development/python/CreateEdgeType.md", "flex/interactive/development/python/CreateGraphRequest.md", "flex/interactive/development/python/CreateGraphResponse.md", "flex/interactive/development/python/CreateGraphSchemaRequest.md", "flex/interactive/development/python/CreateProcedureRequest.md", "flex/interactive/development/python/CreateProcedureResponse.md", "flex/interactive/development/python/CreatePropertyMeta.md", "flex/interactive/development/python/CreateVertexType.md", "flex/interactive/development/python/DateType.md", "flex/interactive/development/python/EdgeData.md", "flex/interactive/development/python/EdgeMapping.md", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/python/EdgeMappingTypeTriplet.md", "flex/interactive/development/python/EdgeRequest.md", "flex/interactive/development/python/EdgeStatistics.md", "flex/interactive/development/python/FixedChar.md", "flex/interactive/development/python/FixedCharChar.md", "flex/interactive/development/python/GSDataType.md", "flex/interactive/development/python/GetEdgeType.md", "flex/interactive/development/python/GetGraphResponse.md", "flex/interactive/development/python/GetGraphSchemaResponse.md", "flex/interactive/development/python/GetGraphStatisticsResponse.md", "flex/interactive/development/python/GetProcedureResponse.md", "flex/interactive/development/python/GetPropertyMeta.md", "flex/interactive/development/python/GetVertexType.md", "flex/interactive/development/python/GraphServiceEdgeManagementApi.md", "flex/interactive/development/python/GraphServiceVertexManagementApi.md", "flex/interactive/development/python/JobResponse.md", "flex/interactive/development/python/JobStatus.md", "flex/interactive/development/python/LongText.md", "flex/interactive/development/python/ModelProperty.md", "flex/interactive/development/python/Parameter.md", "flex/interactive/development/python/PrimitiveType.md", "flex/interactive/development/python/PropertyArray.md", "flex/interactive/development/python/QueryRequest.md", "flex/interactive/development/python/QueryServiceApi.md", "flex/interactive/development/python/SchemaMapping.md", "flex/interactive/development/python/SchemaMappingLoadingConfig.md", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/python/ServiceStatus.md", "flex/interactive/development/python/StartServiceRequest.md", "flex/interactive/development/python/StoredProcedureMeta.md", "flex/interactive/development/python/StringType.md", "flex/interactive/development/python/StringTypeString.md", "flex/interactive/development/python/TemporalType.md", "flex/interactive/development/python/TemporalTypeTemporal.md", "flex/interactive/development/python/TimeStampType.md", "flex/interactive/development/python/TypedValue.md", "flex/interactive/development/python/UpdateProcedureRequest.md", "flex/interactive/development/python/VarChar.md", "flex/interactive/development/python/VarCharVarChar.md", "flex/interactive/development/python/VertexData.md", "flex/interactive/development/python/VertexMapping.md", "flex/interactive/development/python/VertexRequest.md", "flex/interactive/development/python/VertexStatistics.md", "flex/interactive/development/python/VertexTypePairStatistics.md", "flex/interactive/development/python/python_sdk.md", "flex/interactive/development/restful_api.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/sdk.md", "flex/interactive/stored_procedures.md", "flex/interactive/tools.md", "flex/interactive/tools/admin_tool.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_k8s.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "GraphScope Coordinator", "Coordinator RESTFul API", "Engine Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "Deployment", "GraphScope Interactive Development guide", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "AdminServiceGraphManagementApi", "AdminServiceJobManagementApi", "AdminServiceProcedureManagementApi", "AdminServiceServiceManagementApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphServiceEdgeManagementApi", "GraphServiceVertexManagementApi", "JobResponse", "JobStatus", "LongText", "Parameter", "PrimitiveType", "Property", "PropertyArray", "QueryRequest", "QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigFormat", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "VarChar", "VarCharVarChar", "VertexData", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Java SDK Reference", "interactive_sdk.openapi.AdminServiceGraphManagementApi", "interactive_sdk.openapi.AdminServiceJobManagementApi", "interactive_sdk.openapi.AdminServiceProcedureManagementApi", "interactive_sdk.openapi.AdminServiceServiceManagementApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "interactive_sdk.openapi.GraphServiceEdgeManagementApi", "interactive_sdk.openapi.GraphServiceVertexManagementApi", "JobResponse", "JobStatus", "LongText", "ModelProperty", "Parameter", "PrimitiveType", "PropertyArray", "QueryRequest", "interactive_sdk.openapi.QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigFormat", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "VarChar", "VarCharVarChar", "VertexData", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Python SDK Reference", "RESTful API Documentation", "Getting Started", "Glossary", "Installation", "Overview", "GraphScope Interactive SDK", "Stored Procedures", "Tools", "The Administrative tool", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 44, 45, 46, 47, 52, 53, 90, 91, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 193, 198, 199, 201, 203, 209, 211, 212, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 228, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 257, 275, 276, 277, 280, 288, 290, 291, 298, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 325, 326, 330, 331, 332, 335, 336, 338, 340, 341, 346, 349, 354, 355, 356, 357, 358, 359, 362, 365, 368, 371, 373, 374, 375, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 462, 463, 465, 468, 469, 470, 471, 472, 473, 476, 477, 479], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 44, 49, 51, 52, 53, 54, 55, 90, 91, 100, 104, 121, 122, 123, 124, 125, 160, 161, 170, 174, 191, 192, 193, 194, 197, 198, 200, 201, 203, 209, 210, 211, 212, 213, 215, 216, 220, 221, 223, 224, 228, 230, 238, 242, 245, 246, 247, 248, 249, 256, 257, 258, 259, 260, 261, 264, 266, 267, 269, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 285, 290, 297, 299, 305, 311, 314, 315, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 457, 460, 461, 462, 463, 472, 473, 476, 479, 483, 484, 485, 487, 488, 489], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 41, 51, 203, 222, 224, 238, 240, 242, 243, 245, 249, 251, 254, 259, 318, 456, 461, 469, 472, 473, 479], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 41, 42, 48, 192, 194, 196, 198, 201, 203, 206, 209, 210, 211, 214, 217, 218, 219, 222, 226, 230, 231, 235, 237, 238, 239, 240, 241, 243, 247, 251, 259, 275, 299, 304, 312, 318, 319, 320, 456, 462, 463, 465, 469, 470, 471, 472, 482, 483], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 203, 208, 224, 225, 236, 239, 243, 244, 245, 251, 275, 319, 480, 481], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 52, 53, 54, 55, 90, 91, 100, 121, 191, 192, 193, 194, 195, 196, 198, 200, 202, 203, 205, 209, 211, 213, 214, 217, 219, 220, 221, 222, 224, 225, 227, 230, 231, 232, 233, 234, 235, 237, 238, 240, 244, 245, 247, 248, 251, 318, 319, 320, 321, 456, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 476, 479, 480, 482, 483, 484, 487, 489, 490], "offer": [0, 2, 9, 12, 20, 34, 42, 45, 46, 47, 48, 51, 192, 193, 196, 198, 208, 211, 215, 217, 221, 225, 226, 236, 238, 242, 243, 468], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 47, 196, 201, 203, 206, 210, 227, 235, 237, 238, 239, 241, 305, 312, 359, 403, 405, 456, 468, 473], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 44, 46, 47, 196, 198, 203, 206, 209, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 251, 255, 258, 271, 280, 282, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 318, 319, 320, 321, 335, 360, 362, 375, 376, 377, 385, 387, 404, 405, 406, 413, 415, 416, 434, 446, 448, 450, 454, 455, 456, 458, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 473, 476], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 44, 48, 49, 87, 106, 157, 176, 193, 194, 196, 200, 201, 203, 221, 222, 226, 231, 232, 236, 237, 238, 240, 241, 242, 243, 244, 246, 315, 321, 456, 463, 468, 469, 472, 473, 477], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 42, 44, 46, 47, 49, 51, 100, 170, 191, 193, 194, 196, 197, 199, 203, 208, 210, 214, 217, 218, 220, 222, 225, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 304, 306, 307, 308, 309, 310, 311, 313, 316, 319, 456, 462, 463, 465, 468, 469, 472, 483, 486, 487], "analyz": [0, 7, 13, 19, 27, 221, 236, 237, 239, 240, 242, 310, 468], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 49, 192, 193, 194, 195, 196, 198, 200, 201, 203, 208, 210, 211, 214, 216, 217, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 254, 256, 262, 263, 268, 273, 274, 278, 286, 287, 304, 306, 307, 308, 309, 310, 314, 318, 328, 334, 350, 351, 366, 383, 399, 418, 448, 456, 458, 459, 462, 463, 465, 468, 470, 471, 473, 479, 480, 482, 483, 488], "least": [0, 6, 37, 222, 321, 355, 377], "effort": [0, 34, 196, 220, 244, 468], "cover": [0, 6, 15, 41, 229], "wide": [0, 11, 12, 24, 196, 212, 224, 225, 229, 236, 237, 239, 240, 241, 243, 308, 467, 473], "rang": [0, 13, 18, 46, 47, 217, 218, 220, 222, 225, 228, 229, 231, 232, 233, 234, 236, 237, 240, 243, 246, 248, 249, 262, 263, 273, 274, 278, 286, 287, 304, 309, 313, 361, 363, 365, 368, 371, 383, 389, 403, 404, 405, 406, 434, 456, 461, 468, 479, 482, 483, 487, 488], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 52, 53, 54, 55, 90, 91, 121, 122, 123, 124, 125, 160, 161, 191, 192, 194, 195, 196, 203, 209, 210, 213, 221, 223, 225, 226, 238, 239, 240, 241, 244, 246, 247, 249, 259, 308, 387, 411, 467, 477], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 225, 236, 237, 238, 239, 242, 246, 247, 251, 306, 314, 407, 448, 453, 457, 467, 476], "detect": [0, 6, 8, 9, 225, 236, 237, 239, 240, 242, 243, 247, 375, 379, 380, 381], "etc": [0, 6, 7, 15, 29, 206, 210, 217, 218, 226, 229, 235, 237, 238, 241, 244, 248, 304, 307, 308, 309, 312, 323, 335, 344, 349, 350, 456, 458, 469], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 44, 45, 46, 47, 48, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 193, 194, 195, 196, 198, 203, 206, 209, 210, 211, 214, 215, 217, 218, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 254, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 330, 331, 332, 345, 346, 351, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 374, 375, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 395, 399, 401, 402, 403, 404, 405, 406, 407, 411, 413, 415, 417, 418, 421, 439, 448, 449, 450, 451, 452, 456, 459, 462, 463, 465, 467, 468, 469, 470, 472, 476, 477, 489], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 47, 121, 191, 193, 206, 210, 213, 215, 216, 218, 220, 223, 225, 226, 229, 233, 234, 235, 236, 240, 243, 246, 247, 251, 304, 306, 308, 309, 310, 312, 315, 316, 318, 319, 321, 397, 398, 402, 403, 405, 407, 408, 409, 450, 451, 459, 479], "pie": [0, 1, 3, 8, 12, 34, 222, 224, 225, 239, 251, 254, 461, 473, 483, 485], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 51, 196, 198, 224, 225, 229, 236, 238, 239, 241, 243, 244, 251, 304, 309, 310, 468, 469, 473], "model": [0, 1, 3, 8, 9, 18, 45, 48, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 201, 206, 210, 216, 217, 218, 222, 224, 225, 228, 229, 230, 235, 236, 237, 239, 240, 243, 251, 306, 308, 310, 311, 375, 379, 383, 385, 387, 389, 395, 397, 398, 403, 404, 405, 406, 407, 411, 412, 446, 453, 463, 467, 473, 483], "highli": [0, 4, 12, 34, 216, 222, 225, 238, 239, 467], "optim": [0, 9, 12, 14, 34, 44, 46, 47, 51, 58, 61, 128, 131, 196, 198, 208, 210, 221, 222, 223, 225, 226, 228, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 247, 304, 316, 318, 468, 470, 483], "best": [0, 16, 236, 238, 240, 243, 244, 247, 456, 479], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 44, 46, 48, 196, 208, 210, 215, 217, 220, 222, 223, 224, 226, 236, 238, 239, 241, 242, 243, 248, 306, 310, 312, 318, 413, 418, 448, 460, 462, 465, 469, 471, 473], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 49, 51, 100, 170, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 206, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 229, 231, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 251, 255, 257, 281, 282, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 321, 330, 331, 334, 338, 359, 362, 375, 376, 377, 384, 385, 387, 403, 404, 405, 406, 413, 417, 418, 425, 427, 429, 434, 437, 442, 443, 448, 450, 456, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 473, 476, 477, 479], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 44, 46, 47, 48, 58, 61, 100, 128, 131, 170, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 206, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 256, 257, 281, 282, 291, 296, 304, 305, 306, 307, 308, 310, 312, 315, 317, 318, 319, 320, 321, 340, 341, 350, 362, 365, 369, 375, 376, 377, 383, 385, 389, 390, 392, 394, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 413, 417, 421, 434, 439, 448, 450, 453, 454, 456, 458, 459, 461, 463, 467, 468, 471, 472, 473, 476, 477, 479, 483, 489], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 45, 198, 203, 206, 210, 215, 220, 222, 231, 236, 237, 239, 241, 243, 244, 245, 256, 304, 307, 316, 361, 448, 462, 468, 469, 479], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 52, 53, 54, 55, 90, 91, 100, 121, 218, 221, 226, 233, 234, 235, 237, 238, 239, 240, 243, 247, 249, 304, 307, 308, 310, 321, 378, 387, 388, 395, 396, 399, 413, 414, 450, 454, 456, 468, 469, 470, 472, 483, 487], "box": [0, 238, 449], "manner": [0, 2, 17, 18, 32, 36, 196, 237, 239, 240], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 44, 45, 47, 192, 195, 198, 203, 209, 210, 211, 214, 215, 217, 218, 220, 221, 222, 225, 227, 228, 231, 232, 235, 241, 244, 247, 305, 306, 310, 313, 315, 316, 318, 321, 375, 387, 402, 403, 405, 414, 434, 456, 459, 467, 468, 469, 483], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 246, 247, 248, 249, 250, 251, 252, 255, 257, 281, 291, 293, 297, 298, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 329, 331, 333, 335, 336, 337, 338, 339, 340, 341, 350, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 476, 477, 479, 482, 483, 487, 488, 489], "full": [0, 4, 12, 16, 17, 18, 22, 34, 46, 100, 170, 218, 225, 226, 229, 236, 241, 243, 247, 304, 307, 308, 310, 366, 469, 473, 479, 488], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 45, 46, 47, 52, 53, 54, 56, 60, 63, 64, 66, 70, 72, 73, 78, 79, 83, 84, 85, 86, 87, 89, 98, 99, 101, 106, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 198, 209, 215, 218, 220, 222, 225, 231, 233, 235, 238, 241, 245, 247, 249, 268, 269, 276, 277, 291, 305, 308, 310, 318, 321, 330, 332, 335, 342, 344, 350, 351, 354, 355, 359, 361, 362, 380, 383, 385, 387, 388, 389, 390, 391, 403, 407, 410, 413, 414, 419, 421, 434, 450, 456, 457, 459, 463, 467, 469, 472, 477, 484, 487], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 42, 44, 45, 47, 48, 121, 122, 123, 124, 125, 160, 161, 170, 191, 193, 196, 201, 203, 206, 209, 210, 212, 216, 218, 222, 223, 224, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 251, 257, 304, 305, 306, 308, 309, 310, 312, 313, 315, 318, 319, 321, 456, 459, 462, 463, 465, 467, 469, 470, 472, 473, 476, 482], "bf": [0, 15, 17, 34, 244, 247, 479], "df": [0, 34, 467], "hit": [0, 34, 36, 247, 248, 321, 457, 462, 479], "lpa": [0, 7, 34, 237, 247, 479], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 202, 237, 244, 247, 248, 255, 462, 463, 471, 472, 479], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 55, 100, 121, 122, 123, 125, 170, 191, 192, 193, 196, 198, 200, 203, 206, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 265, 278, 281, 296, 304, 305, 306, 308, 309, 310, 311, 312, 314, 316, 318, 321, 338, 352, 353, 354, 355, 356, 357, 362, 365, 367, 368, 375, 376, 377, 379, 380, 383, 384, 385, 387, 389, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 415, 417, 434, 436, 439, 444, 448, 450, 451, 453, 454, 455, 456, 458, 460, 462, 463, 464, 465, 467, 468, 469, 473, 476, 477, 479], "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 45, 195, 203, 206, 208, 211, 218, 220, 222, 231, 235, 237, 239, 240, 244, 246, 255, 303, 321, 326, 345, 346, 375, 463, 468, 469, 476], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 203, 205, 206, 210, 222, 239, 241], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 42, 44, 51, 53, 90, 91, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 201, 203, 206, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 255, 275, 276, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 324, 335, 354, 356, 361, 363, 365, 368, 375, 378, 382, 383, 384, 385, 387, 390, 395, 396, 398, 399, 403, 404, 405, 406, 407, 408, 415, 422, 431, 443, 448, 450, 451, 455, 456, 458, 459, 462, 463, 467, 468, 470, 476, 479, 483, 484, 487, 489], "given": [0, 7, 9, 13, 14, 20, 34, 46, 196, 198, 200, 201, 206, 209, 210, 211, 217, 220, 221, 222, 229, 235, 237, 240, 241, 243, 247, 308, 310, 313, 316, 318, 320, 355, 362, 373, 385, 386, 387, 388, 389, 390, 391, 399, 407, 408, 409, 413, 414, 415, 416, 420, 448, 451, 452, 455, 456, 462, 463, 467, 468, 471, 472], "weight": [0, 7, 19, 20, 33, 46, 160, 192, 202, 217, 220, 222, 229, 237, 239, 244, 247, 276, 304, 306, 307, 308, 309, 310, 313, 316, 318, 321, 323, 324, 325, 329, 340, 341, 383, 395, 399, 403, 406, 446, 454, 455, 456, 458, 463, 488], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 196, 203, 210, 212, 215, 222, 228, 229, 236, 240, 304, 306, 312, 313, 314, 385, 467, 468], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 52, 53, 54, 55, 90, 91, 100, 121, 196, 198, 206, 210, 211, 212, 214, 217, 220, 221, 222, 225, 229, 236, 237, 239, 240, 241, 246, 247, 248, 256, 262, 263, 272, 278, 280, 282, 283, 286, 287, 304, 307, 308, 310, 312, 313, 315, 318, 319, 321, 385, 387, 390, 409, 456, 467, 469, 471, 479, 483], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 194, 196, 210, 211, 220, 222, 225, 226, 229, 237, 238, 239, 240, 241, 242, 243, 246, 247, 249, 308, 309, 312, 314, 321, 402, 405, 406, 410, 415, 424, 447, 448, 460, 463, 469, 470, 479], "minimum": [0, 6, 203, 211, 215, 220, 222, 247, 375, 463], "distanc": [0, 7, 15, 17, 18, 237, 247, 321, 356, 395, 399, 403, 404, 405, 406, 407, 425, 437, 479], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 44, 45, 52, 53, 55, 122, 123, 125, 198, 200, 209, 210, 212, 218, 220, 221, 222, 235, 236, 237, 239, 240, 243, 245, 246, 248, 257, 264, 308, 319, 320, 321, 332, 336, 351, 375, 380, 382, 385, 387, 403, 405, 407, 456, 459, 462, 468, 476], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 45, 47, 74, 75, 90, 91, 121, 144, 145, 160, 161, 191, 202, 209, 215, 217, 218, 220, 224, 225, 226, 229, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 249, 254, 275, 305, 306, 307, 308, 309, 310, 313, 316, 318, 320, 321, 395, 400, 417, 418, 434, 459, 461, 465, 467, 469, 470, 473, 479, 484], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 46, 47, 49, 195, 196, 198, 201, 203, 206, 210, 218, 220, 222, 225, 226, 229, 231, 236, 238, 239, 240, 241, 242, 243, 247, 249, 304, 306, 308, 310, 314, 317, 318, 319, 321, 325, 356, 358, 362, 365, 375, 384, 390, 396, 405, 406, 448, 456, 458, 459, 462, 463, 467, 468, 472], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 46, 47, 52, 122, 192, 196, 202, 209, 210, 212, 215, 217, 218, 220, 226, 229, 236, 237, 239, 240, 241, 246, 247, 248, 249, 277, 305, 306, 307, 308, 309, 310, 313, 316, 318, 379, 390, 400, 402, 417, 418, 429, 431, 442, 443, 449, 462, 463, 465, 467, 468, 469, 470, 479, 483, 484], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 41, 45, 47, 49, 193, 194, 196, 198, 201, 203, 209, 211, 212, 215, 218, 220, 222, 226, 227, 229, 239, 240, 241, 243, 247, 266, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 321, 354, 355, 366, 375, 376, 377, 378, 379, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 469, 473, 487], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 45, 209, 210, 218, 221, 222, 226, 229, 235, 236, 239, 243, 247, 304, 305, 306, 307, 310, 313, 318, 448, 456], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 203, 206, 220, 224, 229, 236, 238, 239, 243, 244, 247, 249, 307, 321, 343, 344, 350, 402, 456, 465, 473], "dissimilar": 0, "measur": [0, 6, 20, 210, 239, 241, 247, 305, 321, 399, 400, 433], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 47, 48, 193, 210, 215, 218, 220, 222, 226, 235, 239, 240, 244, 305, 306, 310, 311, 314, 316, 318, 320, 321, 349, 350, 371, 379, 380, 385, 387, 413, 414, 416, 449, 450, 456, 463, 467, 468, 469, 470, 471], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 45, 46, 47, 90, 91, 121, 160, 161, 191, 192, 193, 194, 201, 202, 211, 214, 217, 223, 237, 239, 240, 241, 246, 247, 248, 249, 266, 280, 294, 295, 296, 307, 310, 318, 319, 403, 418, 448, 453, 456, 459, 462, 463, 465, 469, 470, 477, 483, 484, 487], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 45, 46, 47, 51, 52, 122, 192, 209, 210, 217, 218, 220, 221, 222, 226, 228, 229, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 295, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 318, 321, 330, 332, 350, 351, 356, 360, 362, 367, 373, 375, 377, 378, 379, 381, 382, 384, 385, 387, 388, 390, 395, 398, 400, 403, 404, 405, 406, 407, 410, 411, 413, 415, 416, 421, 424, 436, 441, 446, 450, 452, 453, 454, 456, 462, 463, 465, 467, 468, 469, 470, 473, 477], "attribute_assort": [0, 34], "nearest": [0, 247], "neighbor": [0, 6, 9, 13, 14, 17, 18, 202, 217, 220, 222, 226, 229, 233, 239, 240, 241, 247, 249, 304, 305, 307, 308, 310, 312, 313, 314, 316, 317, 321, 326, 327, 346, 398, 399, 413, 416, 449, 456, 465, 468, 479], "return": [0, 6, 9, 15, 18, 20, 51, 87, 106, 121, 157, 176, 191, 192, 202, 210, 212, 213, 214, 215, 217, 220, 221, 222, 229, 231, 233, 234, 237, 240, 247, 248, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 297, 298, 299, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 319, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 462, 463, 465, 468, 479, 488], "success": [0, 13, 22, 52, 53, 54, 55, 93, 122, 123, 124, 125, 192, 251, 306, 390, 421], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 44, 45, 46, 48, 121, 160, 191, 192, 203, 206, 209, 211, 212, 216, 220, 222, 226, 228, 229, 231, 232, 233, 234, 235, 237, 244, 246, 247, 248, 249, 263, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 321, 323, 324, 325, 327, 331, 332, 335, 336, 340, 350, 354, 355, 357, 358, 359, 360, 362, 365, 367, 368, 370, 371, 372, 374, 375, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 394, 396, 403, 404, 405, 406, 407, 413, 414, 418, 421, 434, 439, 448, 450, 451, 456, 458, 459, 463, 465, 468, 469, 470, 471, 477, 479, 481, 482, 483, 484, 486, 487, 488, 489], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 44, 46, 47, 48, 90, 91, 121, 160, 161, 191, 192, 201, 206, 209, 210, 211, 212, 216, 217, 218, 220, 222, 226, 228, 229, 231, 232, 233, 234, 235, 237, 240, 241, 244, 247, 248, 304, 307, 309, 310, 311, 313, 318, 319, 320, 321, 323, 324, 325, 327, 331, 332, 335, 340, 341, 344, 349, 350, 354, 356, 357, 358, 359, 360, 362, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 458, 459, 463, 468, 469, 470, 471, 477, 479, 483, 484, 486, 487, 488, 489], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 44, 46, 47, 48, 121, 160, 161, 192, 201, 209, 210, 211, 212, 216, 217, 220, 222, 226, 228, 229, 231, 232, 233, 234, 235, 237, 240, 241, 244, 247, 248, 304, 307, 308, 309, 310, 311, 313, 318, 321, 323, 324, 325, 327, 335, 336, 340, 341, 344, 349, 350, 357, 358, 359, 362, 367, 368, 373, 375, 377, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 423, 425, 427, 428, 429, 433, 434, 436, 438, 439, 441, 448, 449, 450, 451, 456, 458, 459, 463, 467, 468, 470, 471, 479, 480, 481, 483, 484, 487, 488, 489], "average_degree_connect": [0, 247, 479], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 44, 48, 51, 87, 106, 121, 157, 176, 191, 194, 196, 198, 203, 210, 215, 220, 221, 222, 229, 234, 237, 241, 246, 247, 248, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 269, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 296, 303, 305, 306, 308, 310, 313, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 338, 339, 340, 341, 345, 346, 350, 351, 354, 356, 358, 359, 361, 362, 363, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 463, 467, 468, 469, 476], "str": [0, 20, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 186, 187, 188, 189, 190, 231, 232, 233, 235, 247, 248, 249, 255, 256, 262, 263, 264, 266, 273, 274, 275, 278, 280, 281, 282, 283, 286, 287, 316, 318, 319, 334, 336, 450, 456, 458, 462, 463, 469, 484, 489], "target": [0, 6, 17, 22, 24, 121, 192, 211, 226, 227, 236, 237, 241, 243, 247, 249, 310, 312, 318, 321, 392, 394, 413, 416, 448, 469, 479], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 44, 46, 47, 49, 196, 206, 209, 210, 211, 214, 218, 220, 222, 225, 229, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 270, 276, 304, 306, 308, 310, 311, 312, 321, 392, 431, 446, 456, 468, 469, 473, 479, 488], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 202, 206, 212, 215, 218, 221, 222, 229, 237, 240, 241, 246, 247, 248, 249, 304, 307, 308, 309, 310, 313, 316, 318, 319, 320, 321, 327, 350, 375, 378, 383, 385, 389, 395, 398, 403, 406, 413, 416, 418, 450, 456, 462, 463, 467, 468, 469, 479, 483, 487, 488], "sum": [0, 20, 215, 218, 233, 239, 247, 249, 321, 375, 380, 383, 385, 386, 387, 396, 403, 406, 407, 414, 415, 454, 456, 487], "fraction": [0, 247, 321, 375], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 44, 100, 170, 196, 198, 210, 212, 214, 220, 222, 229, 235, 240, 241, 247, 249, 254, 310, 314, 316, 365, 403, 405, 448, 456, 460, 469, 479, 484, 489], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 42, 45, 193, 208, 209, 210, 212, 213, 214, 216, 217, 220, 221, 222, 223, 226, 229, 235, 237, 239, 240, 241, 243, 248, 251, 305, 306, 308, 309, 310, 315, 316, 318, 321, 351, 365, 382, 421, 456, 467, 468, 469], "betweenness_centr": [0, 34, 321], "normal": [0, 6, 27, 203, 222, 247, 310, 318, 321, 378, 468], "endpoint": [0, 9, 10, 27, 28, 29, 44, 48, 52, 53, 55, 91, 121, 122, 123, 125, 161, 191, 192, 193, 196, 209, 211, 213, 216, 220, 221, 231, 235, 237, 246, 310, 319, 321, 463, 465, 469, 476, 479, 487, 489], "bool": [0, 6, 14, 15, 20, 82, 96, 128, 157, 176, 202, 215, 235, 246, 247, 249, 293, 301, 318, 321, 328, 338, 340, 341, 350, 379, 389, 395, 399, 415, 456, 458, 463, 468, 489], "whether": [0, 37, 44, 46, 198, 209, 210, 217, 220, 222, 235, 236, 240, 246, 247, 305, 306, 310, 318, 378, 380, 383, 403, 414, 415, 456, 467, 468, 469, 470], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 46, 51, 193, 209, 210, 212, 214, 218, 220, 222, 235, 236, 237, 241, 246, 247, 255, 258, 271, 280, 314, 315, 318, 320, 321, 351, 375, 403, 404, 405, 406, 456, 458, 463, 465, 468, 469, 470, 471], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 42, 45, 46, 47, 52, 122, 192, 196, 198, 200, 206, 208, 210, 211, 215, 216, 217, 222, 225, 226, 227, 228, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 306, 307, 310, 312, 318, 321, 336, 375, 383, 389, 399, 448, 455, 456, 467, 468, 469, 476, 477], "count": [0, 6, 33, 51, 119, 120, 121, 189, 190, 191, 192, 210, 212, 215, 217, 218, 221, 222, 229, 237, 239, 246, 247, 308, 309, 313, 314, 317, 321, 331, 389, 456, 469, 483, 487], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 44, 45, 46, 47, 49, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 198, 200, 201, 203, 206, 209, 210, 211, 212, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 251, 255, 258, 259, 260, 261, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 286, 287, 288, 290, 291, 299, 304, 305, 306, 308, 309, 310, 312, 313, 315, 316, 318, 320, 321, 332, 333, 338, 343, 344, 350, 351, 353, 354, 355, 357, 360, 361, 362, 363, 365, 366, 368, 370, 371, 374, 376, 377, 385, 387, 388, 389, 391, 392, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 417, 421, 423, 429, 434, 438, 441, 442, 446, 448, 449, 450, 451, 453, 454, 456, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 476], "travers": [0, 6, 13, 15, 17, 193, 194, 196, 209, 210, 215, 218, 221, 226, 236, 237, 238, 239, 304, 307, 310, 312, 316, 319, 450, 456, 465, 468, 469, 470, 479, 487], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 41, 42, 45, 46, 47, 51, 196, 203, 206, 209, 210, 212, 214, 215, 218, 220, 221, 222, 225, 226, 232, 235, 237, 238, 239, 240, 241, 242, 243, 246, 247, 251, 297, 304, 305, 306, 310, 312, 314, 318, 319, 321, 325, 380, 384, 408, 409, 413, 416, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 437, 440, 442, 443, 448, 456, 463, 467, 468, 469, 470, 476, 477], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 44, 47, 49, 55, 125, 196, 198, 200, 201, 208, 209, 213, 214, 215, 220, 221, 229, 231, 233, 234, 235, 240, 242, 245, 246, 248, 304, 308, 310, 319, 320, 321, 356, 381, 385, 387, 388, 391, 407, 421, 450, 458, 463, 468, 469, 473, 486], "root": [0, 4, 27, 32, 36, 44, 199, 203, 235, 238, 356, 358, 449, 450, 467], "explor": [0, 17, 45, 46, 195, 201, 206, 211, 220, 222, 236, 237, 240, 468], "present": [0, 2, 20, 27, 46, 200, 217, 222, 229, 230, 231, 232, 233, 234, 236, 237, 239, 251, 321, 332, 375, 456, 467, 468], "prior": [0, 12, 34, 45, 220, 222, 225, 236], "move": [0, 4, 6, 45, 196, 214, 238, 310, 413, 416], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 195, 221, 222, 226, 229, 230, 235, 236, 241, 304, 305, 308, 310, 312, 314, 315, 316, 382, 450, 462, 465, 468, 469, 471], "level": [0, 6, 12, 38, 44, 196, 206, 210, 236, 238, 241, 247, 312, 366, 413, 414, 453, 468, 469], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 131, 146, 149, 151, 153, 154, 156, 157, 158, 159, 163, 174, 185, 189, 190, 202, 217, 218, 231, 233, 235, 246, 247, 248, 249, 281, 305, 306, 307, 308, 309, 310, 313, 316, 317, 318, 320, 321, 349, 354, 356, 358, 361, 363, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 391, 392, 393, 394, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 417, 418, 419, 420, 451, 456, 458, 463, 465, 469, 479, 487, 489], "evalu": [0, 6, 14, 15, 16, 18, 37, 225, 237, 238, 241, 244, 246, 247, 248, 259, 282, 291, 293, 297, 299, 318, 463, 473, 487], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 45, 47, 48, 49, 192, 194, 196, 200, 203, 206, 209, 210, 214, 218, 220, 222, 225, 228, 230, 231, 236, 237, 238, 239, 241, 243, 244, 246, 247, 249, 251, 304, 305, 306, 308, 311, 312, 313, 316, 318, 319, 321, 356, 375, 400, 402, 403, 407, 426, 431, 436, 448, 450, 454, 456, 459, 462, 463, 465, 467, 468, 469, 472, 473, 479], "known": [0, 6, 8, 9, 24, 32, 209, 212, 214, 215, 222, 239, 240, 247, 338, 356, 359, 408, 409, 426, 450, 471], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 46, 122, 123, 124, 125, 160, 161, 170, 192, 193, 196, 203, 209, 212, 214, 218, 221, 222, 225, 235, 242, 247, 248, 251, 297, 299, 305, 306, 308, 313, 316, 318, 354, 364, 369, 375, 378, 379, 380, 381, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 410, 411, 412, 413, 416, 421, 448, 451, 453, 456, 458, 462, 463, 467, 468, 469, 472], "max_round": [0, 247, 467, 479], "10": [0, 13, 15, 16, 17, 20, 27, 31, 47, 203, 205, 206, 210, 212, 213, 218, 220, 222, 228, 229, 231, 232, 233, 234, 237, 244, 247, 305, 306, 307, 309, 310, 316, 318, 321, 323, 324, 325, 359, 365, 375, 378, 380, 389, 390, 391, 392, 394, 398, 403, 407, 411, 427, 433, 438, 451, 456, 463, 467, 469, 477, 479, 483, 487], "maximum": [0, 47, 209, 215, 220, 222, 239, 247, 307, 321, 375, 391, 406, 407, 408, 409, 414, 455, 469], "round": [0, 9, 14, 17, 24, 247, 249, 373, 383], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 44, 46, 47, 48, 51, 122, 123, 124, 125, 160, 161, 170, 192, 193, 196, 198, 200, 203, 206, 209, 211, 212, 218, 220, 222, 228, 231, 233, 235, 244, 246, 247, 248, 249, 266, 275, 297, 298, 301, 305, 306, 310, 317, 318, 320, 321, 323, 324, 325, 328, 350, 352, 353, 356, 358, 359, 361, 363, 365, 366, 368, 370, 371, 374, 375, 378, 379, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 448, 449, 451, 453, 454, 456, 458, 459, 463, 465, 467, 469, 476, 477, 489], "origin": [0, 4, 6, 9, 12, 13, 22, 45, 210, 217, 218, 220, 226, 231, 232, 241, 246, 248, 275, 304, 306, 318, 319, 375, 397, 403, 442, 450, 454, 456, 462, 463, 469, 470], "reciproc": [0, 321], "n": [0, 19, 20, 30, 33, 38, 44, 46, 51, 122, 123, 124, 125, 160, 161, 170, 191, 192, 198, 200, 210, 212, 213, 215, 220, 222, 225, 229, 237, 241, 244, 247, 248, 308, 310, 313, 315, 321, 331, 335, 336, 338, 342, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 377, 378, 379, 384, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 417, 418, 421, 434, 449, 450, 451, 453, 456], "reachabl": [0, 321], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 47, 51, 192, 203, 206, 215, 216, 228, 229, 230, 236, 237, 239, 241, 243, 245, 247, 248, 249, 269, 272, 277, 280, 281, 299, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 342, 344, 346, 348, 349, 350, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 468, 470, 479, 482, 483, 488], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 225, 236, 238, 239, 241, 243, 308, 314, 465, 468], "improv": [0, 6, 9, 17, 19, 23, 196, 218, 238, 241, 242, 243, 472], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 47, 51, 121, 191, 192, 193, 196, 198, 203, 206, 210, 211, 212, 214, 217, 218, 220, 222, 225, 226, 227, 228, 229, 235, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 251, 304, 305, 308, 309, 310, 314, 315, 318, 321, 354, 395, 402, 403, 417, 418, 450, 456, 458, 463, 467, 468, 469, 472, 473, 476], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 196, 203, 209, 210, 215, 220, 222, 224, 229, 235, 236, 239, 240, 242, 243, 247, 306, 308, 310, 317, 321, 331, 365, 373, 375, 377, 382, 384, 395, 397, 406, 463, 468, 469, 472, 473], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 47, 51, 192, 196, 203, 206, 208, 209, 210, 215, 218, 220, 222, 226, 229, 235, 237, 240, 241, 243, 246, 247, 249, 255, 256, 296, 304, 305, 306, 307, 308, 310, 314, 318, 321, 330, 354, 355, 358, 359, 362, 371, 372, 375, 384, 385, 390, 392, 393, 394, 395, 396, 398, 413, 416, 424, 427, 431, 434, 440, 441, 442, 448, 450, 452, 456, 462, 463, 465, 467, 468, 469, 472, 483, 487], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 47, 203, 212, 217, 236, 238, 239, 240, 246, 247, 321, 389, 403, 462, 468, 469], "ratio": [0, 13, 222, 448], "actor": [0, 192, 198, 222, 236, 433], "group": [0, 2, 196, 203, 210, 233, 235, 237, 239, 240, 246, 312, 318, 379, 380, 381, 383, 400, 428, 446, 467, 469, 487, 489], "who": [0, 11, 29, 196, 222, 236, 240, 311, 316, 469], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 46, 47, 193, 196, 198, 200, 203, 205, 206, 208, 209, 211, 214, 217, 219, 220, 221, 222, 223, 224, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 243, 245, 248, 251, 259, 305, 306, 310, 312, 463, 464, 467, 468, 469, 470, 472, 473, 483], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 44, 45, 46, 121, 191, 196, 198, 200, 206, 214, 217, 218, 220, 222, 226, 228, 229, 232, 235, 236, 237, 239, 240, 241, 247, 248, 249, 296, 304, 306, 310, 314, 316, 318, 321, 363, 366, 373, 375, 395, 400, 413, 416, 424, 443, 453, 463, 468, 469, 471], "being": [0, 47, 218, 229, 240, 318, 355, 385, 465, 468, 469, 470], "cliqu": [0, 6, 222, 236, 239, 376, 377, 381, 382, 384, 398], "complet": [0, 14, 31, 33, 34, 192, 210, 214, 218, 222, 235, 238, 304, 306, 310, 331, 356, 357, 359, 361, 362, 368, 373, 382, 413, 416, 440, 456, 469], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 44, 45, 47, 195, 203, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 225, 227, 229, 235, 236, 237, 239, 240, 241, 243, 247, 248, 251, 255, 304, 305, 306, 307, 308, 310, 311, 313, 314, 316, 318, 321, 331, 335, 338, 350, 356, 361, 366, 375, 385, 386, 387, 389, 395, 398, 413, 414, 416, 432, 436, 450, 456, 462, 463, 467, 468, 469, 471, 473, 476, 477, 483], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 45, 47, 52, 77, 90, 121, 122, 147, 160, 191, 192, 196, 202, 209, 210, 214, 215, 217, 218, 220, 226, 228, 229, 231, 232, 233, 234, 236, 237, 239, 240, 241, 243, 246, 247, 248, 249, 260, 261, 264, 269, 276, 280, 281, 299, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 328, 331, 332, 334, 335, 336, 338, 340, 341, 344, 345, 347, 349, 350, 351, 355, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 372, 373, 375, 377, 380, 381, 383, 385, 386, 387, 389, 391, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 446, 450, 453, 454, 455, 456, 457, 459, 462, 463, 465, 467, 469, 470, 471, 479, 483, 484, 488], "u": [0, 6, 14, 16, 18, 20, 37, 202, 203, 218, 222, 235, 237, 247, 310, 314, 316, 318, 321, 327, 350, 362, 375, 389, 395, 398, 403, 406, 418, 456, 468, 479, 489], "equal": [0, 10, 203, 215, 220, 222, 228, 232, 235, 237, 321, 373, 375, 406, 411, 449, 483], "degree_assortativity_coeffici": [0, 247, 479], "hold": [0, 10, 20, 48, 220, 246, 247, 248, 249, 275, 283, 306, 318, 321, 456, 462], "numer": [0, 20, 215, 220, 236, 238, 239, 247, 248, 321, 456, 462, 468], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 44, 46, 47, 51, 57, 58, 67, 82, 84, 87, 90, 91, 93, 96, 97, 102, 106, 112, 116, 160, 161, 165, 182, 186, 202, 203, 209, 210, 212, 215, 226, 231, 233, 235, 239, 241, 246, 247, 248, 249, 282, 291, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 330, 350, 365, 375, 403, 404, 405, 406, 413, 415, 416, 448, 449, 450, 456, 458, 459, 462, 463, 465, 467, 468, 469, 470, 479, 487, 488, 489], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 44, 45, 46, 47, 48, 192, 193, 195, 198, 200, 203, 209, 211, 212, 214, 220, 222, 228, 235, 237, 243, 247, 248, 251, 303, 305, 306, 310, 311, 314, 315, 317, 318, 319, 320, 321, 326, 327, 329, 336, 340, 341, 350, 351, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 448, 451, 452, 454, 456, 458, 459, 462, 463, 465, 468, 469, 470, 476, 477], "fals": [0, 13, 15, 17, 18, 19, 20, 44, 46, 48, 196, 209, 214, 220, 233, 234, 235, 246, 247, 249, 297, 304, 305, 306, 310, 316, 318, 320, 321, 334, 338, 340, 341, 350, 352, 353, 378, 379, 380, 383, 389, 399, 414, 456, 459, 463, 467, 469, 479, 488], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 44, 45, 47, 192, 196, 203, 206, 210, 211, 212, 214, 215, 217, 218, 219, 222, 226, 229, 230, 231, 235, 236, 237, 238, 240, 241, 242, 243, 246, 247, 248, 249, 251, 296, 304, 305, 306, 307, 308, 310, 313, 314, 315, 316, 318, 319, 321, 338, 340, 341, 344, 349, 350, 356, 371, 373, 375, 386, 390, 395, 403, 404, 405, 406, 407, 413, 416, 422, 423, 427, 428, 432, 438, 440, 443, 446, 448, 450, 454, 456, 460, 462, 463, 469, 471, 473, 483, 484, 487], "adjac": [0, 10, 16, 20, 24, 220, 222, 241, 247, 307, 312, 321, 344, 377, 401, 419, 434, 448, 449, 456, 457, 468], "direct": [0, 9, 10, 15, 45, 47, 209, 222, 226, 229, 232, 235, 237, 238, 241, 246, 247, 267, 297, 304, 306, 310, 313, 316, 318, 321, 326, 331, 337, 352, 363, 376, 377, 378, 379, 380, 383, 387, 388, 390, 399, 400, 401, 402, 413, 414, 423, 450, 454, 456, 457, 459, 463, 467, 468, 470, 484, 488, 489], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 45, 47, 222, 235, 236, 238, 243, 244, 251, 305, 308, 309, 310, 313, 314, 315, 316, 321, 350, 355, 362, 438, 443, 452, 456, 469, 473], "separ": [0, 6, 17, 30, 36, 198, 209, 211, 222, 236, 243, 305, 306, 403, 458, 468, 469], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 45, 46, 47, 52, 53, 54, 55, 90, 91, 122, 123, 124, 125, 160, 161, 170, 193, 196, 198, 203, 209, 214, 217, 218, 220, 222, 225, 228, 231, 235, 236, 237, 238, 240, 246, 247, 251, 266, 304, 305, 308, 310, 313, 315, 316, 321, 358, 380, 382, 405, 462, 463, 467, 468, 469, 483], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 198, 200, 203, 209, 210, 211, 214, 215, 217, 218, 220, 222, 233, 234, 235, 236, 238, 240, 246, 247, 248, 249, 255, 291, 305, 307, 310, 312, 314, 316, 318, 319, 321, 340, 341, 355, 422, 429, 434, 446, 452, 456, 458, 459, 462, 463, 467, 468, 469, 477, 479, 480, 482, 487, 489], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 47, 193, 198, 209, 212, 217, 218, 226, 232, 235, 236, 237, 238, 239, 240, 241, 247, 249, 304, 305, 306, 318, 319, 320, 335, 344, 349, 350, 355, 375, 399, 402, 407, 413, 416, 463, 465, 467, 468, 469, 471, 472, 486, 487], "degree_centr": [0, 34, 206, 247, 321, 457, 479], "centrality_typ": [0, 247], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 44, 48, 193, 209, 210, 217, 220, 224, 226, 236, 237, 239, 243, 398, 405, 421, 448, 465, 468, 469, 471, 473], "far": [0, 236, 305], "possibl": [0, 4, 6, 15, 46, 196, 201, 203, 210, 226, 240, 241, 247, 306, 312, 313, 321, 389, 397, 398, 413, 414, 415, 416, 448, 452, 468], "along": [0, 6, 10, 20, 24, 31, 200, 218, 220, 226, 249, 306, 310, 316, 450, 456, 469, 470], "branch": [0, 215, 222, 310, 356, 366, 487], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 44, 45, 47, 193, 200, 214, 220, 222, 229, 231, 246, 247, 251, 304, 310, 317, 356, 358, 359, 361, 363, 366, 368, 370, 371, 374, 385, 387, 388, 390, 392, 393, 394, 400, 401, 402, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 451, 458, 463, 465, 468, 469, 471], "backtrack": 0, "influenc": [0, 27, 321], "relationship": [0, 47, 196, 203, 210, 215, 216, 217, 222, 226, 229, 236, 239, 240, 241, 305, 306, 316, 468, 469], "high": [0, 6, 9, 196, 201, 206, 210, 217, 222, 235, 238, 239, 241, 242, 243, 244, 312, 390, 421, 463, 465], "score": [0, 222, 241], "contribut": [0, 4, 208, 468], "low": [0, 6, 7, 13, 32, 210, 228, 236, 237, 241, 242, 243, 448, 469], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 44, 46, 47, 192, 194, 201, 206, 211, 213, 215, 221, 222, 226, 228, 235, 236, 238, 239, 240, 241, 244, 246, 247, 248, 249, 256, 257, 259, 260, 261, 264, 267, 269, 276, 277, 281, 282, 291, 308, 309, 310, 313, 315, 318, 319, 320, 321, 323, 324, 325, 327, 328, 330, 332, 334, 335, 336, 338, 339, 340, 341, 344, 349, 350, 351, 354, 355, 356, 358, 359, 361, 365, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 391, 395, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 422, 424, 433, 444, 448, 449, 450, 451, 453, 454, 456, 458, 463, 467, 468, 469, 470, 471], "mean": [0, 2, 20, 29, 30, 36, 37, 44, 47, 196, 209, 210, 218, 231, 246, 248, 254, 293, 306, 309, 310, 320, 321, 361, 378, 385, 395, 404, 405, 406, 456, 459, 462, 463, 465, 467, 468, 469, 471, 476], "themselv": [0, 210, 222, 226, 450], "eigenvector_centr": [0, 34, 247, 321, 457, 479], "toler": [0, 247, 321, 375], "doubl": [0, 9, 14, 16, 18, 33, 46, 82, 96, 202, 215, 217, 218, 220, 235, 244, 249, 305, 315, 426, 450, 467, 471, 479, 487, 489], "error": [0, 2, 32, 36, 37, 38, 44, 49, 52, 54, 55, 90, 91, 100, 122, 124, 125, 160, 161, 170, 203, 208, 210, 212, 217, 246, 247, 310, 314, 321, 355, 456, 469], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 48, 196, 200, 203, 209, 210, 214, 217, 220, 222, 229, 231, 239, 240, 247, 314, 318, 321, 414, 415, 456, 463, 468, 469, 477, 482, 483], "converg": [0, 6, 9, 14, 17, 24, 241, 244, 247, 321], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 44, 47, 52, 122, 206, 209, 211, 212, 219, 220, 222, 226, 230, 231, 233, 237, 239, 241, 244, 246, 247, 249, 306, 307, 308, 309, 310, 313, 317, 321, 331, 336, 338, 347, 348, 349, 354, 355, 357, 359, 362, 366, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 421, 429, 434, 439, 446, 448, 449, 451, 453, 454, 455, 456, 463, 465, 468, 469, 470, 477, 483, 487], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 220, 221, 226, 228, 229, 231, 232, 235, 236, 237, 238, 239, 241, 242, 247, 249, 304, 307, 316, 320, 321, 323, 324, 325, 326, 327, 332, 343, 344, 345, 346, 350, 351, 361, 362, 363, 365, 368, 370, 371, 374, 375, 403, 404, 405, 406, 407, 413, 416, 418, 450, 456, 479, 483, 488], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 200, 201, 206, 208, 210, 212, 213, 214, 221, 222, 224, 226, 228, 229, 231, 232, 234, 235, 237, 239, 241, 247, 248, 297, 299, 304, 305, 306, 308, 311, 313, 315, 316, 317, 318, 321, 375, 403, 404, 405, 406, 456, 463, 467, 471, 473, 477, 479, 480, 481, 483, 484, 487, 488, 489], "rate": [0, 45, 196, 201, 236, 242, 247, 403, 405, 406], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 47, 196, 197, 203, 206, 209, 210, 214, 215, 217, 218, 220, 222, 226, 227, 235, 237, 239, 240, 241, 243, 244, 304, 305, 306, 307, 308, 310, 312, 314, 316, 318, 321, 327, 350, 357, 358, 360, 362, 363, 367, 384, 395, 396, 403, 404, 405, 406, 407, 411, 413, 416, 417, 422, 423, 431, 449, 450, 455, 456, 467, 468, 469, 476, 483], "hub": [0, 29, 247, 248, 321, 374, 462], "author": [0, 27, 49, 232, 237, 247, 321, 375, 463, 483], "estim": [0, 210, 217, 222, 239, 240, 316, 321], "within": [0, 13, 30, 36, 44, 46, 47, 51, 196, 198, 200, 201, 214, 215, 217, 218, 220, 221, 222, 227, 236, 237, 238, 239, 240, 241, 310, 319, 321, 375, 378, 379, 399, 405, 406, 463, 468, 477, 483, 487], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 44, 45, 46, 47, 48, 51, 121, 191, 192, 193, 195, 196, 198, 203, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 248, 251, 255, 257, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 359, 373, 375, 385, 387, 413, 434, 456, 459, 462, 463, 467, 468, 469, 471, 473, 483, 489], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 44, 45, 47, 48, 51, 52, 53, 55, 122, 123, 125, 196, 203, 206, 209, 210, 214, 222, 225, 226, 227, 228, 231, 235, 236, 237, 238, 240, 241, 243, 246, 247, 251, 304, 305, 306, 308, 310, 313, 314, 315, 317, 318, 390, 403, 408, 414, 434, 450, 456, 459, 465, 468, 469, 471, 472, 473, 479], "rel": [0, 27, 44, 46, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 210, 211, 226, 235, 241, 306, 310, 321, 469], "immedi": [0, 6, 196, 210, 242, 247, 249, 310, 321, 459, 463, 469], "under": [0, 9, 10, 14, 17, 24, 38, 47, 196, 198, 217, 222, 228, 235, 236, 247, 251, 310, 312, 313, 321, 468], "consider": [0, 217, 218, 235, 321, 378], "katz_centr": [0, 34, 247, 321, 457, 479], "alpha": [0, 222, 247, 321, 395, 396, 407, 448], "beta": [0, 247, 321, 396, 407], "attenu": [0, 321], "factor": [0, 13, 211, 222, 247, 321, 356, 366, 388, 390, 468], "neighborhood": [0, 6, 236, 238, 241, 247, 310, 314, 321, 399], "maxim": [0, 6, 321, 409, 455], "subgraph": [0, 6, 9, 17, 33, 222, 223, 225, 237, 238, 239, 247, 269, 275, 304, 310, 312, 318, 319, 321, 332, 335, 357, 368, 399, 456, 467, 483, 487], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 45, 46, 193, 195, 198, 203, 206, 209, 210, 215, 217, 219, 220, 222, 226, 229, 230, 233, 235, 236, 237, 239, 241, 243, 244, 246, 249, 251, 304, 305, 308, 310, 313, 314, 315, 316, 318, 321, 323, 324, 325, 332, 335, 336, 351, 361, 362, 363, 365, 368, 383, 408, 409, 413, 414, 456, 459, 460, 463, 467, 468, 469, 477, 481, 487], "found": [0, 4, 9, 16, 17, 18, 36, 52, 54, 90, 91, 122, 124, 160, 161, 192, 203, 209, 221, 222, 226, 227, 238, 244, 297, 317, 375, 417, 418, 454, 456, 463, 467, 468, 469, 473], "recurs": [0, 6, 310, 358], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 209, 214, 215, 220, 235, 247, 310, 317, 321, 373, 384, 395, 397, 469], "kkore": [0, 34], "order": [0, 6, 34, 46, 196, 210, 215, 217, 225, 238, 240, 241, 247, 248, 305, 310, 316, 321, 323, 324, 330, 354, 355, 358, 363, 370, 383, 384, 387, 419, 420, 423, 448, 449, 456, 462, 465, 469, 487], "That": [0, 27, 247, 315, 373, 416, 459, 471], "kshell": [0, 34], "fast": [0, 9, 20, 210, 247, 314], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 44, 47, 48, 192, 203, 214, 215, 217, 218, 225, 226, 235, 236, 237, 240, 241, 243, 247, 291, 305, 306, 308, 310, 314, 321, 331, 338, 356, 385, 389, 391, 400, 403, 404, 405, 406, 434, 456, 463, 468, 469, 476, 483, 487], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 209, 218, 227, 235, 237, 239, 241, 246, 247, 249, 321, 375, 383, 385, 387, 389, 403, 406, 411, 456, 459, 462, 465, 468, 469, 489], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 192, 198, 203, 212, 220, 222, 238, 239, 241, 246, 305, 310, 375, 463, 465, 469, 470, 471, 472], "aim": [0, 22, 51, 196, 222, 232, 238, 239, 240, 241, 243], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 46, 121, 199, 203, 208, 209, 213, 221, 222, 230, 235, 236, 237, 241, 246, 247, 251, 281, 305, 306, 314, 315, 316, 318, 467, 470, 476, 486, 487], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 51, 121, 191, 192, 193, 195, 198, 200, 201, 203, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 248, 251, 255, 304, 305, 306, 307, 308, 310, 313, 314, 316, 318, 320, 355, 375, 385, 389, 395, 398, 408, 409, 415, 418, 439, 452, 456, 463, 465, 467, 468, 469, 470, 472, 473, 476, 477], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 42, 44, 51, 193, 200, 203, 206, 209, 210, 212, 215, 217, 218, 222, 225, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 308, 309, 310, 313, 316, 318, 375, 403, 407, 456, 462, 465, 467, 468, 469, 476], "ldbc": [0, 4, 34, 196, 209, 211, 218, 219, 225, 235, 239, 243, 244, 467, 484, 489], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 45, 47, 51, 196, 198, 203, 206, 209, 210, 217, 218, 221, 225, 238, 240, 241, 308, 310, 312, 314, 321, 375, 441, 448, 450, 456, 463, 467, 468, 470], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 44, 48, 51, 90, 91, 160, 161, 200, 206, 208, 215, 217, 220, 226, 235, 236, 238, 239, 240, 241, 243, 247, 249, 255, 257, 301, 303, 305, 308, 310, 314, 315, 318, 321, 340, 341, 345, 387, 396, 410, 454, 456, 463, 465, 467], "variant": [0, 31, 241, 244], "networkx": [0, 3, 7, 8, 12, 34, 206, 225, 242, 245, 246, 247, 281, 321, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 338, 339, 340, 341, 345, 346, 350, 351, 355, 356, 358, 359, 361, 362, 363, 366, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 396, 399, 400, 401, 402, 407, 408, 409, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 449, 451, 456, 458, 459, 461, 485, 490], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 39, 41, 42, 44, 45, 46, 47, 48, 121, 193, 196, 203, 206, 209, 210, 211, 212, 215, 216, 217, 220, 222, 225, 228, 229, 235, 236, 237, 238, 240, 241, 244, 245, 246, 247, 249, 297, 303, 304, 305, 306, 308, 310, 313, 316, 317, 318, 319, 320, 321, 335, 359, 375, 389, 390, 395, 399, 407, 410, 411, 412, 417, 418, 436, 451, 454, 456, 459, 463, 467, 468, 469, 470, 473, 476, 481, 482, 486], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 47, 220, 222, 226, 228, 241, 296, 448, 469, 471], "rank": [0, 6, 33, 233, 236, 246, 247, 248, 448, 462], "vote": [0, 249], "scheme": [0, 6, 9, 45, 46, 192, 209, 235], "With": [0, 4, 12, 19, 24, 34, 36, 41, 198, 199, 211, 217, 218, 220, 222, 225, 230, 231, 236, 237, 238, 394, 467, 476], "top": [0, 9, 12, 22, 34, 122, 123, 124, 125, 160, 161, 170, 218, 220, 222, 243, 308, 430, 469, 487], "highest": [0, 222, 390], "elect": 0, "num_of_nod": [0, 247], "select": [0, 9, 15, 36, 47, 210, 214, 218, 226, 229, 235, 236, 239, 241, 248, 256, 262, 263, 273, 274, 278, 286, 287, 304, 310, 318, 375, 384, 407, 419, 453, 456, 462, 463, 467, 468, 487], "influenti": 0, "extract": [0, 195, 213, 215, 220, 235, 236, 237, 238, 247, 255, 319, 463, 465, 469], "weakli": [0, 247, 321, 395], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 44, 45, 46, 47, 48, 51, 194, 195, 196, 198, 203, 206, 208, 209, 210, 211, 212, 214, 215, 218, 220, 221, 222, 224, 225, 226, 229, 231, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 248, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 321, 378, 407, 410, 413, 414, 416, 456, 459, 462, 465, 468, 469, 471, 473, 476], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 45, 206, 210, 211, 212, 215, 217, 218, 220, 222, 224, 225, 226, 229, 235, 238, 244, 266, 282, 305, 306, 307, 308, 318, 450, 456, 469, 473], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 196, 198, 203, 211, 212, 214, 217, 222, 236, 237, 241, 242, 244, 245, 304, 318, 392, 393, 394, 465, 467, 473], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 44, 45, 46, 47, 48, 49, 91, 161, 192, 193, 196, 197, 198, 200, 203, 206, 208, 209, 210, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 265, 304, 306, 310, 311, 312, 316, 321, 352, 353, 375, 403, 404, 405, 406, 453, 456, 458, 463, 465, 467, 468, 469, 470, 473, 476, 479], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 44, 45, 48, 49, 90, 93, 100, 121, 160, 170, 191, 192, 196, 198, 200, 201, 203, 209, 211, 213, 214, 221, 224, 227, 230, 231, 235, 236, 237, 238, 241, 243, 245, 246, 247, 248, 282, 293, 310, 314, 315, 316, 318, 319, 408, 409, 459, 460, 463, 468, 469, 470, 471, 472, 473, 476, 477, 479, 481], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 45, 48, 121, 193, 195, 196, 198, 201, 203, 211, 212, 213, 214, 221, 226, 227, 228, 230, 231, 237, 243, 245, 247, 251, 306, 311, 315, 316, 365, 385, 456, 463, 465, 468, 476, 479, 487], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 193, 214, 218, 224, 225, 239, 245, 251, 296, 308, 311, 316, 375, 385, 463, 468, 469, 473], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 44, 46, 47, 191, 196, 198, 200, 201, 206, 208, 212, 217, 218, 222, 228, 229, 230, 231, 238, 240, 241, 242, 243, 246, 304, 306, 312, 321, 456, 469], "extens": [1, 4, 6, 27, 36, 46, 210, 212, 215, 229, 236, 305], "henc": [1, 2, 10, 32, 235, 330, 453, 456, 469], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 44, 45, 48, 51, 121, 191, 192, 193, 195, 196, 198, 203, 209, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 227, 228, 230, 231, 235, 237, 240, 242, 243, 245, 247, 251, 303, 305, 306, 309, 310, 311, 314, 315, 318, 321, 334, 365, 375, 385, 387, 399, 404, 405, 406, 456, 463, 465, 467, 468, 469, 471, 476, 477, 479, 489], "flash": [1, 3, 8, 12, 236], "java": [1, 4, 8, 12, 14, 34, 49, 197, 201, 208, 211, 217, 223, 225, 238, 239, 243, 247, 251, 255, 468, 479], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 44, 45, 49, 51, 192, 193, 194, 196, 198, 200, 201, 217, 220, 222, 225, 226, 233, 236, 238, 239, 246, 247, 248, 251, 254, 266, 278, 306, 310, 314, 316, 321, 354, 355, 365, 385, 396, 409, 410, 413, 414, 448, 450, 452, 453, 456, 468, 471, 477, 479, 481, 487], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 42, 49, 193, 197, 201, 203, 206, 208, 209, 212, 214, 216, 222, 223, 226, 228, 231, 235, 236, 237, 239, 240, 242, 243, 246, 247, 254, 304, 307, 311, 314, 316, 319, 320, 456, 458, 459, 467, 468, 476, 477, 479, 480, 482, 483, 485, 486, 487, 489], "These": [1, 4, 9, 15, 20, 24, 46, 47, 196, 209, 215, 226, 235, 236, 237, 239, 240, 241, 242, 310, 316, 468, 476], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 198, 206, 209, 210, 211, 214, 216, 218, 220, 222, 226, 229, 231, 232, 233, 234, 236, 237, 239, 240, 241, 244, 246, 247, 248, 254, 255, 257, 258, 262, 263, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 283, 286, 287, 291, 297, 299, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 319, 320, 321, 326, 327, 330, 332, 335, 336, 338, 340, 341, 344, 345, 346, 349, 350, 351, 354, 355, 356, 358, 359, 361, 362, 363, 365, 366, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 451, 452, 453, 457, 458, 460, 461, 463, 465, 468, 469, 471, 480, 483, 488], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 44, 45, 48, 49, 67, 87, 90, 91, 100, 106, 121, 137, 157, 160, 161, 170, 176, 191, 192, 194, 197, 199, 201, 203, 206, 209, 211, 212, 213, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 262, 263, 275, 278, 282, 286, 287, 291, 304, 306, 308, 310, 312, 316, 318, 320, 340, 341, 461, 462, 463, 468, 471, 473, 477, 483], "upon": [1, 2, 9, 14, 196, 215, 217, 243, 318, 469, 470], "pregel": [1, 4, 8, 12, 17, 22, 34, 225, 236, 239, 461, 473, 483, 485], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 44, 90, 91, 160, 161, 206, 211, 217, 222, 229, 235, 237, 304, 454, 456, 489], "deploi": [2, 15, 33, 37, 121, 201, 203, 208, 210, 211, 212, 213, 221, 225, 228, 236, 238, 243, 306, 463, 465, 470], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 46, 195, 196, 203, 209, 211, 212, 213, 221, 227, 228, 230, 231, 236, 237, 238, 239, 240, 241, 247, 304, 316, 463, 468], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 44, 47, 193, 198, 203, 210, 214, 217, 222, 225, 226, 235, 237, 238, 241, 251, 268, 305, 308, 309, 310, 314, 316, 318, 321, 384, 405, 436, 454, 456, 460, 462, 468, 469, 470, 471], "advantag": [2, 210, 225, 235, 242, 243, 472], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 44, 47, 90, 121, 160, 191, 192, 201, 203, 206, 209, 210, 211, 212, 216, 218, 220, 221, 222, 226, 229, 233, 234, 237, 241, 244, 247, 248, 307, 308, 309, 310, 313, 318, 319, 321, 323, 324, 325, 327, 332, 336, 340, 341, 357, 359, 362, 365, 371, 375, 376, 377, 379, 380, 381, 383, 387, 390, 391, 395, 396, 400, 402, 413, 414, 416, 418, 421, 424, 429, 433, 434, 437, 440, 443, 445, 448, 449, 450, 451, 456, 458, 459, 468, 471, 480, 483, 486, 487], "gie": [2, 32, 33, 208, 215, 222, 225, 235, 236, 240, 243, 244, 245, 275, 463, 480, 481, 490], "gle": [2, 32, 208, 225, 228, 229, 230, 236, 241, 243, 245, 480, 481, 488], "address": [2, 9, 14, 17, 23, 31, 44, 203, 217, 218, 233, 236, 241, 469, 487], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 193, 196, 206, 209, 210, 214, 217, 220, 222, 223, 225, 226, 229, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 266, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 375, 379, 380, 381, 403, 406, 413, 433, 448, 456, 461, 463, 465, 467, 468, 469, 470, 471, 472, 473, 476], "complex": [2, 4, 6, 12, 22, 34, 37, 42, 194, 196, 198, 206, 210, 211, 217, 218, 219, 220, 225, 226, 235, 236, 238, 239, 240, 241, 242, 243, 247, 307, 321, 385, 389, 404, 405, 406, 468], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 45, 47, 57, 121, 127, 191, 192, 193, 194, 196, 200, 203, 208, 210, 214, 216, 217, 221, 226, 229, 232, 236, 237, 238, 240, 241, 246, 306, 310, 316, 412, 448, 453, 467, 468, 469], "show": [2, 14, 19, 20, 27, 29, 30, 38, 198, 200, 203, 210, 211, 222, 225, 230, 231, 237, 239, 240, 241, 307, 308, 316, 459, 463, 465, 468], "kubernet": [2, 29, 203, 206, 208, 209, 211, 225, 230, 233, 235, 237, 242, 463, 469, 480, 482, 483, 485, 489, 490], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 203, 206, 208, 211, 213, 221, 222, 225, 228, 230, 235, 236, 237, 238, 239, 240, 241, 242, 247, 306, 316, 321, 378, 457, 463, 469, 470, 477, 479, 486], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 44, 47, 48, 193, 196, 203, 206, 209, 210, 212, 214, 215, 217, 218, 222, 226, 235, 236, 241, 243, 305, 306, 307, 312, 321, 385, 456, 468, 469], "scenario": [2, 4, 6, 8, 12, 13, 41, 47, 196, 198, 210, 220, 221, 222, 226, 229, 235, 236, 240, 241, 243, 305, 306, 308], "quit": [2, 30, 214, 375], "common": [2, 6, 12, 15, 30, 48, 210, 214, 222, 226, 229, 235, 236, 238, 239, 240, 241, 243, 304, 305, 312, 313, 327, 448, 450, 456, 467, 468, 477], "intend": [2, 13, 36, 215, 448, 462], "analysi": [2, 7, 8, 11, 13, 210, 221, 222, 225, 235, 241, 242, 244, 245, 247, 409], "offlin": [2, 208, 225, 226, 238, 241, 242, 465], "everi": [2, 6, 23, 44, 47, 194, 220, 222, 229, 241, 246, 310, 321, 323, 324, 325, 340, 341, 359, 373, 436, 443, 456, 462, 468], "dai": [2, 20, 47, 222, 456, 459, 467], "export": [2, 4, 23, 29, 31, 33, 39, 195, 203, 211, 227, 467, 469, 482], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 44, 198, 200, 209, 218, 220, 236, 238, 243, 251, 264, 305, 307, 308, 309, 310, 331, 368, 382, 389, 395, 396, 403, 404, 405, 406, 407, 456, 459, 463, 468, 469, 471, 487], "real": [2, 6, 9, 12, 13, 34, 192, 206, 209, 218, 220, 225, 236, 237, 239, 241, 448, 467, 469], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 47, 192, 193, 203, 210, 215, 218, 220, 222, 225, 229, 233, 234, 235, 237, 240, 241, 244, 247, 305, 306, 310, 321, 354, 355, 391, 392, 393, 394, 404, 405, 406, 408, 409, 418, 421, 456, 468, 469, 471, 483, 487], "sampl": [2, 29, 30, 31, 33, 45, 51, 201, 208, 209, 225, 226, 233, 236, 237, 243, 251, 305, 306, 307, 309, 312, 314, 317, 320, 395, 415, 448, 469, 488], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 48, 203, 206, 209, 210, 215, 218, 220, 222, 229, 235, 240, 244, 249, 305, 306, 310, 312, 314, 317, 321, 375, 383, 389, 413, 424, 440, 462, 463, 467, 468, 469, 473, 476], "unnecessari": [2, 6, 9, 217, 222, 468], "capabl": [2, 6, 11, 16, 20, 196, 215, 216, 217, 220, 223, 236, 238, 240, 243, 456], "independ": [2, 6, 30, 236, 243, 305, 319, 332, 335, 383, 410, 456], "document": [2, 10, 27, 29, 33, 35, 36, 38, 49, 198, 200, 201, 203, 211, 214, 215, 216, 220, 221, 223, 225, 227, 241, 247, 304, 305, 311, 463, 464, 469], "walk": [2, 4, 32, 45, 193, 209, 222, 236, 237, 240, 310, 357, 368], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 44, 45, 192, 193, 194, 196, 198, 201, 206, 208, 209, 211, 212, 216, 217, 221, 222, 224, 225, 226, 228, 229, 230, 231, 236, 238, 239, 240, 241, 242, 246, 257, 305, 306, 308, 310, 314, 316, 385, 387, 390, 418, 424, 456, 463, 465, 467, 468, 471, 473], "standalon": [2, 23, 27, 32, 203, 208, 211, 212, 222, 235, 236, 470, 476, 489], "self": [2, 209, 222, 235, 291, 304, 307, 310, 321, 331, 344, 383, 385, 387, 389, 395, 403, 404, 405, 406, 407, 456, 457, 459, 463, 469, 484, 488, 489], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 49, 121, 191, 192, 194, 197, 198, 200, 201, 203, 206, 209, 216, 222, 225, 229, 230, 231, 236, 238, 239, 240, 241, 242, 243, 244, 246, 463, 469, 470, 476, 479], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 48, 203, 206, 208, 209, 213, 221, 225, 228, 230, 235, 243, 245, 463, 469, 479, 480, 481, 483, 486, 489], "7": [2, 10, 20, 23, 27, 30, 31, 32, 121, 191, 203, 212, 220, 222, 244, 305, 311, 316, 323, 324, 336, 359, 421, 427, 429, 433, 434, 437, 439, 451, 456, 471, 482, 486, 487], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 44, 45, 46, 48, 51, 121, 192, 193, 195, 196, 198, 203, 206, 209, 210, 222, 224, 225, 226, 227, 229, 231, 232, 235, 236, 237, 241, 243, 244, 247, 251, 304, 305, 306, 308, 310, 311, 312, 314, 316, 321, 334, 385, 387, 392, 394, 403, 406, 446, 450, 456, 458, 462, 463, 465, 468, 469, 472, 473, 476, 477], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 49, 52, 53, 54, 55, 90, 91, 122, 123, 124, 125, 160, 161, 192, 196, 201, 203, 208, 209, 210, 211, 215, 220, 222, 226, 229, 235, 240, 242, 245, 247, 248, 249, 267, 304, 307, 308, 309, 310, 313, 318, 319, 320, 321, 354, 375, 446, 456, 462, 463, 465, 468, 469, 473, 476, 477, 479, 482, 483], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 48, 49, 193, 201, 203, 209, 211, 213, 221, 237, 247, 251, 314, 456, 459, 463, 480, 481, 482, 483, 486], "client": [2, 17, 22, 23, 29, 33, 38, 41, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 193, 202, 210, 221, 223, 225, 231, 234, 246, 247, 316, 463, 465, 467, 468, 469, 470, 479, 481, 486], "prepar": [2, 4, 33, 36, 45, 201, 209, 212, 214, 226, 227, 228, 229, 231, 232, 237, 241, 245, 468, 483], "continu": [2, 6, 15, 16, 20, 27, 209, 210, 221, 222, 225, 226, 236, 237, 241, 244, 304, 375, 413, 416, 468, 469, 470], "incas": [2, 209], "doesn": [2, 13, 29, 32, 37, 38, 41, 196, 209, 222, 251, 310, 385, 387, 389, 456, 462, 471], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 195, 196, 200, 202, 203, 209, 218, 220, 222, 233, 234, 235, 238, 244, 246, 247, 249, 251, 257, 304, 309, 310, 316, 320, 321, 334, 350, 385, 387, 389, 409, 413, 414, 448, 450, 453, 456, 462, 469, 471, 488], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 47, 192, 195, 209, 211, 212, 220, 225, 227, 235, 245, 247, 299, 306, 308, 309, 318, 384, 467, 468, 469, 470], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 46, 48, 49, 52, 54, 90, 91, 100, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 200, 201, 203, 209, 211, 212, 214, 217, 220, 221, 222, 233, 235, 236, 237, 240, 241, 246, 247, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 281, 284, 285, 291, 297, 298, 299, 308, 310, 313, 315, 318, 319, 334, 356, 358, 359, 361, 362, 363, 365, 366, 368, 370, 371, 373, 374, 375, 377, 378, 380, 383, 385, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 450, 451, 456, 458, 459, 460, 463, 469, 470, 471, 472, 477, 479, 482], "distinct": [2, 51, 215, 220, 236, 237, 240, 361, 423, 449, 468], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 217, 222, 229, 231, 235, 239, 241, 246, 247, 249, 270, 281, 296, 304, 308, 312, 313, 319, 321, 384, 392, 394, 403, 405, 456, 459, 461, 463, 468, 469, 473, 479], "entir": [2, 9, 34, 196, 198, 210, 222, 237, 241, 310, 321, 456], "discret": [2, 226, 241, 304, 375, 388, 390, 396, 400, 411], "util": [2, 4, 6, 9, 15, 32, 36, 41, 42, 45, 47, 51, 196, 200, 215, 216, 217, 222, 225, 227, 232, 235, 236, 238, 239, 242, 246, 247, 249, 320, 421, 467, 468, 469, 472], "either": [2, 13, 30, 34, 193, 198, 203, 209, 217, 218, 221, 222, 229, 247, 306, 310, 318, 319, 359, 362, 375, 402, 413, 446, 456, 470], "aforement": [2, 51, 235, 239, 241, 305, 310, 469], "per": [2, 46, 196, 209, 217, 468, 469], "prefer": [2, 13, 27, 36, 44, 196, 197, 468], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 121, 191, 203, 206, 212, 214, 219, 221, 222, 225, 228, 230, 233, 235, 237, 245, 247, 248, 266, 297, 298, 299, 301, 303, 318, 319, 456, 460, 461, 467, 469, 471, 476, 477, 479, 480, 481, 483, 484, 487, 489], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 215, 222, 229, 232, 235, 237, 241, 246, 247, 248, 249, 254, 304, 305, 318, 319, 320, 321, 365, 434, 456, 460, 463, 468, 469, 470, 479, 488], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 44, 46, 47, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 105, 106, 113, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 183, 186, 187, 188, 189, 198, 200, 209, 211, 213, 214, 215, 218, 220, 221, 222, 225, 227, 233, 235, 238, 240, 243, 247, 248, 251, 254, 275, 281, 282, 283, 293, 303, 305, 308, 310, 318, 319, 321, 323, 324, 325, 340, 341, 350, 356, 358, 359, 361, 363, 365, 366, 368, 370, 371, 374, 378, 379, 380, 383, 385, 387, 388, 390, 391, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 448, 451, 454, 456, 458, 459, 462, 463, 469, 470], "control": [2, 6, 27, 38, 235, 236, 238, 246, 321, 456, 468, 469], "subset": [2, 6, 20, 196, 218, 220, 232, 237, 362, 373, 462, 463], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 48, 192, 203, 206, 209, 219, 228, 230, 231, 237, 245, 297, 315, 460, 463, 469, 470, 476, 479, 483], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 44, 45, 47, 48, 49, 51, 121, 192, 193, 196, 198, 203, 206, 209, 210, 215, 217, 218, 220, 222, 225, 226, 229, 231, 235, 236, 237, 239, 240, 241, 247, 249, 255, 304, 305, 306, 307, 310, 312, 314, 316, 318, 321, 333, 354, 357, 359, 362, 385, 387, 389, 390, 395, 398, 399, 403, 404, 405, 406, 407, 418, 421, 450, 456, 460, 462, 463, 469, 471, 472, 477], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 45, 46, 47, 49, 51, 121, 191, 195, 198, 206, 208, 209, 212, 214, 215, 217, 218, 221, 222, 223, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 247, 248, 254, 255, 297, 299, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 321, 323, 324, 325, 327, 332, 334, 335, 340, 341, 344, 349, 350, 355, 357, 359, 361, 362, 365, 368, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 391, 392, 394, 396, 399, 403, 404, 405, 406, 407, 413, 416, 421, 446, 448, 449, 450, 451, 454, 456, 458, 459, 460, 462, 463, 467, 468, 469, 470, 471, 476, 477, 479, 483, 488], "set_opt": [2, 7, 15, 17, 19, 29, 38, 203, 212, 214, 228, 231, 232, 233, 234, 237, 477, 482], "show_log": [2, 7, 15, 17, 19, 29, 38, 203, 212, 228, 231, 232, 233, 234, 237, 303, 477, 482], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 44, 46, 48, 192, 203, 209, 212, 217, 220, 221, 222, 228, 229, 231, 232, 233, 234, 235, 237, 246, 247, 249, 251, 293, 297, 301, 304, 305, 306, 310, 313, 316, 318, 321, 328, 337, 338, 339, 340, 341, 350, 352, 353, 359, 361, 379, 383, 385, 389, 395, 399, 402, 414, 454, 456, 458, 459, 463, 469, 470, 477, 479, 482, 487, 488, 489], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 206, 214, 231, 232, 233, 235, 247, 248, 293, 297, 318, 319, 463, 467, 471, 477, 479, 480, 481, 483, 484, 487, 489], "enabled_engin": [2, 303, 463], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 41, 45, 47, 51, 192, 193, 196, 198, 200, 206, 211, 212, 214, 218, 220, 221, 222, 224, 225, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 255, 299, 304, 306, 307, 308, 309, 310, 311, 313, 314, 316, 318, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 355, 356, 358, 359, 361, 362, 365, 366, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 453, 454, 456, 458, 459, 462, 463, 465, 467, 468, 469, 470, 472, 473, 476, 477, 479, 482, 483, 484, 486, 487, 488, 489], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 46, 47, 192, 193, 196, 201, 210, 225, 229, 235, 236, 239, 241, 242, 304, 305, 308, 310, 312, 313, 314, 403, 405, 406, 453, 473], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 44, 45, 48, 49, 51, 121, 193, 198, 199, 203, 208, 211, 227, 228, 233, 246, 305, 469, 470, 477], "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 51, 121, 192, 200, 208, 210, 227, 228, 238, 243, 304, 305, 456, 458, 469, 470, 477, 488], "releas": [2, 27, 31, 32, 35, 45, 48, 193, 203, 218, 231, 244, 413, 416, 462, 463, 469, 482, 486], "replac": [2, 17, 19, 22, 23, 29, 30, 45, 191, 210, 211, 214, 220, 238, 244, 307, 308, 309, 318, 456], "my": [2, 18, 29, 456, 459, 463, 469], "illustr": [2, 4, 29, 45, 46, 47, 217, 222, 226, 232, 233, 234, 239, 241, 307, 433], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 48, 121, 191, 206, 209, 210, 213, 221, 222, 229, 231, 235, 236, 237, 304, 310, 450, 465, 471], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 47, 121, 191, 193, 196, 197, 203, 209, 210, 216, 220, 222, 223, 225, 229, 231, 235, 236, 237, 238, 239, 241, 247, 248, 249, 305, 306, 308, 310, 313, 319, 321, 325, 342, 357, 359, 361, 363, 367, 368, 370, 371, 373, 374, 375, 377, 378, 379, 380, 382, 384, 389, 390, 395, 396, 398, 403, 405, 406, 407, 408, 409, 410, 412, 421, 431, 432, 434, 436, 438, 455, 456, 463, 470, 471, 479, 487], "servic": [2, 27, 28, 29, 38, 39, 46, 48, 49, 51, 52, 55, 122, 125, 197, 198, 199, 201, 213, 221, 225, 231, 236, 237, 239, 241, 246, 463, 470], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 44, 45, 46, 47, 48, 49, 93, 121, 163, 191, 193, 196, 199, 203, 205, 209, 215, 217, 220, 222, 225, 228, 229, 235, 239, 241, 243, 246, 247, 248, 297, 299, 303, 305, 306, 308, 309, 312, 313, 314, 316, 413, 456, 463, 467, 469, 472, 473], "addr": [2, 29, 249, 463], "ip": [2, 29, 209, 211, 221, 463, 469, 487], "port": [2, 23, 29, 38, 44, 48, 193, 196, 200, 203, 209, 211, 214, 221, 233, 235, 246, 463, 469, 487, 489], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 196, 203, 206, 209, 210, 212, 214, 218, 220, 222, 226, 228, 231, 235, 236, 237, 240, 241, 242, 243, 257, 305, 310, 312, 313, 314, 315, 318, 355, 378, 385, 387, 395, 456, 459, 462, 463, 468, 469, 471, 473, 476], "would": [2, 4, 20, 29, 31, 36, 37, 41, 47, 203, 211, 214, 222, 236, 246, 247, 310, 316, 459, 462, 463, 469], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 192, 222, 237, 247, 256, 304, 308, 310, 394, 469], "wcc_result": 2, "wcc": [2, 13, 244, 247, 479, 484], "printto_datafram": [2, 7, 15, 206, 237, 248, 318, 462, 467, 479], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 45, 46, 47, 51, 52, 53, 84, 87, 93, 106, 122, 123, 154, 157, 160, 163, 176, 192, 202, 203, 206, 209, 210, 211, 214, 215, 217, 223, 226, 229, 235, 237, 240, 241, 244, 246, 247, 248, 249, 275, 281, 283, 304, 305, 306, 307, 308, 309, 310, 313, 314, 316, 317, 318, 320, 413, 414, 453, 456, 459, 462, 463, 467, 469, 470, 477, 479, 480, 482, 483, 487, 488, 489], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 206, 209, 215, 237, 238, 241, 247, 248, 356, 366, 373, 379, 383, 395, 403, 412, 444, 449, 462, 463, 467, 469, 479, 483, 484], "tip": [2, 13, 441], "encount": [2, 32, 37, 196, 203, 239, 257], "fail": [2, 37, 93, 100, 170, 192, 203, 210, 217, 220, 241, 321, 456, 469], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 121, 193, 196, 210, 213, 215, 237, 238, 240, 246, 247, 248, 280, 311, 318, 463, 467, 469, 479, 483, 484, 487], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 44, 46, 121, 191, 193, 198, 203, 208, 210, 212, 218, 220, 222, 228, 235, 236, 237, 240, 247, 248, 280, 304, 306, 319, 321, 385, 387, 390, 391, 413, 414, 415, 416, 418, 430, 448, 456, 462, 469, 479, 482, 483, 487], "empti": [2, 19, 29, 41, 100, 170, 192, 200, 202, 220, 222, 235, 247, 249, 338, 362, 365, 395, 396, 434, 450, 456, 459, 469], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 45, 52, 122, 192, 193, 194, 200, 201, 203, 206, 208, 209, 210, 211, 212, 213, 216, 221, 228, 237, 238, 239, 241, 244, 245, 246, 247, 255, 257, 259, 288, 304, 306, 315, 316, 318, 463, 468], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 203, 206, 212, 216, 222, 228, 231, 232, 233, 234, 237, 241, 244, 247, 248, 304, 310, 316, 463, 467, 479, 481, 483, 487, 489], "load_modern_graph": [2, 7, 30, 33, 212, 237, 247, 319], "modern": [2, 6, 7, 33, 44, 45, 48, 51, 191, 192, 193, 198, 200, 201, 209, 211, 212, 217, 222, 225, 237, 238, 239, 465, 469, 470], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 44, 45, 46, 47, 48, 55, 90, 100, 125, 160, 170, 192, 193, 196, 198, 200, 203, 206, 209, 210, 215, 218, 220, 222, 225, 229, 231, 233, 235, 237, 239, 240, 242, 247, 249, 298, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 448, 451, 456, 463, 468, 469, 476, 479, 486], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 47, 48, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192, 196, 202, 206, 211, 215, 217, 218, 222, 224, 225, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 257, 306, 307, 308, 309, 310, 313, 316, 318, 319, 320, 321, 357, 375, 385, 387, 389, 390, 392, 393, 394, 397, 402, 403, 410, 411, 412, 413, 416, 418, 434, 439, 445, 447, 456, 458, 459, 462, 463, 465, 467, 468, 470, 472, 473, 479, 483, 486, 487, 489], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 44, 45, 46, 48, 192, 209, 210, 211, 214, 215, 217, 223, 225, 226, 229, 233, 235, 237, 239, 240, 243, 247, 255, 305, 306, 308, 310, 315, 316, 318, 321, 324, 357, 363, 367, 368, 370, 387, 450, 456, 458, 460, 462, 463, 467, 469, 471, 479, 480, 483, 484, 487], "store": [2, 10, 12, 13, 16, 17, 30, 34, 44, 45, 47, 48, 49, 121, 191, 192, 193, 196, 197, 200, 201, 203, 208, 209, 215, 216, 218, 220, 222, 225, 235, 236, 238, 239, 240, 242, 243, 248, 249, 262, 263, 278, 286, 287, 306, 312, 318, 319, 375, 380, 403, 404, 405, 406, 407, 456, 458, 463, 465, 467, 468, 470, 477, 479, 482], "pod": [2, 27, 28, 29, 30, 38, 41, 48, 192, 203, 206, 209, 231, 235, 463, 469, 477, 480, 482, 483, 489], "elimin": [2, 6, 14, 51, 306], "extran": 2, "resourc": [2, 27, 29, 33, 38, 195, 196, 203, 206, 221, 231, 236, 243, 247, 255, 375, 408, 463, 469, 472, 476, 482], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 44, 47, 49, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 193, 195, 198, 203, 206, 210, 212, 214, 217, 218, 220, 222, 226, 229, 231, 235, 236, 237, 241, 243, 247, 251, 265, 304, 305, 306, 308, 309, 313, 314, 315, 316, 317, 354, 402, 403, 407, 456, 463, 468, 469, 472, 486], "equival": [2, 20, 203, 215, 217, 218, 220, 222, 310, 375, 412, 456], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 42, 45, 47, 194, 196, 198, 200, 203, 214, 215, 217, 218, 220, 221, 222, 226, 235, 236, 238, 241, 243, 246, 310, 314, 321, 354, 355, 362, 365, 385, 387, 392, 403, 404, 405, 406, 407, 415, 451, 454, 455, 456, 457, 458, 461, 467, 468, 473, 476, 479], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 46, 47, 48, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192, 196, 198, 203, 206, 209, 210, 214, 215, 220, 221, 222, 226, 229, 231, 236, 238, 239, 241, 243, 244, 247, 248, 249, 257, 291, 297, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 320, 321, 365, 375, 395, 403, 404, 405, 406, 412, 456, 458, 459, 463, 465, 467, 468, 469, 471, 476, 477], "close": [2, 6, 27, 29, 30, 33, 192, 221, 229, 231, 236, 247, 306, 316, 319, 458, 463, 469, 483], "free": [2, 9, 37, 203, 229, 243, 396, 403, 413, 416, 418, 449, 455, 463], "delet": [2, 9, 27, 29, 30, 33, 48, 52, 53, 54, 90, 91, 121, 122, 123, 124, 160, 161, 191, 192, 203, 276, 315, 463, 465, 469, 482], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 47, 196, 200, 201, 209, 210, 218, 221, 222, 225, 236, 238, 239, 240, 241, 248, 278, 305, 317, 320, 456, 458, 468, 469], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 44, 196, 200, 210, 218, 222, 225, 226, 236, 237, 238, 239, 241, 242, 268, 318, 421, 468, 473], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 203, 206, 210, 224, 226, 229, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 251, 306, 309, 310, 312, 318, 366, 375, 378, 379, 387, 388, 389, 390, 391, 395, 396, 397, 398, 403, 408, 409, 412, 413, 415, 416, 439, 448, 453, 456, 457, 459, 461, 462, 472], "deriv": [3, 12, 34, 237, 240, 246, 248, 318, 321, 465], "grape": [3, 4, 15, 16, 22, 23, 34, 208, 224, 236, 242, 246, 255, 465, 468, 470, 471, 472, 473, 479, 485], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 42, 51, 52, 53, 54, 55, 90, 91, 100, 121, 192, 193, 194, 195, 196, 203, 206, 209, 210, 212, 215, 216, 217, 218, 222, 223, 224, 225, 228, 236, 238, 239, 240, 241, 242, 244, 305, 306, 311, 314, 453, 455, 465, 467, 468, 469, 471, 473, 479, 487], "sigmod": [3, 12, 14, 24, 34, 236, 479, 485], "2017": [3, 12, 14, 34, 236, 413, 414, 479], "further": [3, 6, 10, 14, 20, 27, 30, 34, 196, 206, 211, 215, 218, 220, 222, 237, 238, 248, 306, 318, 319, 334, 465, 468], "enhanc": [3, 4, 9, 192, 196, 217, 220, 237], "introduc": [3, 6, 10, 19, 20, 24, 46, 121, 191, 208, 210, 215, 217, 218, 220, 222, 224, 226, 236, 238, 240, 243, 304, 307, 308, 310, 312, 321, 433, 455, 468, 473], "lot": [3, 13, 37, 206, 222, 224, 473], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 44, 52, 53, 54, 55, 90, 91, 100, 122, 124, 192, 196, 201, 210, 212, 217, 222, 227, 236, 237, 238, 246, 249, 256, 257, 298, 315, 318, 319, 321, 328, 334, 375, 387, 396, 398, 418, 447, 454, 456, 463, 465, 467, 468, 469, 471, 483], "featur": [3, 6, 9, 12, 23, 32, 34, 45, 121, 191, 201, 215, 217, 224, 226, 228, 231, 232, 236, 237, 240, 241, 242, 243, 246, 251, 304, 305, 312, 316, 318, 456, 463, 468, 473, 483, 488], "storag": [3, 9, 30, 42, 48, 58, 61, 128, 131, 196, 203, 210, 211, 215, 217, 218, 222, 235, 238, 241, 243, 283, 306, 467, 469, 470], "languag": [3, 12, 16, 35, 42, 193, 194, 197, 199, 201, 206, 210, 212, 217, 218, 220, 221, 222, 223, 225, 226, 229, 236, 237, 238, 239, 240, 243, 251, 319, 468, 469, 473], "pattern": [3, 6, 12, 23, 30, 44, 196, 210, 211, 214, 217, 218, 220, 225, 229, 236, 239, 243, 247, 309, 314, 469], "better": [3, 8, 12, 20, 24, 29, 34, 209, 210, 222, 224, 241, 243, 463, 469, 473], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 46, 121, 191, 193, 210, 212, 214, 217, 223, 224, 236, 238, 240, 242, 243, 449, 468, 469, 471, 473], "big": [3, 6, 12, 37, 224, 238, 473], "overview": [3, 23, 34, 49, 193, 199, 201, 217, 222, 237, 465], "architectur": [3, 9, 195, 196, 236, 241, 247], "kei": [3, 4, 13, 20, 27, 45, 46, 47, 74, 75, 90, 91, 121, 144, 145, 160, 161, 191, 192, 201, 209, 212, 215, 216, 217, 220, 222, 235, 238, 240, 241, 242, 247, 248, 249, 280, 281, 282, 291, 307, 310, 316, 318, 321, 350, 399, 403, 404, 405, 406, 454, 456, 458, 459, 462, 463, 468, 469, 479, 489], "concept": [3, 238, 241, 304, 305], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 224, 225, 236, 238, 239, 473], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 221, 226, 238, 246, 473], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 193, 203, 206, 209, 212, 215, 223, 225, 226, 228, 229, 230, 231, 232, 237, 241, 242, 245, 247, 312, 319, 462, 463, 465, 467, 483], "tune": [3, 206, 235, 236], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 44, 45, 46, 121, 191, 192, 193, 195, 196, 198, 200, 201, 208, 209, 212, 214, 216, 220, 221, 223, 228, 231, 232, 237, 251, 483], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 49, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 194, 196, 198, 208, 210, 211, 214, 215, 222, 227, 236, 237, 238, 243, 244, 246, 247, 249, 254, 304, 305, 306, 307, 310, 311, 316, 375, 417, 460, 468, 469, 471, 476], "organ": [4, 51, 200, 214, 220, 222, 225, 226, 241, 245, 304, 306, 308, 312, 313, 392, 394, 433], "identifi": [4, 9, 13, 24, 47, 215, 218, 220, 222, 236, 237, 239, 247, 296, 383, 450, 453, 456, 463, 469, 476, 489], "simplic": [4, 9], "suggest": [4, 13, 210, 214, 222, 235, 238, 375], "prebuilt": [4, 41, 211], "docker": [4, 27, 32, 33, 36, 38, 41, 45, 193, 195, 200, 201, 203, 211, 225, 469, 476, 480, 483, 485, 486], "imag": [4, 29, 36, 38, 48, 193, 200, 203, 211, 225, 227, 233, 244, 307, 463, 476], "necessari": [4, 6, 23, 27, 37, 41, 45, 195, 198, 211, 212, 217, 221, 235, 258, 266, 271, 305, 306, 308, 310, 318, 468, 469, 477], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 121, 195, 203, 211, 213, 214, 221, 222, 227, 228, 238, 241, 247, 310, 378, 383, 469, 476, 479], "shm": [4, 32, 41, 211, 227, 233, 481], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 46, 202, 203, 209, 211, 221, 226, 227, 229, 233, 235, 241, 244, 249, 305, 307, 308, 310, 315, 317, 318, 361, 362, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 387, 398, 407, 411, 413, 456, 467, 468, 469, 470, 481], "4096m": [4, 32, 41, 211, 227], "registri": [4, 27, 32, 41, 48, 211, 227, 233, 311, 463, 469, 481], "cn": [4, 23, 27, 29, 31, 32, 41, 48, 211, 227, 233, 235, 311, 469, 480, 481, 489], "hongkong": [4, 27, 32, 41, 48, 211, 227, 233, 469, 481], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 48, 211, 227, 233, 235, 311, 469, 480, 481, 489], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 41, 48, 52, 53, 54, 55, 90, 91, 100, 121, 161, 191, 211, 212, 214, 227, 228, 233, 235, 238, 239, 244, 247, 251, 311, 314, 321, 408, 417, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436, 441, 463, 468, 469, 479, 480, 481, 482, 489], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 48, 193, 195, 211, 214, 227, 228, 468, 469, 481, 486], "altern": [4, 45, 47, 215, 384, 403, 407, 456, 468, 469], "manual": [4, 9, 27, 30, 33, 121, 203, 236, 243, 318, 469], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 47, 48, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 193, 195, 196, 198, 200, 203, 209, 210, 212, 215, 217, 218, 220, 221, 222, 227, 229, 231, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 249, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 325, 326, 328, 329, 333, 335, 350, 351, 355, 356, 359, 361, 362, 366, 375, 384, 393, 399, 413, 414, 416, 418, 442, 450, 451, 454, 456, 463, 467, 468, 469, 472, 477], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 44, 45, 48, 121, 191, 193, 195, 196, 203, 211, 214, 218, 229, 231, 235, 237, 304, 305, 306, 308, 309, 310, 311, 314, 316, 467, 469, 473, 476, 483], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 45, 193, 203, 206, 208, 212, 216, 225, 231, 237, 238, 245, 247, 251, 311, 315, 321, 463, 468, 469, 470, 477, 482], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 44, 100, 170, 192, 198, 206, 214, 218, 220, 226, 238, 239, 241, 247, 248, 249, 259, 304, 305, 306, 307, 314, 315, 316, 321, 418, 429, 448, 456, 460, 462, 463, 465, 468, 469, 470, 476, 477, 479], "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 48, 121, 211, 214, 251, 311, 469, 481], "repositori": [4, 29, 36, 37, 48, 121, 209, 214, 251, 463, 469], "enter": [4, 122, 123, 124, 125, 160, 161, 170, 210, 221], "analytical_engin": [4, 15, 17, 31, 36, 251, 479], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 44, 45, 48, 192, 198, 203, 214, 221, 225, 246, 250, 252, 304, 315, 318, 463, 467, 476, 477, 480, 482, 483], "git": [4, 17, 22, 29, 30, 31, 32, 35, 37, 48, 121, 211, 214, 251, 314, 468, 481], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 44, 48, 49, 121, 191, 203, 211, 212, 213, 214, 216, 221, 228, 231, 232, 237, 238, 239, 247, 251, 311, 314, 321, 375, 379, 380, 381, 395, 398, 405, 406, 408, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 440, 441, 442, 443, 448, 463, 468, 469, 479, 480, 481, 482, 483, 486, 487, 489], "github": [4, 22, 29, 30, 31, 32, 35, 48, 121, 211, 214, 238, 239, 247, 251, 311, 314, 406, 463, 468, 479, 481, 489], "alibaba": [4, 17, 22, 23, 29, 31, 32, 48, 52, 53, 54, 55, 90, 91, 100, 121, 211, 225, 236, 238, 241, 242, 251, 311, 314, 479, 481, 489], "cd": [4, 17, 22, 29, 31, 32, 35, 48, 121, 195, 211, 213, 221, 251, 311, 314, 316, 469, 476, 477, 479, 481, 487], "sinc": [4, 6, 23, 24, 29, 30, 37, 44, 47, 193, 196, 210, 214, 220, 222, 227, 231, 235, 236, 244, 257, 306, 310, 318, 354, 355, 385, 387, 434, 451, 458, 462, 467, 468, 469, 476], "inherit": [4, 6, 9, 16, 210, 238, 246, 304, 314], "libgrap": [4, 16, 31, 34, 238, 251], "lite": [4, 16, 31, 34, 238, 251], "note": [4, 13, 14, 20, 27, 29, 37, 38, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 198, 210, 214, 215, 217, 222, 226, 231, 232, 235, 237, 238, 239, 247, 248, 249, 257, 296, 298, 306, 310, 318, 321, 330, 331, 334, 338, 351, 352, 353, 354, 355, 356, 362, 363, 368, 371, 373, 375, 376, 377, 378, 380, 382, 384, 385, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 433, 448, 449, 450, 451, 453, 456, 458, 459, 462, 463, 467, 469, 476, 483, 489], "core": [4, 6, 12, 34, 37, 203, 210, 212, 236, 237, 238, 247, 251, 316, 321, 463, 483], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 44, 46, 47, 49, 196, 206, 210, 217, 221, 222, 232, 237, 238, 239, 240, 241, 247, 305, 306, 307, 318, 366, 385, 433, 448, 450, 456, 457, 467, 468, 469, 472], "partition": [4, 202, 314], "worker": [4, 9, 13, 14, 23, 28, 34, 44, 211, 229, 231, 233, 306, 309, 316, 463, 467], "between": [4, 6, 9, 10, 12, 13, 18, 19, 47, 192, 203, 208, 210, 217, 222, 223, 226, 239, 241, 246, 247, 305, 306, 308, 310, 316, 321, 378, 379, 380, 383, 389, 395, 396, 398, 402, 403, 404, 405, 407, 410, 412, 413, 414, 416, 421, 451, 453, 456, 468, 469, 476], "heavili": 4, "reus": [4, 30, 198, 217, 226, 229, 238, 247, 316, 318, 463, 465], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 48, 198, 218, 222, 228, 235, 242, 251, 257, 303, 314, 318, 365, 399, 456, 462, 463, 465, 467, 469, 476], "fulli": [4, 196, 226, 229, 240, 247, 257, 398, 468, 479], "recommend": [4, 27, 30, 36, 37, 203, 209, 212, 214, 222, 226, 235, 236, 237, 241, 310], "locat": [4, 23, 27, 36, 38, 45, 46, 47, 192, 193, 195, 209, 211, 215, 222, 227, 235, 240, 250, 252, 306, 307, 318, 469, 470, 476], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 41, 44, 45, 47, 48, 192, 203, 206, 209, 210, 212, 214, 217, 222, 223, 225, 227, 235, 236, 237, 241, 242, 243, 245, 246, 247, 305, 310, 314, 316, 318, 375, 385, 387, 395, 456, 462, 463, 465, 467, 468, 469, 470, 489], "therebi": [4, 196, 218], "fledg": [4, 12, 236], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 208, 212, 231, 246, 318, 368, 463, 469, 476, 477, 480, 481, 483], "while": [4, 6, 12, 19, 20, 29, 34, 46, 47, 193, 196, 198, 206, 209, 213, 215, 217, 218, 220, 221, 222, 226, 236, 238, 239, 240, 242, 243, 305, 310, 316, 352, 353, 413, 416, 418, 450, 456, 465, 468, 469, 477], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 44, 45, 46, 47, 48, 51, 90, 91, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 193, 194, 196, 198, 200, 203, 209, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 226, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 247, 257, 273, 274, 291, 304, 306, 308, 310, 313, 315, 317, 318, 321, 357, 368, 375, 378, 380, 383, 387, 390, 392, 393, 394, 410, 418, 419, 420, 443, 446, 448, 456, 462, 463, 465, 467, 468, 469, 470, 487, 488], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 44, 45, 46, 47, 48, 196, 206, 209, 210, 215, 217, 218, 220, 222, 225, 226, 228, 229, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 251, 255, 304, 305, 306, 308, 309, 310, 311, 318, 319, 321, 340, 341, 350, 376, 377, 402, 403, 407, 415, 428, 449, 450, 456, 462, 463, 467, 468, 469, 470, 473], "ship": [4, 476], "6": [4, 10, 17, 18, 22, 31, 191, 192, 206, 212, 220, 221, 222, 237, 244, 247, 305, 310, 316, 321, 340, 359, 388, 389, 390, 407, 421, 423, 429, 430, 433, 436, 440, 441, 449, 451, 456, 469, 471, 479, 482, 483, 487], "graphalyt": [4, 243], "benchmark": [4, 34, 196, 218, 222, 225, 239, 241, 243, 375], "flatten": [4, 13, 233], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 203, 206, 222, 231, 241, 247, 309, 351, 359, 456, 468], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 44, 45, 47, 121, 191, 193, 194, 196, 198, 206, 209, 210, 211, 212, 216, 217, 220, 222, 225, 237, 238, 240, 241, 246, 247, 248, 275, 310, 314, 318, 319, 321, 416, 460, 463, 465, 469, 471, 476, 477, 479, 483, 487], "written": [4, 12, 20, 47, 222, 236, 238, 240, 434, 465, 468, 471, 479], "giraph": [4, 7, 8, 12, 17, 23, 24, 224, 243, 473], "graphx": [4, 7, 8, 12, 17, 24, 224, 243, 473], "app": [4, 15, 16, 17, 18, 33, 248, 249, 251, 256, 259, 282, 288, 291, 305, 318, 461, 462, 468, 479], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 87, 106, 121, 157, 176, 193, 196, 210, 211, 236, 246, 247, 251, 469], "serv": [4, 27, 42, 192, 203, 214, 217, 225, 237, 238, 241, 306, 469, 476], "layer": [4, 6, 209, 210, 226, 229, 238, 241, 243, 304, 305, 308, 312, 316, 488], "cuda": [4, 244], "suit": [4, 36, 206, 211, 226, 241, 476], "gpu": [4, 238, 311], "acceler": [4, 27, 468], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 202, 210, 239, 241, 249, 281, 318, 319, 465, 470, 473, 479], "extend": [4, 9, 17, 23, 196, 217, 218, 220, 221, 222, 243, 248, 305, 313, 314, 402, 468, 479], "loader": [4, 22, 211, 234, 246, 257, 268, 461, 470, 484, 485], "mutabl": [4, 238], "io": [4, 27, 30, 33, 41, 238, 239, 247, 315, 318, 406, 463, 469, 472, 486], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 206, 225, 233, 236, 238, 240, 246, 249, 306, 385, 387, 424, 456, 459, 469, 479], "sub": [4, 12, 14, 18, 222, 225, 235, 248, 308, 310, 468, 473], "helper": [4, 476], "thread": [4, 6, 31, 44, 209, 211, 226, 244, 317], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 192, 193, 200, 203, 210, 222, 229, 241, 246, 249, 317, 468, 479], "buffer": [4, 315], "sync": [4, 249, 315, 468], "serial": [4, 220, 221, 246, 318, 463, 468, 487], "vertex_map": [4, 13, 45, 46, 171, 187, 192, 297, 318, 463], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 45, 192, 193, 209, 210, 212, 215, 218, 220, 221, 226, 235, 236, 239, 241, 247, 304, 305, 306, 312, 314, 316, 317, 318, 319, 366, 375, 385, 387, 390, 409, 450, 455, 456, 467, 468, 469, 470, 476], "map": [4, 6, 13, 45, 74, 75, 93, 103, 144, 145, 192, 193, 200, 215, 218, 220, 222, 239, 246, 305, 314, 318, 448, 463, 469, 470, 484, 487], "intern": [4, 13, 45, 52, 54, 55, 90, 91, 100, 122, 124, 125, 160, 161, 170, 192, 193, 218, 239, 318, 356, 479, 481], "frame": [4, 241], "wrap": [4, 235, 238, 246, 251], "becaus": [4, 37, 210, 214, 218, 222, 241, 304, 307, 321, 451, 468, 469], "reli": [4, 9, 19, 195, 214, 216, 311, 468], "templat": [4, 9, 15, 28, 48, 202, 233, 246, 468], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 39, 203, 206, 210, 214, 220, 222, 226, 229, 230, 231, 241, 310, 314, 317, 384, 407, 450, 456, 468, 470, 471], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 42, 46, 47, 196, 198, 209, 210, 215, 217, 220, 225, 226, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 305, 306, 310, 321, 418, 456, 462, 467, 468, 471, 477], "label": [4, 6, 7, 13, 15, 20, 33, 51, 52, 77, 90, 91, 116, 118, 122, 147, 160, 161, 186, 188, 192, 202, 209, 214, 215, 217, 218, 228, 232, 233, 234, 236, 237, 239, 241, 246, 247, 248, 249, 257, 304, 307, 310, 316, 318, 321, 356, 360, 367, 371, 372, 374, 384, 385, 387, 388, 389, 390, 391, 433, 434, 456, 458, 459, 462, 463, 467, 469, 470, 483, 484, 487, 488], "cannot": [4, 27, 30, 192, 203, 217, 220, 222, 226, 241, 243, 246, 247, 251, 306, 318, 375, 414, 415, 462, 463, 469, 471, 482], "determin": [4, 37, 44, 210, 220, 222, 226, 229, 235, 239, 240, 246, 247, 306, 310, 401, 404, 405, 406, 463], "reason": [4, 52, 53, 54, 55, 90, 91, 100, 203, 218, 220, 226, 305, 306, 436], "jit": 4, "technologi": [4, 208, 210, 242], "compil": [4, 15, 31, 32, 34, 44, 49, 121, 193, 196, 200, 201, 203, 209, 210, 211, 215, 221, 236, 247, 259, 468, 469, 471, 477], "associ": [4, 6, 9, 29, 44, 45, 47, 198, 215, 220, 241, 390, 402, 448, 450, 456, 463, 468, 469], "runtim": [4, 6, 17, 23, 31, 49, 51, 192, 193, 210, 236, 238, 239, 240, 246, 247, 251, 468, 481, 482], "wrapper": [4, 213, 221, 223, 225, 240, 246, 259, 265, 318, 319, 468], "facilit": [4, 20, 211, 220, 225, 226, 229, 241, 305, 468, 469], "task": [4, 6, 7, 14, 34, 37, 41, 210, 212, 222, 225, 226, 228, 230, 231, 232, 233, 234, 236, 238, 239, 241, 305, 316, 468], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 42, 49, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 201, 206, 208, 216, 225, 236, 242, 245, 251, 257, 304, 306, 308, 309, 310, 314, 320, 456, 463, 467, 468, 469, 470, 479, 490], "jar": [4, 8, 22, 23, 35, 39, 121, 247, 469, 479], "read": [4, 8, 20, 24, 37, 46, 196, 206, 213, 215, 219, 230, 235, 236, 237, 238, 304, 305, 310, 315, 316, 318, 354, 355, 454, 456, 457, 461, 463, 465, 469, 487], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 48, 196, 209, 211, 212, 222, 227, 228, 236, 241, 242, 246, 247, 310, 314, 315, 462, 463, 467, 472, 479], "cmake": [4, 31, 32, 36, 203, 311], "script": [4, 32, 37, 243, 244, 275, 304, 305, 316, 319, 480], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 45, 47, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 192, 193, 195, 196, 198, 200, 201, 203, 211, 220, 221, 222, 231, 235, 236, 246, 247, 258, 259, 265, 266, 271, 296, 315, 316, 318, 375, 385, 387, 463, 465, 470, 476], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 210, 214, 222, 226, 229, 237, 239, 240, 241, 306, 308, 439, 465], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 45, 198, 206, 209, 212, 218, 220, 222, 224, 228, 235, 239, 240, 304, 305, 306, 310, 314, 359, 375, 395, 418, 452, 462, 469, 471, 473, 477], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 47, 195, 210, 214, 217, 218, 225, 226, 235, 237, 238, 239, 240, 241, 245, 310, 318, 326, 359, 407, 456, 465, 469, 472, 473, 477], "thei": [4, 6, 20, 24, 27, 30, 31, 206, 210, 214, 217, 222, 225, 231, 236, 239, 241, 243, 304, 305, 313, 318, 362, 370, 375, 403, 405, 406, 449, 450, 456, 462, 463, 465, 468, 469], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 47, 192, 206, 209, 210, 212, 217, 220, 225, 229, 235, 236, 237, 238, 239, 240, 241, 246, 248, 308, 310, 318, 455, 456, 462, 471], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 209, 210, 218, 229, 236, 239, 241, 247, 309, 314, 373, 378, 379, 380, 383, 414, 473], "object": [4, 15, 38, 72, 78, 90, 91, 93, 97, 103, 112, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 211, 212, 213, 215, 220, 221, 222, 226, 229, 235, 236, 237, 239, 241, 244, 246, 258, 271, 283, 297, 305, 307, 308, 309, 310, 313, 316, 319, 320, 334, 354, 355, 413, 453, 456, 458, 459, 461, 462, 469, 479, 489], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 47, 218, 220, 221, 222, 229, 241, 244, 249, 308, 309, 310, 313, 314, 459, 472, 487], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 49, 203, 210, 214, 236, 246, 314, 317, 463, 465], "state": [4, 6, 9, 10, 12, 24, 27, 34, 210, 225, 239, 240, 242, 244, 315, 318, 375, 378, 379, 380, 381, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 410, 411, 412, 416, 448, 451, 453], "synchron": [4, 6, 10, 12, 14, 15, 236, 468], "explicitli": [4, 13, 246, 306, 375, 463, 469], "implicitli": [4, 257], "main": [4, 6, 30, 34, 37, 42, 45, 52, 53, 54, 55, 90, 91, 100, 121, 196, 210, 217, 218, 221, 222, 243, 304, 313, 316, 321, 463, 469, 488, 489], "logic": [4, 6, 9, 14, 16, 17, 210, 220, 222, 225, 238, 240, 244, 307, 467, 468, 469, 477, 479], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 48, 51, 194, 196, 203, 209, 211, 214, 220, 221, 222, 226, 229, 235, 236, 238, 239, 240, 241, 305, 306, 307, 308, 309, 310, 315, 316, 318, 456, 459, 463, 465, 467, 468, 469, 470, 477, 489], "send": [4, 6, 10, 18, 24, 192, 211, 239, 249, 468, 479], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 192, 235, 236, 239, 241, 249, 310, 314, 465, 468, 479], "messagemanag": [4, 17, 479], "call": [4, 6, 12, 13, 16, 17, 19, 24, 51, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 196, 198, 203, 218, 220, 222, 229, 246, 249, 304, 306, 310, 313, 314, 319, 351, 365, 366, 396, 407, 436, 448, 456, 459, 463, 468, 469], "encourag": [4, 6, 15, 24, 37], "fork": 4, "repo": [4, 29, 37, 211, 238, 469, 480, 481], "much": [4, 6, 13, 19, 22, 193, 203, 210, 220, 222, 306, 310, 468], "easier": [4, 32, 36, 37, 42, 220, 238, 239, 240, 310, 463], "begin": [4, 15, 16, 30, 45, 202, 206, 214, 215, 219, 222, 237, 248, 249, 395, 462, 468], "small": [4, 9, 11, 13, 20, 196, 206, 222, 239, 240, 243, 321, 376, 377, 403, 446, 457, 463, 469], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 44, 193, 222, 236, 240, 241, 243, 244, 247, 264, 296, 305, 318, 321, 334, 456, 463, 469], "revis": [4, 14, 17, 244], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 215, 225, 226, 241, 243, 244, 255, 256, 306, 318, 323, 324, 334, 392, 393, 394, 396, 450, 456, 465, 487, 489], "gradual": 4, "avoid": [4, 13, 218, 221, 468, 469], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 47, 196, 203, 206, 209, 210, 212, 216, 221, 222, 223, 225, 226, 229, 230, 231, 236, 237, 238, 242, 243, 247, 291, 305, 306, 308, 310, 312, 316, 317, 330, 354, 355, 375, 410, 468, 479], "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 47, 192, 195, 198, 203, 209, 215, 218, 220, 222, 227, 228, 230, 231, 236, 237, 239, 240, 247, 248, 304, 318, 329, 336, 358, 362, 367, 377, 382, 399, 405, 450, 452, 456, 463, 467, 471], "commit": [4, 244, 465], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 203, 211, 212, 227, 228, 233, 237, 479, 480, 481, 482], "gsctl": [4, 32, 36, 41, 208, 211, 227, 480, 481], "py": [4, 15, 32, 36, 41, 122, 123, 124, 125, 160, 161, 170, 191, 211, 227, 233, 304, 311, 316, 463, 469, 476, 479, 480, 481, 488], "cmakelist": 4, "txt": [4, 31, 35, 479], "artifact": [4, 17, 23, 29, 36, 48, 211, 227, 476], "grape_engin": [4, 38, 281, 477], "togeth": [4, 9, 10, 20, 41, 210, 222, 231, 236, 244, 310, 314, 357], "share": [4, 6, 30, 31, 37, 44, 47, 48, 222, 227, 236, 238, 239, 468, 470, 481], "bunch": [4, 41, 243, 246], "binari": [4, 15, 27, 31, 241, 476], "choos": [4, 6, 12, 22, 34, 41, 47, 209, 210, 220, 222, 225, 226, 236, 241, 304, 305, 395, 396, 434], "prefix": [4, 31, 36, 37, 194, 203, 211, 220, 227, 233, 318, 450, 468, 487], "usr": [4, 469], "look": [4, 15, 18, 20, 27, 44, 45, 121, 192, 209, 222, 235, 251, 317, 462, 465, 469, 470], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 44, 45, 47, 48, 51, 192, 193, 195, 196, 198, 200, 201, 203, 208, 209, 211, 214, 235, 246, 247, 255, 278, 304, 305, 311, 316, 318, 354, 355, 406, 456, 458, 463, 465, 469, 470, 476, 477, 479, 489], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 44, 45, 46, 48, 192, 193, 195, 196, 198, 210, 215, 218, 237, 243, 463], "correct": [4, 6, 14, 37, 38, 210, 214, 310, 318, 321, 468], "unit": [4, 210, 222, 240, 314, 404, 405, 406, 469], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 198, 203, 209, 212, 222, 225, 236, 237, 238, 240, 241, 243, 310, 312, 468], "graphscope_hom": [4, 23, 481], "pwd": [4, 30, 195, 316], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 48, 195, 200, 212, 213, 216, 221, 227, 228, 235, 244, 311, 316, 481], "tmp": [4, 18, 19, 28, 38, 48, 209, 211, 278, 283, 316, 318, 463, 467, 469, 477, 479, 482], "gstest": [4, 19, 22, 23, 30, 479, 481], "against": [4, 14, 37, 211, 247, 438], "compar": [4, 19, 210, 215, 217, 218, 220, 222, 239, 244, 246, 247, 307, 375, 462], "ground": [4, 217, 241], "truth": [4, 241], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 196, 203, 208, 209, 210, 212, 216, 218, 220, 223, 225, 226, 229, 230, 231, 233, 234, 236, 238, 239, 241, 242, 243, 247, 251, 304, 307, 309, 313, 315, 316, 320, 375, 378, 385, 387, 396, 403, 404, 405, 406, 407, 415, 469, 470], "broad": [6, 238], "spectrum": [6, 238, 321, 448], "central": [6, 15, 42, 206, 225, 226, 237, 238, 241, 242, 247, 310, 321, 433, 468], "match": [6, 15, 44, 51, 121, 191, 192, 196, 210, 211, 212, 213, 214, 215, 217, 236, 237, 238, 247, 355, 375, 383, 385, 387, 414, 450, 487], "mine": [6, 15, 236, 238, 239], "philosophi": [6, 24, 238], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 193, 194, 196, 201, 209, 210, 211, 212, 213, 218, 221, 223, 225, 226, 233, 234, 235, 236, 237, 238, 240, 249, 304, 305, 306, 308, 310, 313, 316, 375, 383, 395, 448, 469, 477, 489], "stronger": [6, 238], "flexibl": [6, 12, 13, 23, 44, 47, 216, 217, 222, 225, 236, 237, 238, 463, 467], "flow": [6, 194, 238, 239, 304, 446], "oper": [6, 9, 12, 15, 30, 31, 36, 44, 52, 53, 54, 55, 122, 123, 124, 125, 195, 196, 198, 200, 203, 206, 208, 209, 210, 212, 216, 217, 218, 220, 225, 226, 229, 235, 236, 238, 239, 240, 241, 242, 247, 249, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 276, 277, 278, 280, 281, 284, 285, 286, 287, 305, 306, 307, 308, 309, 310, 312, 313, 315, 317, 318, 338, 417, 418, 456, 459, 461, 463, 465, 468, 469, 476], "arbitrari": [6, 220, 222, 238, 308, 383, 387, 403, 404, 405, 406, 456, 459, 469, 487], "beyond": [6, 24, 217, 238, 242, 416], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 42, 45, 51, 100, 170, 193, 196, 198, 208, 209, 210, 211, 213, 214, 215, 217, 220, 221, 222, 225, 227, 235, 238, 239, 240, 241, 244, 310, 311, 314, 316, 318, 334, 386, 450, 456, 463, 467, 468, 469, 476, 480, 481], "divers": [6, 10, 12, 34, 47, 208, 210, 238, 239, 305, 465], "easi": [6, 7, 12, 196, 198, 206, 209, 210, 212, 213, 221, 222, 223, 225, 228, 229, 235, 236, 237, 238, 242, 305, 310, 314, 476], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 196, 203, 206, 215, 218, 220, 222, 225, 235, 236, 237, 238, 239, 240, 245, 249, 251, 304, 310, 314, 318, 319, 458, 459, 465, 468, 473, 479, 483], "few": [6, 29, 196, 203, 209, 238, 468], "satisfactori": [6, 238, 241], "major": [6, 12, 13, 14, 215, 239, 246], "recent": [6, 308, 469], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 203, 210, 217, 223, 226, 229, 235, 236, 238, 239, 240, 241, 242, 243, 247, 248, 297, 308, 310, 312, 314, 318, 319, 460, 463, 465, 467, 479, 484, 489], "focu": [6, 41, 236, 240, 243, 314], "hand": [6, 30, 33, 210, 218, 220, 436], "point": [6, 13, 14, 22, 37, 42, 192, 210, 220, 229, 239, 304, 359, 384, 413, 416, 456, 467, 469, 470, 471, 476], "breadth": [6, 247, 321], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 45, 46, 48, 121, 191, 193, 203, 206, 210, 211, 212, 213, 215, 220, 221, 222, 226, 230, 231, 235, 237, 238, 240, 241, 247, 248, 304, 305, 310, 312, 314, 318, 321, 325, 355, 371, 374, 383, 396, 399, 410, 411, 412, 413, 414, 417, 450, 455, 456, 459, 462, 463, 465, 468, 469, 470, 471], "search": [6, 37, 208, 214, 226, 236, 239, 241, 243, 247, 321, 485], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 206, 236, 239, 242, 244, 247, 248, 321, 459, 462, 467, 479], "shortest": [6, 7, 19, 24, 210, 237, 239, 247, 321, 471], "leav": [6, 222, 318, 356, 366], "varieti": [6, 12, 34, 206, 236, 243], "suffer": [6, 206], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 47, 51, 192, 196, 198, 203, 206, 208, 214, 217, 218, 221, 222, 225, 226, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 251, 308, 310, 312, 389, 410, 467, 468, 470, 472], "limit": [6, 9, 13, 22, 47, 201, 203, 209, 213, 214, 215, 218, 223, 226, 239, 240, 241, 243, 244, 463, 482, 487], "phase": [6, 16, 23, 24, 305, 310], "propag": [6, 7, 9, 14, 36, 236, 237, 239, 241, 247, 310, 328, 418], "short": [6, 238, 243, 244, 336, 468, 469], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 220, 222, 241, 315, 375, 398, 469, 487], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 44, 54, 90, 91, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 220, 225, 226, 236, 239, 241, 243, 311, 314, 456, 465, 469, 479, 480], "Such": [6, 13, 194, 240, 243, 278, 283, 415, 424], "abstract": [6, 42, 206, 225, 229, 232, 236, 237, 238, 304, 305, 312, 314, 315, 470], "bring": [6, 41], "product": [6, 12, 32, 203, 229, 236, 240, 243, 249, 305, 306, 310, 476, 487], "sacrific": 6, "almost": [6, 22, 222, 391, 468], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 47, 48, 203, 222, 233, 235, 237, 238, 243, 246, 248, 308, 310, 314, 315, 453, 462, 467, 469, 471, 472, 480, 482, 486], "At": [6, 12, 14, 15, 20, 34, 37, 121, 210, 221, 222, 305, 315, 469, 471], "advanc": [6, 7, 15, 210, 228, 229, 238, 402], "pose": 6, "challeng": [6, 9, 205, 236, 468], "repres": [6, 9, 12, 15, 44, 46, 47, 206, 210, 214, 218, 222, 226, 228, 229, 232, 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 255, 282, 305, 306, 307, 308, 310, 314, 316, 318, 362, 395, 403, 404, 405, 406, 407, 415, 422, 425, 429, 437, 446, 448, 450, 451, 456, 460, 463, 468, 469], "non": [6, 9, 27, 192, 220, 243, 246, 249, 307, 345, 346, 366, 385, 387, 390, 414, 418, 425, 443, 456, 457], "ones": [6, 9, 242, 247, 312], "distil": 6, "critic": [6, 13, 226, 247], "context": [6, 15, 17, 18, 20, 27, 31, 47, 122, 123, 124, 125, 160, 161, 170, 218, 238, 240, 247, 249, 254, 255, 256, 262, 263, 278, 283, 286, 287, 289, 298, 301, 314, 318, 321, 446, 461, 463, 468, 476, 479], "fall": 6, "meet": [6, 15, 18, 37, 206, 210, 212, 229, 236, 241, 308, 309, 375, 404, 405, 406, 471, 473], "therefor": [6, 12, 15, 206, 210, 212, 214, 215, 218, 220, 222, 226, 237, 304, 305, 310, 402, 468, 477], "fulfil": [6, 15, 18, 196, 238], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 44, 45, 46, 48, 193, 203, 206, 218, 220, 222, 223, 228, 235, 239, 241, 242, 305, 306, 321, 456, 465, 468, 476, 477], "must": [6, 13, 24, 27, 30, 37, 45, 46, 47, 51, 62, 132, 198, 200, 203, 209, 220, 222, 236, 246, 248, 257, 305, 306, 308, 309, 310, 318, 320, 321, 334, 373, 375, 383, 386, 396, 398, 400, 403, 405, 407, 415, 418, 454, 456, 458, 462, 468, 469], "race": 6, "schedul": [6, 23, 36, 236, 238, 463], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 44, 45, 52, 122, 203, 209, 210, 211, 214, 215, 218, 222, 235, 246, 247, 248, 265, 281, 306, 318, 375, 387, 399, 403, 413, 416, 434, 450, 456, 459, 462, 463, 467, 468, 469, 473, 476], "so": [6, 12, 13, 30, 37, 41, 47, 195, 203, 209, 210, 212, 216, 221, 222, 226, 229, 231, 235, 236, 238, 247, 251, 304, 310, 312, 331, 366, 371, 384, 385, 386, 389, 404, 405, 406, 417, 450, 456, 468, 469, 483], "middlewar": 6, "flashwar": 6, "hide": [6, 206], "automat": [6, 9, 12, 14, 34, 44, 46, 196, 198, 209, 210, 213, 218, 221, 225, 235, 236, 239, 240, 241, 243, 248, 316, 318, 456, 469, 471, 472, 489], "adapt": [6, 22, 44, 196, 210, 241, 243, 244, 471, 472], "70": [6, 15, 487], "40": [6, 15, 244, 306, 307, 309, 383, 449], "commonli": [6, 215, 220, 225, 229, 235], "now": [6, 7, 20, 23, 27, 45, 48, 192, 196, 209, 211, 214, 215, 217, 221, 222, 228, 247, 314, 387, 469, 471, 484], "succinct": [6, 218], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 42, 192, 203, 206, 208, 210, 222, 223, 224, 226, 229, 236, 239, 240, 241, 242, 243, 246, 251, 306, 307, 308, 310, 311, 312, 313, 456, 463, 473], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 193, 200, 214, 220, 222, 233, 235, 239, 240, 314, 318, 468, 470, 476, 480], "demonstr": [6, 16, 44, 209, 210, 217, 225, 230, 232, 236, 237, 239, 241, 243, 248, 304, 316, 318, 463, 468], "up": [6, 13, 20, 23, 37, 193, 214, 220, 222, 225, 227, 229, 242, 249, 314, 317, 355, 359, 383, 450, 468, 469, 486], "92": [6, 321], "bulk": [6, 15, 52, 122, 192], "bsp": [6, 15], "paradigm": [6, 15, 225, 229, 236, 304, 310], "primari": [6, 15, 45, 46, 47, 74, 75, 90, 91, 121, 144, 145, 160, 161, 191, 196, 201, 218, 236, 243, 469], "constitut": [6, 232, 235], "superstep": [6, 16, 17, 24, 249], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 46, 47, 51, 192, 196, 198, 209, 222, 235, 238, 239, 240, 244, 255, 305, 307, 310, 318, 362, 365, 375, 378, 379, 380, 381, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 410, 411, 412, 416, 446, 448, 451, 453, 458, 468], "maintain": [6, 10, 14, 35, 36, 46, 217, 218, 220, 236, 239, 240, 469], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 47, 51, 198, 210, 211, 226, 247, 249, 306, 307, 310, 316, 318, 319, 321, 351, 456, 463, 469, 476], "describ": [6, 27, 36, 37, 38, 47, 48, 198, 203, 209, 211, 222, 226, 227, 236, 240, 241, 248, 305, 308, 310, 315, 316, 355, 359, 375, 376, 377, 380, 385, 387, 388, 413, 414, 427, 434, 436, 450, 452, 453, 464, 467, 468, 469, 477, 482], "vsize": [6, 15], "size_t": [6, 13, 202, 246, 249, 315, 465, 468], "vertexmap": [6, 13, 15, 101, 121, 171, 191, 202], "condit": [6, 9, 14, 24, 27, 38, 44, 210, 217, 222, 229, 238, 240, 244, 375, 404, 405, 406, 414, 415, 468], "f": [6, 20, 33, 48, 209, 211, 228, 233, 234, 237, 310, 321, 408, 409, 455, 469, 477, 483], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 206, 209, 211, 214, 217, 218, 220, 222, 226, 228, 229, 232, 236, 237, 241, 244, 246, 275, 283, 291, 304, 310, 312, 316, 318, 319, 403, 405, 407, 448, 460, 462, 469, 479, 480, 483, 488], "form": [6, 20, 210, 216, 218, 220, 222, 226, 229, 240, 241, 247, 304, 306, 307, 310, 357, 377, 407, 422, 424, 427, 430, 434, 456, 462], "special": [6, 20, 196, 201, 217, 222, 236, 305, 424, 440, 450, 473], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 209, 210, 212, 222, 228, 237, 247, 248, 321, 331, 362, 366, 368, 379, 385, 387, 389, 391, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 435, 444, 448, 449, 453, 456, 479], "omit": [6, 198, 235, 248, 329, 470, 489], "filter": [6, 15, 23, 44, 210, 217, 223, 235, 240, 247, 248, 448, 462, 468, 487], "semant": [6, 210, 229, 309, 468], "unchang": 6, "edgemap": [6, 15, 101, 121, 171, 191], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 45, 47, 75, 77, 145, 147, 196, 201, 202, 203, 209, 211, 212, 214, 215, 222, 226, 227, 229, 235, 237, 239, 240, 241, 243, 246, 247, 248, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 301, 303, 306, 307, 308, 309, 310, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 460, 462, 463, 465, 467, 468, 469, 471, 476, 479, 480, 481, 487, 489], "satisfi": [6, 9, 24, 32, 196, 212, 222, 240, 243, 247, 251, 315, 321, 373, 403, 407, 414, 415, 473], "h": [6, 9, 15, 16, 20, 36, 41, 192, 200, 226, 227, 244, 255, 321, 332, 335, 356, 383, 387, 403, 448, 455, 456, 468, 480, 485], "conduct": [6, 15, 222, 244, 310], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 42, 44, 45, 47, 121, 191, 193, 196, 206, 209, 210, 214, 215, 217, 218, 220, 222, 223, 224, 225, 229, 235, 236, 237, 239, 240, 241, 242, 243, 305, 310, 380, 385, 387, 390, 395, 398, 403, 448, 456, 465, 468, 473, 476], "dynam": [6, 12, 34, 193, 194, 196, 210, 225, 236, 238, 239, 241, 247, 258, 271, 376, 377, 459, 465, 469], "even": [6, 8, 20, 210, 214, 222, 238, 239, 312, 318, 321, 385, 395, 413, 415, 416, 456, 468], "virtual": [6, 9, 23, 47, 212, 214, 237, 246, 314, 315], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 47, 121, 193, 198, 206, 208, 210, 216, 218, 220, 222, 226, 229, 235, 236, 237, 238, 239, 241, 247, 256, 304, 305, 306, 310, 316, 318, 320, 321, 456, 457, 461, 463, 465, 467, 468, 469, 470, 471, 477], "index": [6, 12, 13, 31, 45, 46, 76, 146, 192, 202, 208, 226, 229, 235, 241, 246, 247, 248, 306, 307, 315, 318, 320, 321, 330, 354, 355, 385, 387, 388, 389, 391, 468, 485, 489], "pre": [6, 29, 32, 51, 203, 210, 217, 222, 228, 232, 237, 240, 463, 482], "conveni": [6, 29, 203, 209, 214, 222, 226, 238, 310, 454, 456], "revers": [6, 20, 215, 222, 264, 267, 320, 321, 399, 407, 456], "exchang": [6, 14], "chosen": [6, 385, 392, 393, 394, 395, 396, 407, 411, 451], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 236, 354, 355, 391, 468, 473, 479], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 193, 203, 209, 239, 311, 314, 463, 469, 481], "mode": [6, 15, 27, 32, 36, 48, 203, 221, 230, 233, 235, 246, 247, 248, 297, 304, 308, 314, 316, 318, 458, 463, 469, 473, 477, 489], "push": [6, 12, 34, 37, 44, 210, 217, 239, 314], "anoth": [6, 9, 10, 20, 36, 47, 210, 220, 222, 235, 236, 237, 241, 249, 385, 418, 456, 468, 471, 472], "final": [6, 9, 13, 14, 17, 19, 24, 210, 214, 222, 226, 231, 236, 240, 246, 304, 310, 312, 398, 418, 456, 470], "reduc": [6, 9, 13, 14, 15, 17, 196, 210, 214, 217, 221, 229, 305, 308, 404, 405, 406, 456, 469], "commut": 6, "alwai": [6, 195, 222, 231, 248, 352, 353, 392, 394, 413, 416, 450, 468, 476], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 52, 53, 55, 122, 123, 125, 195, 196, 217, 220, 229, 235, 238, 240, 243, 307, 310, 315, 321, 340, 341, 383, 385, 387, 402, 413, 456, 458, 463, 468], "sometim": [6, 27, 222, 235, 366, 426], "similarli": [6, 19, 20, 47, 211, 222, 239, 321, 359, 385, 387, 403, 406, 413, 456, 477], "suppli": [6, 203, 218, 405], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 48, 51, 192, 198, 200, 209, 217, 222, 247, 308, 310, 313, 316, 321, 331, 376, 377, 385, 387, 388, 390, 391, 392, 394, 399, 403, 404, 405, 406, 407, 410, 447, 456, 458, 463], "auxiliari": [6, 15, 16, 222], "union": [6, 318, 384, 484], "minu": [6, 220, 359], "intersect": [6, 240, 457], "add": [6, 15, 19, 20, 23, 29, 33, 37, 90, 91, 121, 160, 161, 191, 203, 215, 217, 220, 222, 235, 237, 246, 249, 256, 257, 266, 305, 316, 318, 323, 324, 325, 375, 382, 395, 413, 416, 418, 434, 456, 459, 463, 468, 469, 480, 483, 484, 489], "getv": [6, 210], "besid": [6, 10, 38, 315, 316], "combin": [6, 14, 18, 34, 47, 208, 210, 222, 225, 236, 237, 240, 304, 305, 306, 310, 456, 463, 472, 479], "primit": [6, 45, 238], "natur": [6, 12, 13, 24, 47, 206, 218, 222], "multi": [6, 31, 208, 218, 222, 225, 226, 229, 236, 238, 240, 241, 242, 243, 247, 308, 310, 312, 465, 469], "tradit": [6, 210, 214, 216, 217, 218, 241, 433], "awkward": 6, "supplement": 6, "perspect": [6, 24, 238], "whole": [6, 9, 12, 24, 34, 196, 209, 210, 222, 226, 236, 238, 240, 241, 312, 467, 469, 472], "pick": [6, 222, 244, 398, 413, 416], "transfer": [6, 206, 208, 225, 240, 242, 487], "intuit": [6, 196, 210, 218, 225, 240, 463], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 196, 208, 210, 215, 222, 225, 226, 229, 235, 236, 239, 241, 242, 244, 248, 304, 310, 312, 314, 315, 321, 362, 456, 462, 463, 468, 469], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 51, 192, 210, 212, 222, 228, 229, 239, 241, 244, 305, 306, 307, 310, 316], "input": [6, 9, 12, 13, 15, 17, 22, 24, 45, 46, 73, 90, 91, 117, 143, 160, 161, 187, 192, 198, 200, 206, 226, 228, 229, 232, 235, 236, 237, 240, 241, 247, 266, 270, 291, 304, 305, 306, 307, 308, 310, 313, 316, 319, 321, 389, 403, 405, 407, 413, 414, 448, 456, 459, 460, 463, 468, 469, 483, 488], "second": [6, 13, 27, 46, 48, 196, 206, 215, 222, 226, 235, 240, 243, 244, 248, 312, 401, 402, 410, 411, 412, 413, 417, 455, 456, 463, 469, 470], "fundament": [6, 9, 47, 210, 238], "modul": [6, 8, 9, 15, 19, 20, 23, 208, 210, 214, 220, 225, 233, 236, 237, 238, 240, 241, 317, 455, 485], "produc": [6, 38, 41, 45, 210, 244, 247, 256, 304, 316, 318, 319, 321, 375, 389, 391, 399, 460, 469], "abil": [6, 12, 34, 51, 214, 218, 222, 229, 236, 469], "activ": [6, 9, 23, 24, 30, 51, 192, 198, 212, 231, 237, 241, 316, 463], "dens": [6, 226, 239, 241, 307, 316], "spars": [6, 13, 226, 241, 304, 307, 383, 456, 459], "dispatch": [6, 34, 236, 246], "kernel": [6, 392], "auto": [6, 14, 16, 34, 202, 222, 249, 465, 468, 470], "switch": [6, 12, 23, 34, 192, 221, 239, 413, 416, 468, 476], "prove": [6, 24, 448], "world": [6, 9, 13, 206, 220, 222, 236, 237, 239, 246, 321, 376, 377, 403], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 47, 121, 214, 217, 220, 222, 235, 238, 306, 307, 308, 314, 315, 318, 382, 389, 394, 402, 403, 407, 413, 456, 462, 465, 468], "co": [6, 23, 206, 237, 305, 483], "lead": [6, 17, 24, 203, 222, 241, 385, 387], "master": [6, 19, 22, 23, 24, 31, 196, 233, 479], "broadcast": [6, 246, 468], "mirror": [6, 7, 10, 24, 27, 32, 212, 227, 228], "On": [6, 27, 30, 37, 196, 210, 218, 220, 247, 390, 453, 468], "contrari": 6, "total": [6, 8, 12, 34, 206, 210, 211, 221, 222, 233, 249, 331, 375, 398, 415, 421, 456, 470, 483], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 48, 192, 203, 210, 211, 213, 216, 217, 218, 220, 221, 222, 233, 234, 237, 244, 255, 304, 306, 307, 309, 310, 311, 321, 327, 332, 334, 335, 340, 341, 359, 361, 362, 371, 379, 382, 384, 391, 400, 402, 407, 416, 423, 426, 427, 433, 434, 440, 442, 449, 450, 451, 456, 458, 459, 463, 468, 469, 470, 471, 472, 479, 482, 483, 487], "redund": [6, 198, 217], "programm": [6, 17, 236, 251], "scope": [6, 23, 37, 121, 192, 238, 318], "disabl": [6, 31, 44, 192, 193, 196, 200, 201, 211, 214, 244, 463], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 121, 191, 196, 201, 206, 210, 211, 216, 217, 218, 222, 223, 224, 225, 226, 227, 236, 239, 240, 241, 243, 251, 308, 310, 311, 312, 314, 375, 468, 476], "katz": [6, 247, 321], "eigenvector": [6, 247, 321, 448], "harmon": 6, "coeffici": [6, 19, 247, 321], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 44, 45, 47, 121, 193, 203, 212, 214, 218, 220, 221, 228, 236, 238, 243, 244, 247, 311, 318, 376, 377, 392, 394, 407, 413, 434, 456, 465, 467, 468, 469, 476, 479, 482], "color": [6, 19, 20, 222, 456], "biconnect": 6, "bridg": [6, 208, 238], "seven": [6, 316, 355], "strongli": [6, 36, 212, 214, 222, 310, 395], "cut": [6, 12, 24, 441], "k": [6, 20, 37, 202, 211, 222, 226, 236, 237, 238, 240, 247, 248, 308, 321, 358, 366, 376, 377, 378, 379, 381, 383, 384, 385, 392, 395, 404, 405, 406, 408, 411, 412, 413, 414, 415, 416, 421, 456, 462, 468, 483, 487], "decomposit": [6, 237, 321], "degeneraci": 6, "onion": 6, "minim": [6, 11, 239, 316, 407, 408, 429, 455], "domin": [6, 321, 468], "cycl": [6, 238, 240, 243, 246, 323, 359, 360, 363, 374, 396, 400, 421, 423, 439, 443], "triangl": [6, 33, 222, 237, 240, 247, 321, 418, 422, 426, 430, 442, 457, 479, 483], "acycl": [6, 238, 450], "cyclic": [6, 236, 238, 240, 363], "diamond": [6, 426], "rectangl": 6, "tail": [6, 209, 214, 220, 222, 238, 477], "approxim": [6, 375, 448], "densest": 6, "articlerank": 6, "hyperlink": [6, 247, 321], "induc": [6, 218, 220, 247, 269, 332, 335, 351, 399, 456], "topic": [6, 7, 212, 228, 237, 247, 469], "person": [6, 7, 30, 33, 45, 46, 47, 51, 90, 160, 161, 192, 209, 212, 214, 217, 218, 220, 222, 235, 237, 318, 436, 445, 456, 459, 462, 467, 468, 469, 470, 484, 489], "standard": [6, 35, 42, 193, 208, 210, 217, 222, 223, 235, 238, 319, 389, 404, 405, 406, 468], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 222, 371, 374, 399], "four": [6, 9, 12, 20, 232, 237, 238, 246, 304, 307, 316, 403, 407, 468], "random": [6, 28, 31, 229, 231, 236, 244, 308, 309, 310, 313, 316, 357, 368, 375, 378, 379, 380, 381, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 416, 448, 451, 453, 455, 463], "give": [7, 12, 13, 31, 34, 46, 192, 212, 222, 228, 235, 244, 310, 318, 383, 403, 423, 455, 456], "quick": [7, 212, 228, 469, 486], "ll": [7, 13, 20, 29, 45, 46, 228], "pip": [7, 27, 30, 31, 32, 49, 203, 209, 212, 228, 237, 314, 469, 482, 486], "upgrad": [7, 23, 32, 212, 228, 486], "occur": [7, 9, 14, 32, 203, 220, 228, 469], "veri": [7, 13, 32, 206, 210, 212, 222, 225, 228, 235, 237, 241, 306, 308, 479], "speed": [7, 32, 196, 201, 222, 227, 228, 238, 317, 383, 456], "try": [7, 17, 23, 32, 36, 41, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 201, 203, 206, 212, 221, 227, 228, 231, 232, 237, 245, 247, 334, 375, 459, 463, 483], "site": [7, 32, 212, 228], "aliyun": [7, 27, 32, 212, 227, 228, 244, 463, 480], "pypi": [7, 27, 32, 203, 212, 213, 228, 482], "trust": [7, 27, 32, 212, 228], "host": [7, 15, 17, 22, 23, 27, 28, 32, 46, 91, 122, 123, 124, 125, 160, 161, 170, 192, 193, 206, 211, 212, 214, 221, 228, 235, 244, 246, 247, 248, 459, 463, 467, 479, 487, 489], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 121, 191, 195, 203, 209, 212, 228, 237, 314, 403, 405, 456, 459, 469, 476, 481], "everyth": [7, 228, 237, 468], "job": [7, 13, 23, 52, 53, 121, 122, 123, 191, 192, 206, 210, 228, 236, 237, 238, 242, 246, 281, 305, 463, 469], "modern_graph": [7, 30, 33, 46, 48, 192, 209, 212, 237, 470, 476], "gremlin": [7, 29, 33, 44, 48, 201, 203, 206, 209, 210, 211, 212, 217, 219, 223, 226, 229, 236, 237, 238, 242, 243, 245, 275, 310, 319, 463, 469, 477, 482, 483, 485, 490], "apach": [7, 17, 22, 23, 31, 193, 194, 196, 208, 217, 218, 221, 224, 225, 236, 237, 240, 467, 469, 473, 479, 481, 485], "tinkerpop": [7, 193, 194, 196, 206, 208, 209, 211, 212, 221, 225, 237, 238, 319, 469, 485], "org": [7, 17, 23, 121, 203, 213, 221, 228, 231, 232, 233, 237, 239, 247, 321, 379, 380, 381, 395, 398, 405, 418, 422, 423, 424, 425, 427, 428, 429, 435, 436, 437, 438, 440, 441, 442, 443, 448, 469, 479, 482, 483, 487], "doc": [7, 16, 17, 30, 37, 237, 238, 246, 250, 252, 318, 405, 486], "tutori": [7, 8, 12, 14, 24, 209, 211, 212, 219, 225, 230, 235, 237, 239, 241, 316, 405, 473], "trigger": [7, 14, 15, 18, 37, 229, 237, 257, 471, 476], "ret": [7, 18, 221, 237, 479, 484], "selector": [7, 15, 33, 38, 237, 246, 248, 256, 262, 263, 273, 274, 278, 286, 287, 318, 461, 463, 467, 479, 484], "homogen": [7, 226, 235, 237, 241, 306], "pg": [7, 237, 247, 463, 467, 468], "none": [7, 9, 20, 27, 31, 161, 170, 215, 231, 233, 234, 235, 237, 247, 248, 255, 262, 263, 266, 269, 273, 274, 275, 276, 278, 281, 283, 286, 287, 291, 297, 299, 303, 304, 305, 310, 318, 319, 320, 321, 329, 333, 335, 336, 340, 341, 350, 351, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 448, 450, 451, 453, 456, 458, 459, 460, 463, 467, 468, 469, 484, 488, 489], "know": [7, 8, 30, 33, 38, 46, 47, 192, 209, 217, 219, 220, 222, 230, 235, 237, 240, 305, 306, 314, 318, 467, 469, 470, 484, 487, 489], "src": [7, 13, 15, 16, 17, 18, 30, 34, 90, 121, 160, 191, 202, 206, 218, 221, 228, 229, 232, 235, 237, 247, 248, 255, 304, 306, 318, 462, 465, 468, 469, 471, 479, 483, 488, 489], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 44, 46, 47, 193, 206, 210, 215, 217, 218, 227, 237, 239, 240, 241, 243, 244, 245, 311, 312, 321, 469, 471, 479], "learn": [7, 27, 32, 36, 37, 38, 41, 196, 206, 210, 212, 225, 229, 230, 231, 233, 238, 239, 242, 245, 299, 305, 308, 309, 310, 311, 314, 316, 461, 463, 483, 485], "technic": [7, 228, 312, 450, 456], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 201, 203, 206, 211, 222, 236, 242, 306, 316, 463, 469], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 196, 206, 209, 211, 216, 221, 222, 223, 225, 226, 236, 237, 238, 239, 241, 242, 243, 306, 308, 310, 312, 317, 385, 396, 403, 455, 468], "usag": [7, 17, 31, 32, 36, 37, 49, 121, 192, 195, 199, 220, 222, 223, 227, 228, 229, 248, 307, 308, 309, 313, 318, 375, 456, 463, 469, 470], "section": [8, 13, 27, 29, 44, 46, 47, 198, 200, 219, 222, 226, 230, 236, 310, 311, 318, 355, 468, 469], "assum": [8, 23, 27, 30, 195, 209, 219, 222, 230, 237, 305, 318, 354, 415, 454, 456, 463, 467, 468, 483], "getting_start": [8, 44, 195, 219, 230], "most": [8, 9, 13, 15, 22, 33, 38, 47, 196, 203, 210, 214, 215, 217, 220, 222, 226, 235, 237, 239, 241, 243, 244, 248, 304, 306, 310, 312, 314, 318, 376, 377, 401, 404, 405, 406, 467, 469], "suffici": [8, 17, 203, 236, 305], "louvain": [8, 239, 247, 479], "social": [8, 47, 206, 211, 222, 236, 239, 241, 244, 383, 433, 448, 457], "scientist": [8, 225, 243], "familiar": [8, 14, 16, 29, 210], "manipul": [8, 11, 19, 20, 196, 222, 225, 240, 243, 245, 246, 456], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 49, 196, 198, 235, 246, 308, 309, 313, 463, 479], "pydata": [8, 242], "eco": 8, "still": [8, 24, 27, 34, 38, 192, 206, 222, 239, 334, 463, 468, 469], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 192, 196, 206, 214, 217, 218, 220, 222, 224, 226, 229, 235, 241, 246, 305, 308, 310, 311, 312, 313, 448, 456, 459, 463, 469, 473], "migrat": [8, 210, 228, 231, 232, 237, 238, 243, 465, 483], "transpar": [8, 236], "don": [8, 17, 23, 30, 33, 36, 37, 203, 209, 222, 257, 350, 456, 469], "autom": [9, 29, 238], "abl": [9, 24, 27, 193, 209, 238, 309, 413, 468, 469], "batch": [9, 12, 19, 46, 211, 221, 226, 229, 233, 234, 238, 241, 304, 307, 309, 310, 312, 314, 316, 320, 469, 488], "counterpart": [9, 217, 225, 238], "redesign": [9, 238], "underli": [9, 42, 206, 210, 222, 238, 312, 468], "equip": [9, 224, 225, 238, 244, 473], "polici": [9, 203, 238, 246, 463], "memori": [9, 12, 23, 24, 27, 34, 47, 192, 196, 203, 206, 208, 218, 221, 225, 227, 230, 231, 233, 236, 238, 239, 241, 242, 243, 244, 304, 305, 306, 312, 316, 318, 456, 463, 469, 472, 481, 482], "todai": 9, "static": [9, 16, 31, 52, 53, 54, 55, 90, 91, 100, 121, 122, 221, 246, 469, 471], "recomput": 9, "costli": 9, "consum": [9, 203, 241, 312, 315], "especi": [9, 235], "trillion": 9, "commerc": [9, 236, 239], "constantli": 9, "issu": [9, 17, 32, 37, 203, 206, 209, 212, 221, 238, 239, 243, 379, 380, 381, 445, 482], "involv": [9, 13, 37, 41, 44, 196, 206, 210, 222, 226, 229, 236, 239, 240, 241, 242, 243], "adjust": [9, 12, 44, 45, 203], "old": [9, 12, 14, 32, 34, 214, 463], "typic": [9, 24, 44, 193, 196, 206, 218, 220, 222, 236, 239, 240, 243, 305, 310, 385, 456, 462, 468], "often": [9, 37, 47, 196, 206, 209, 221, 236, 239, 240, 241, 243, 306, 307, 310, 456, 469, 477], "overlap": [9, 463], "intervent": 9, "burden": [9, 15, 306], "expert": 9, "light": 9, "overal": [9, 241], "verifi": [9, 27, 38, 206, 209, 211, 215, 244, 310], "characterist": [9, 218, 229, 236, 241, 304, 309], "deduc": [9, 318, 489], "appropri": [9, 27, 41, 46, 47, 210, 226, 236, 241, 304], "record": [9, 13, 121, 191, 192, 196, 209, 212, 213, 214, 222, 237, 315, 465, 469], "part": [9, 13, 37, 206, 210, 220, 226, 229, 238, 310, 311, 314, 316, 439, 456, 467, 468, 469], "intermedi": [9, 12, 17, 196, 210, 217, 222, 225, 236, 238], "deliv": [9, 487], "There": [9, 10, 12, 34, 37, 38, 45, 203, 209, 210, 217, 222, 237, 239, 240, 241, 247, 306, 309, 310, 312, 456, 462, 463, 468, 469], "reshap": [9, 316], "eas": [9, 12, 34, 212, 241, 243, 244], "achiev": [9, 12, 20, 24, 27, 34, 196, 222, 236, 239, 244, 465], "decid": [9, 306, 403], "due": [9, 203, 236, 243, 310], "among": [9, 210, 222, 236, 243, 246, 315, 321, 450, 469], "fetch": [9, 15, 17, 463, 469, 479], "suffic": 9, "replai": [9, 229, 238, 465, 469], "affect": [9, 13, 30, 36, 37, 217, 456], "area": [9, 15, 196, 214, 407, 453], "readili": 9, "obtain": [9, 14, 17, 29, 30, 210, 211, 213, 217, 221, 225, 226, 229, 232, 237, 241, 305, 309, 310, 312, 431, 434, 450, 456, 463, 469], "simpli": [9, 17, 20, 44, 121, 198, 209, 214, 222, 235, 237, 310, 378, 382, 456], "coincid": 9, "idea": [9, 37, 226, 241, 251, 312], "invalid": [9, 90, 91, 160, 161, 217, 318, 463], "miss": [9, 37, 308, 318, 366, 463], "comparison": [9, 19, 215, 220, 222, 225, 243, 244], "those": [9, 29, 47, 192, 196, 209, 211, 214, 215, 218, 222, 235, 245, 308, 318, 321, 332, 361, 363, 365, 456, 458, 462], "although": [9, 12, 14, 22, 34, 51, 196, 206, 237, 251, 355, 468, 469], "solut": [9, 31, 48, 196, 203, 240, 241, 243, 321, 482], "enough": [9, 229, 305, 308, 375, 463, 467], "caus": [9, 14, 22, 32, 37, 203, 221, 228, 241, 306, 312, 318, 355], "overwhelm": 9, "overhead": [9, 13, 243, 305, 306], "mf": 9, "delta": [9, 12, 13, 33, 37, 247, 318], "php": 9, "mp": 9, "cc": [9, 468, 484], "sswp": 9, "mv": [9, 214], "track": 9, "gcn": [9, 225, 229, 241, 245, 304, 308, 312, 316, 483, 485, 488, 490], "commnet": 9, "me": 9, "keep": [9, 222, 229, 249, 310, 318, 413, 416, 469], "graphsag": [9, 225, 229, 233, 237, 241, 245, 304, 308, 310, 312, 316, 485, 488, 490], "gin": [9, 241], "vldb": [9, 479, 485], "paper": [9, 14, 24, 226, 228, 231, 232, 233, 234, 236, 237, 238, 244, 316, 321, 453, 463, 479, 483], "publish": [9, 14, 24, 29, 217, 236, 237], "2021": [9, 238], "denot": [9, 47, 51, 194, 196, 220, 222, 309, 384, 469], "w": [9, 192, 221, 247, 321, 383, 389, 403, 406, 408, 413, 416, 418, 446, 456, 458, 469, 487], "respect": [9, 16, 38, 198, 208, 210, 215, 220, 235, 236, 237, 240, 241, 247, 266, 283, 291, 307, 310, 321, 362, 375, 422, 456, 462, 468, 469], "initi": [9, 16, 18, 19, 44, 45, 46, 191, 200, 211, 222, 233, 234, 239, 241, 246, 305, 306, 316, 318, 320, 321, 395, 397, 398, 456, 459, 467, 469, 473, 479], "init_v": 9, "init_m": 9, "aggreg": [9, 210, 215, 223, 241, 249, 304, 310, 312, 316, 468, 487], "vector": [9, 202, 226, 232, 237, 241, 246, 249, 304, 312, 314, 321, 403, 407], "element": [9, 13, 47, 121, 191, 215, 220, 222, 239, 246, 305, 308, 310, 318, 321, 351, 383, 428, 450, 462, 463, 468], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 44, 45, 46, 47, 51, 55, 90, 91, 125, 160, 161, 192, 193, 196, 198, 200, 209, 215, 218, 220, 225, 229, 233, 237, 239, 247, 249, 255, 262, 263, 273, 274, 278, 282, 286, 287, 303, 304, 305, 307, 310, 313, 318, 320, 321, 332, 340, 341, 362, 375, 385, 387, 388, 391, 392, 399, 403, 404, 405, 406, 407, 413, 416, 418, 421, 434, 453, 456, 458, 462, 463, 467, 469, 470, 476], "addition": [9, 12, 14, 36, 47, 214, 226, 232, 236, 238, 240, 243, 312, 321, 468, 477], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 192, 210, 214, 218, 220, 222, 225, 229, 235, 240, 243, 247, 281, 304, 305, 306, 307, 309, 310, 314, 318, 321, 354, 355, 385, 387, 388, 389, 390, 391, 403, 449, 450, 452, 456, 458, 459, 465, 469, 477], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 52, 53, 54, 55, 90, 91, 100, 121, 202, 246, 465, 468, 469, 470, 479], "m1": [9, 203, 212, 357, 482, 486], "m2": [9, 357], "below": [9, 10, 12, 20, 34, 35, 36, 37, 46, 51, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 220, 229, 236, 237, 239, 240, 241, 244, 305, 308, 310, 313, 316, 355, 385, 387, 421, 456, 463, 469], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 52, 53, 54, 55, 90, 91, 100, 121, 237, 244, 246, 314, 469, 479, 483], "dbl_max": 9, "backend": [9, 27, 29, 225, 228, 233, 236, 237, 241, 318, 456, 463, 470, 483], "seamless": [9, 51, 206, 242, 469], "block": [9, 192, 203, 210, 307, 383, 469], "spawn": 9, "adopt": [9, 44, 196, 198, 243, 308, 469], "csc": [9, 467], "csr": [9, 13, 202, 318, 467, 470], "sent": [9, 10, 14, 16, 24, 192, 221], "mainten": [9, 468], "preserv": [9, 13, 198, 217, 248, 318, 418, 448], "effect": [9, 36, 37, 44, 196, 198, 206, 217, 220, 221, 229, 236, 241, 308, 387, 456, 469], "readi": [9, 30, 32, 37, 192, 196, 203, 206, 211, 221, 236, 306, 308, 463, 469, 477], "accept": [9, 44, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 193, 321, 403, 407, 469, 470], "insert": [9, 14, 47, 90, 160, 210, 276, 469], "newli": [9, 41, 44], "particular": [9, 37, 215, 220, 247, 307, 310, 385], "incid": [9, 20, 218, 220, 222, 332, 333, 375, 397, 446, 456], "encod": [9, 13, 100, 215, 218, 247, 305, 310, 316, 318, 320, 458, 469, 488], "dummi": 9, "furthermor": [9, 221, 222, 225, 236, 243], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 229, 238, 239, 310], "cancel": [9, 93, 192], "compens": 9, "whose": [9, 24, 214, 222, 308, 310, 321, 326, 346, 428, 432, 448, 450, 451, 467, 468], "proce": [9, 193, 375, 469], "inner": [10, 13, 16, 202, 222, 223, 249, 318, 468], "outer": [10, 14, 202, 215, 249, 371, 468], "cross": [10, 218, 251, 431], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 47, 48, 51, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 196, 198, 203, 209, 218, 222, 231, 236, 237, 239, 240, 244, 246, 247, 248, 255, 257, 259, 275, 282, 299, 307, 318, 356, 358, 359, 361, 363, 365, 366, 368, 370, 371, 374, 385, 387, 388, 390, 392, 393, 394, 396, 400, 401, 402, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 451, 458, 463, 468, 477], "5": [10, 13, 19, 20, 31, 192, 203, 211, 216, 220, 222, 228, 229, 231, 232, 233, 234, 237, 240, 244, 304, 307, 309, 310, 311, 313, 316, 321, 327, 332, 334, 340, 359, 362, 375, 379, 380, 381, 383, 384, 392, 394, 401, 402, 403, 404, 406, 407, 421, 422, 424, 425, 426, 427, 429, 430, 433, 435, 437, 439, 440, 446, 451, 456, 462, 463, 469, 471, 477, 482, 483, 487], "9": [10, 31, 209, 212, 220, 222, 237, 305, 321, 359, 361, 407, 425, 433, 446, 451, 486], "12": [10, 20, 32, 203, 212, 222, 244, 247, 305, 306, 307, 309, 311, 323, 324, 325, 361, 423, 424, 428, 432, 436, 442, 480, 482, 486, 487], "split": [10, 46, 217, 220, 222, 231, 232, 233, 234, 305, 306, 463, 469], "roughli": 10, "across": [10, 14, 34, 35, 36, 48, 193, 196, 217, 218, 233, 236, 238, 239, 243, 468, 470], "divid": [10, 215, 220, 222, 226, 236, 247, 305, 308, 312, 313, 321, 467], "place": [10, 18, 19, 36, 45, 46, 209, 222, 314, 315, 318, 383, 403, 404, 405, 406, 407, 436, 454], "itself": [10, 20, 22, 37, 220, 222, 226, 235, 236, 249, 304, 306, 462, 463, 468], "replic": [10, 211, 397], "resid": [10, 14, 38], "j": [10, 31, 202, 247, 316, 321, 354, 355, 376, 377, 385, 387, 388, 390, 396, 407, 410, 411, 412, 434, 468], "outcom": 10, "outgo": [10, 13, 16, 24, 47, 217, 220, 222, 240, 249, 310, 321, 456, 468], "incom": [10, 13, 14, 16, 34, 47, 220, 222, 246, 249, 321], "consid": [10, 15, 18, 27, 37, 217, 222, 229, 239, 247, 248, 305, 306, 321, 385, 448, 465, 468], "vice": [10, 403], "versa": [10, 403], "compani": [10, 468], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 206, 220, 235, 243, 305, 306, 310, 313, 318, 468, 469], "regardless": [10, 198, 215, 238, 305, 401, 468], "friendli": [11, 12, 37, 208, 225, 239, 241, 242, 243], "research": [11, 217, 229, 241, 446, 463], "particularli": [11, 241, 448], "field": [11, 27, 30, 33, 38, 45, 47, 209, 229, 231, 232, 235, 237, 308, 312, 316, 318, 402, 463, 469, 480, 483], "scienc": [11, 410, 433], "solv": [11, 24, 37, 203, 205, 222, 239], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 236], "minor": [12, 14, 34, 225, 236, 241, 244, 471], "cope": [12, 34], "life": [12, 32, 34, 209, 236], "extrem": [12, 27, 236, 312, 357, 368, 468], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 42, 44, 47, 210, 217, 218, 220, 222, 225, 226, 229, 238, 239, 241, 243, 244, 246, 247, 249, 307, 308, 310, 312, 358, 359, 360, 371, 374, 382, 428, 450, 463, 465, 467, 468, 469, 470], "format": [12, 13, 20, 22, 34, 35, 45, 46, 47, 102, 172, 192, 206, 208, 222, 226, 233, 235, 241, 242, 244, 247, 275, 282, 304, 307, 310, 312, 315, 316, 318, 319, 456, 458, 463, 465, 481], "unifi": [12, 34, 42, 196, 206, 208, 210, 305, 465], "care": [12, 34, 222, 314, 315, 468], "foreign": [12, 468], "ecosystem": [12, 193, 208, 212, 224, 225, 240, 243, 473], "freedom": 12, "accord": [12, 19, 36, 44, 192, 203, 209, 210, 214, 220, 222, 226, 235, 236, 240, 241, 246, 308, 310, 314, 375, 383, 395, 396, 465, 469], "demand": [12, 196, 210, 239, 468, 469, 473], "sdk": [12, 18, 42, 49, 201, 203, 209, 213, 223, 224, 225, 239, 240, 243, 251, 461, 469, 473, 479], "domain": [12, 214, 236, 241, 403, 404, 405, 406, 407], "dedic": 12, "treat": [12, 14, 20, 34, 222, 318, 456, 458, 463, 476], "immut": [12, 34, 208, 218, 238], "persist": [12, 15, 30, 34, 48, 203, 208, 209, 236, 238, 243, 467], "fortun": [12, 20, 45, 206], "grin": [12, 208], "awar": [12, 37, 44, 193, 203, 209, 238], "introduct": [12, 34, 49, 217, 223, 239, 309, 310, 313, 321, 366, 448, 468], "foundat": [12, 201, 217, 236], "visit": [12, 29, 193, 214, 222, 240, 305], "meanwhil": [12, 206, 225, 241, 468], "compress": [12, 13, 195, 237, 247, 305, 421], "pipelin": [12, 34, 225, 236, 239, 243, 472], "balanc": [12, 306, 356], "link": [12, 31, 37, 38, 47, 51, 193, 203, 205, 210, 218, 226, 241, 244, 247, 318, 321, 358, 379, 381, 382, 392, 393, 394, 453, 456, 463], "popular": [12, 22, 29, 194, 206, 235, 237, 240, 241, 304, 316, 469], "freeli": [12, 24], "background": [12, 205], "interoper": [12, 468], "panda": [12, 206, 214, 246, 248, 262, 273, 318, 456, 485], "mar": [12, 27, 206, 220, 238, 463], "fastffi": [12, 251], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 45, 48, 121, 191, 196, 198, 203, 209, 215, 216, 218, 220, 223, 224, 225, 236, 238, 240, 243, 246, 357, 368, 375, 451, 454, 456, 473, 479], "emploi": [12, 24, 34, 51, 232, 238, 239], "captur": [12, 241], "20": [12, 13, 27, 29, 32, 34, 209, 212, 220, 222, 225, 244, 247, 248, 306, 307, 309, 318, 375, 403, 404, 425, 427, 456, 479, 480, 486, 487], "100": [12, 34, 214, 222, 228, 231, 232, 237, 247, 316, 321, 378, 385, 389, 396, 405, 456, 463, 469, 483, 487], "build": [12, 15, 31, 34, 35, 37, 121, 203, 210, 214, 221, 225, 226, 235, 238, 246, 247, 257, 259, 306, 310, 312, 314, 315, 318, 404, 405, 406, 448, 463, 465, 476, 481, 488], "been": [12, 17, 23, 24, 28, 29, 33, 37, 44, 192, 203, 210, 211, 212, 214, 217, 220, 222, 224, 226, 236, 238, 239, 240, 241, 243, 247, 296, 308, 310, 318, 319, 321, 375, 398, 448, 460, 473], "go": [13, 227, 316, 383, 436, 469], "impact": [13, 240], "dive": 13, "arrowfrag": [13, 16, 246, 470], "vineyard": [13, 15, 16, 23, 28, 31, 33, 202, 203, 208, 209, 218, 225, 230, 231, 236, 242, 243, 246, 248, 278, 283, 286, 287, 318, 319, 463, 468, 469, 477, 479, 482, 483, 484, 487, 489], "basic": [13, 16, 20, 45, 46, 217, 240, 304, 307, 312, 314, 315, 316, 375, 385, 390, 462], "member": [13, 16, 220, 222, 246, 446], "string": [13, 17, 23, 33, 45, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 110, 111, 113, 116, 117, 118, 119, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 209, 214, 215, 217, 218, 220, 235, 246, 247, 249, 254, 291, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 336, 340, 341, 350, 448, 450, 452, 456, 458, 465, 467, 468, 469, 470, 479, 487, 489], "consecut": 13, "hashmap": [13, 202, 318], "arrai": [13, 17, 202, 215, 226, 235, 241, 246, 247, 248, 307, 308, 310, 313, 316, 456, 459, 471, 479], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 192, 213, 220, 235, 247, 318, 321, 456, 459, 479, 482, 484, 489], "vertex_label": [13, 246, 249], "perfect": [13, 318], "int64_t": [13, 202, 209, 235, 246, 247, 318, 471, 489], "std": [13, 14, 15, 202, 246, 465, 470], "string_view": 13, "uint64_t": [13, 16, 318, 465], "oid_arrays_": [13, 202], "topologi": [13, 226, 229, 238, 307, 312, 453, 465, 467, 468], "row": [13, 46, 209, 217, 226, 241, 305, 318, 449, 469], "matrix": [13, 235, 241, 247, 312, 321, 383, 401, 416, 419, 448, 456, 459], "src_type": [13, 307], "edge_typ": [13, 45, 47, 136, 155, 192, 228, 231, 232, 237, 304, 306, 307, 308, 309, 310, 313, 316, 320, 468, 483, 488], "pair": [13, 20, 212, 215, 218, 222, 246, 247, 249, 303, 316, 355, 360, 361, 367, 383, 401, 407, 456, 459, 462, 468, 470], "indptr": 13, "ie_lists_": [13, 202], "edge_label": [13, 142, 148, 160, 214, 246, 249, 463], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 44, 192, 201, 217, 218, 222, 226, 235, 244, 304, 306, 318, 463, 465, 467, 468, 470], "uint32_t": [13, 246, 318], "num_edg": 13, "ie_offsets_lists_": [13, 202], "offset": [13, 202, 246, 307, 315, 359, 469], "slice": [13, 210, 248, 318, 462], "ie_list": 13, "ie_offset": 13, "num_vertic": 13, "oe_lists_": [13, 202], "oe_offsets_lists_": [13, 202], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 202], "vertex_tables_": [13, 202], "oid_t": [13, 15, 16, 202, 246], "vid_t": [13, 15, 16, 202, 246], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 203], "practic": [13, 16, 28, 195, 210, 218, 226, 229, 236, 241, 305, 306, 308, 469], "load_factori": 13, "15": [13, 203, 222, 231, 232, 234, 244, 306, 307, 309, 310, 416, 438, 449, 456, 463], "extra": [13, 37, 203, 209, 211, 321, 417, 482], "column": [13, 18, 33, 45, 46, 47, 62, 74, 75, 121, 132, 144, 145, 191, 192, 202, 206, 210, 218, 226, 235, 237, 241, 246, 248, 249, 256, 305, 315, 318, 449, 465, 469, 470, 479, 483, 489], "edge_id": 13, "uniqu": [13, 45, 46, 47, 192, 200, 210, 214, 215, 218, 220, 235, 236, 237, 238, 247, 295, 296, 305, 309, 314, 315, 318, 321, 423, 429, 462, 469, 470], "kept": [13, 220, 222, 246], "summari": [13, 243, 336], "argument": [13, 23, 30, 99, 169, 192, 220, 222, 229, 233, 235, 321, 323, 324, 325, 354, 362, 392, 399, 403, 404, 405, 406, 407, 434, 456, 459, 462, 463, 469, 470, 479], "use_perfect_hash": [13, 246, 297, 318, 463], "load_from": [13, 22, 30, 318, 463, 467], "realli": 13, "margin": 13, "former": [13, 239], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 212, 214, 222, 240, 318, 463, 468, 469, 486], "localvertexmap": 13, "suitabl": [13, 47, 195, 236, 243, 306, 310, 316, 375, 469, 472], "dozen": 13, "hundr": [13, 385, 396], "repeatedli": [13, 210, 239], "add_vertic": [13, 206, 214, 235, 318, 456, 459, 460, 483, 484, 489], "sure": [13, 23, 27, 30, 41, 45, 100, 170, 193, 211, 214, 222, 310, 314, 316, 463, 469], "fairli": [13, 212], "8": [13, 20, 31, 32, 33, 35, 37, 121, 203, 209, 212, 214, 220, 222, 225, 228, 244, 247, 305, 359, 382, 401, 424, 433, 435, 441, 445, 451, 453, 456, 458, 469, 471, 482, 487], "absolut": 13, "int32_t": [13, 235, 318, 489], "vid_typ": [13, 33, 246, 297, 318, 463], "compact_edg": [13, 246, 297, 318, 463], "compact": [13, 246, 318], "varint": [13, 318], "half": [13, 318], "generated_eid": 13, "save": [13, 18, 28, 29, 51, 209, 306, 318, 321, 469], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 42, 44, 45, 47, 48, 52, 53, 54, 55, 90, 91, 100, 121, 191, 192, 194, 196, 198, 199, 200, 206, 209, 210, 211, 213, 214, 216, 217, 219, 221, 222, 223, 225, 235, 236, 238, 239, 242, 243, 245, 275, 318, 397, 446, 461, 463, 476, 483, 487], "vertex_id": [13, 24, 198, 206, 235, 489], "retain_oid": [13, 209, 235, 246, 297, 318, 463, 470, 489], "gain": [13, 37], "signific": [13, 238, 243], "arrowprojectedfrag": [13, 15, 16, 246, 255], "implicit": [13, 459], "arrowflattenfrag": 13, "thought": [13, 384], "view": [13, 20, 24, 201, 235, 236, 267, 329, 333, 352, 353, 456, 459, 465, 477], "mainli": [13, 46, 210, 215, 222, 243, 312], "purpos": [13, 42, 217, 222, 236, 468], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 248, 471, 472], "r2": [13, 248, 471, 472], "r3": [13, 248, 471], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 222, 239, 247, 305, 309, 310, 311, 321, 338, 375, 395, 405, 454, 456, 463, 468, 469], "express": [14, 15, 24, 194, 210, 215, 216, 218, 229, 238, 240, 248, 305, 307, 310, 407, 456, 487], "modifi": [14, 20, 24, 28, 192, 196, 209, 215, 221, 260, 261, 276, 277, 311, 334, 387, 454, 467, 468], "adher": [14, 35, 47, 217, 468], "think": [14, 24], "principl": [14, 314], "privileg": 14, "experienc": [14, 240], "inform": [14, 15, 16, 19, 27, 29, 38, 121, 192, 193, 203, 210, 211, 214, 215, 218, 232, 237, 239, 241, 242, 251, 265, 304, 305, 306, 307, 310, 312, 314, 318, 321, 336, 354, 395, 417, 418, 446, 456, 463, 465, 469, 476], "hop": [14, 210, 218, 220, 222, 225, 226, 229, 236, 240, 241, 304, 308, 310, 312, 313, 314, 316], "slow": [14, 212], "consequ": [14, 236, 239], "piec": [14, 194, 208, 315, 463], "destin": [14, 33, 45, 46, 47, 74, 77, 144, 147, 209, 214, 215, 222, 226, 235, 237, 246, 248, 264, 305, 306, 307, 309, 310, 316, 318, 320, 462, 467, 468, 469, 489], "abovement": 14, "peval": [14, 16, 17, 18, 34, 239, 246, 254, 473, 479], "incev": [14, 16, 17, 18, 34, 239, 246, 254, 473, 479], "assembl": [14, 34, 210, 238, 239, 246, 318], "unlik": [14, 17, 216, 226, 229, 236, 456], "modif": [14, 22, 225, 236, 241, 318, 459], "convent": [14, 37, 203, 217, 389, 415, 477], "taught": [14, 222], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 203, 214, 236, 469], "collect": [14, 34, 121, 191, 215, 220, 221, 222, 240, 241, 242, 316, 456], "partial": [14, 16, 18, 34, 220, 246, 248, 305, 398, 473], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 209, 229, 243, 305, 313, 321, 391, 456], "accur": [14, 214, 217], "long": [14, 17, 30, 33, 38, 198, 214, 218, 220, 222, 238, 243, 247, 310, 468, 469, 479, 487], "const": [14, 15, 16, 202, 246, 249, 314, 315, 468, 469, 470], "fragment_t": [14, 15, 16, 246], "frag": [14, 17, 18, 202, 254, 465, 470, 479], "context_t": [14, 15, 16, 246], "ctx": [14, 17, 22, 246, 467, 479], "message_manager_t": [14, 16, 246], "vertex_t": [14, 16, 202, 246], "native_sourc": [14, 18, 479], "getinnervertex": [14, 246], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 202, 246, 465, 479], "get_neighbor": 14, "min": [14, 18, 24, 212, 215, 249, 479, 487], "static_cast": [14, 16, 202, 465], "get_data": [14, 202], "isoutervertex": [14, 246], "put": [14, 16, 17, 22, 47, 48, 54, 90, 91, 121, 124, 160, 161, 191, 192, 314], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 202, 222, 306, 316, 318, 414, 468, 469, 479], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 202, 246, 465, 479], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 222, 249, 468], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 479], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 202, 246], "dijkstra": [14, 18, 239, 321, 479], "checkout": [14, 37, 311], "seri": [15, 222, 241, 246, 310, 468], "strong": [15, 195, 210, 239], "typenam": [15, 16, 56, 60, 63, 70, 79, 83, 89, 117, 119, 202, 246], "frag_t": [15, 16, 246], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 44, 45, 209, 221, 222, 240, 307, 310, 314, 316, 462, 471], "shared_ptr": [15, 202, 246, 465, 470], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 41, 198, 214, 222, 235, 463, 479, 489], "global": [15, 24, 210, 218, 220, 222, 241, 297, 318, 448, 463, 470, 476, 487], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 41, 46, 209, 210, 222, 235, 241, 418, 462], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 45, 46, 102, 192, 193, 200, 202, 231, 235, 246, 247, 249, 254, 304, 306, 307, 311, 314, 316, 456, 459, 465, 473, 479, 488, 489], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 364], "len": [15, 220, 222, 231, 233, 306, 321, 330, 361, 378, 380, 383, 385, 386, 390, 456], "ed": [15, 23, 389, 403, 410, 433, 439], "ctruee": 15, "rather": [15, 18, 196, 222, 235, 240, 242, 243, 321, 375, 417, 468], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 258, 459], "dynamic_properti": [15, 271, 459], "def": [15, 18, 23, 213, 228, 231, 232, 233, 234, 235, 237, 254, 304, 306, 307, 308, 309, 310, 313, 316, 362, 469, 479, 483, 484, 488, 489], "arg": [15, 52, 53, 54, 55, 90, 91, 100, 121, 231, 233, 246, 247, 248, 249, 282, 300, 307, 308, 309, 310, 313, 316, 320, 463, 469], "appasset": [15, 18, 254, 255, 259, 461, 479], "algo": [15, 16, 17, 22, 23, 247, 255], "flash_bf": 15, "vertex_data": [15, 16, 161, 186, 247, 255], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 48, 191, 198, 457, 459, 461], "gs_conf": [15, 16, 255], "yaml": [15, 16, 28, 29, 38, 44, 45, 46, 47, 193, 198, 200, 209, 221, 233, 247, 255, 463, 467, 469, 487], "cpp_flash": 15, "class_nam": [15, 16, 255], "compatible_graph": [15, 16, 255], "immutableedgecutfrag": 15, "log": [15, 17, 44, 93, 163, 192, 203, 208, 231, 232, 236, 238, 468, 470, 482], "p2p": [15, 17, 22, 23], "network": [15, 27, 47, 203, 206, 208, 211, 222, 226, 230, 232, 236, 237, 239, 242, 243, 244, 245, 247, 304, 305, 306, 308, 310, 312, 316, 321, 376, 377, 383, 385, 389, 392, 393, 394, 397, 409, 433, 444, 445, 447, 448, 453, 457, 471, 482], "load_p2p_network": [15, 16, 17, 18, 206, 247, 248, 479], "attribut": [15, 19, 47, 218, 229, 232, 237, 239, 241, 246, 247, 280, 291, 306, 307, 309, 312, 316, 317, 320, 321, 323, 324, 325, 340, 341, 350, 362, 375, 380, 399, 403, 404, 405, 406, 407, 410, 411, 412, 446, 448, 450, 453, 454, 456, 457, 459, 465], "convert": [15, 20, 23, 51, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 217, 226, 247, 262, 263, 273, 274, 286, 287, 304, 305, 312, 316, 376, 377, 434, 451, 456, 458, 459, 465], "simple_graph": [15, 16], "dist": [15, 17, 213, 247, 248, 311, 314, 403, 405, 407, 463, 479, 487], "codegen": [15, 210], "bit": [15, 212, 215, 220, 222, 467], "longer": [15, 231, 249, 463], "retriev": [15, 49, 51, 192, 208, 214, 218, 220, 237, 238, 248, 262, 263, 273, 274, 278, 282, 286, 287, 307, 308, 310, 316, 321, 462, 469, 470], "displai": [15, 200, 221, 305], "vertex_rang": [15, 248, 262, 263, 273, 274, 278, 286, 287, 318, 462], "end": [15, 16, 202, 206, 215, 220, 222, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 243, 248, 249, 310, 315, 321, 335, 344, 349, 350, 363, 375, 458, 462, 468, 473], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 191, 203, 213, 221, 476, 480, 482, 486], "degre": [16, 19, 20, 202, 206, 217, 222, 229, 247, 249, 307, 308, 313, 321, 330, 355, 356, 375, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 401, 413, 414, 415, 416, 450, 456, 457, 469], "vertexdatacontext": [16, 17, 246, 321, 479], "myappcontext": 16, "explicit": [16, 246, 400, 456, 463], "parallelmessagemanag": [16, 17, 479], "param1": [16, 91, 161], "setvalu": [16, 17, 479], "vertex_array_t": [16, 246], "variabl": [16, 29, 33, 39, 41, 47, 203, 211, 220, 254, 375, 463, 469, 470, 482], "And": [16, 18, 23, 29, 31, 36, 38, 206, 210, 212, 222, 235, 244, 247, 248, 309, 314, 459, 462, 463, 469], "zero": [16, 47, 238, 247, 305, 310, 321, 338, 356, 365, 398, 450, 451, 470], "myapp": 16, "parallelappbas": [16, 17, 479], "parallelengin": [16, 17, 479], "install_parallel_work": 16, "constexpr": [16, 246], "messagestrategi": [16, 18, 246, 249, 479], "message_strategi": [16, 246], "ksynconoutervertex": [16, 18, 246, 249, 479], "loadstrategi": [16, 246], "load_strategi": [16, 246], "kbothoutin": [16, 246], "initchannel": 16, "noth": [16, 249, 265, 318, 320, 456], "forc": [16, 37, 235], "forcecontinu": [16, 17, 479], "getincomingadjlist": [16, 202, 246], "counter": [16, 222], "runnabl": [16, 17, 23, 87, 157], "content": [16, 47, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192, 195, 206, 222, 232, 235, 237, 321, 453, 467, 489], "my_app": [16, 18, 479], "cpp_pie": [16, 247, 255], "context_typ": [16, 246, 247, 255], "dynamicprojectedfrag": 16, "codebas": [16, 35], "my_app_context": 16, "zip": [16, 195, 213, 214, 221, 255, 403, 407, 456, 487], "jr": 16, "load_app": [16, 17, 18, 22, 479], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 247, 248, 318, 462, 479], "demo": [17, 22, 23, 212, 251, 463, 469, 477, 479], "turn": [17, 49, 196, 201, 203, 214, 244, 251, 450, 477], "verbos": [17, 23, 38, 203, 477], "cluster_typ": [17, 22, 214, 235, 247, 248, 463, 467, 479, 489], "add_lib": [17, 22, 463], "home": [17, 22, 23, 28, 38, 45, 46, 203, 206, 235, 246, 311, 312, 314, 315, 317, 318, 321, 365, 476, 477, 479, 481, 489], "19": [17, 22, 23, 32, 203, 213, 222, 244, 306, 307, 309, 477, 482, 486], "shade": [17, 22, 23, 479], "java_pi": [17, 247], "threadnum": [17, 479], "info": [17, 38, 44, 52, 122, 193, 203, 212, 222, 233, 249, 318, 456, 459, 463, 468, 469, 470, 477], "avail": [17, 23, 29, 30, 41, 46, 192, 194, 201, 206, 214, 215, 218, 221, 229, 235, 238, 244, 247, 303, 316, 404, 405, 406, 456, 463, 465, 468, 476, 479], "mvn": [17, 22, 121, 251, 469], "clean": [17, 32, 121, 206, 212, 214, 237, 251, 314, 468], "dskiptest": [17, 251], "pom": [17, 23, 121, 469], "xml": [17, 23, 246, 469], "groupid": [17, 23, 121, 469, 479], "artifactid": [17, 23, 121, 469, 479], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 469, 479], "spark": [17, 467], "drastic": 17, "great": [17, 23, 37, 469], "suppos": [17, 222, 450, 468], "traversecontext": [17, 479], "overrid": [17, 235, 246, 304, 314, 476, 479], "ifrag": [17, 479], "parallelcontextbas": [17, 479], "adjlist": [17, 246, 249, 467, 479], "nbr": [17, 20, 202, 246, 249, 456, 479], "dst": [17, 18, 30, 90, 121, 160, 191, 206, 218, 229, 235, 248, 304, 307, 318, 320, 462, 465, 468, 479, 488, 489], "largest": [17, 222, 321, 401, 479], "vertexarrai": [17, 246, 249, 479], "math": [17, 228, 232, 237, 321, 405, 406, 483, 485], "max": [17, 215, 249, 317, 321, 479, 487], "pars": [17, 210, 235, 247, 305, 465, 469], "maxiter": [17, 479], "jsonobject": [17, 479], "gsvertexarrai": [17, 479], "createfficontext": [17, 479], "containskei": [17, 479], "getinteg": [17, 479], "javadoc": [17, 35], "proper": [17, 37], "javaapp": [17, 461, 479], "But": [17, 209, 222, 235, 243, 251, 456, 462], "rememb": [17, 22, 23, 30, 33, 44, 198, 469, 476], "pack": [17, 23, 479], "param": [17, 23, 29, 87, 106, 157, 176, 192, 203, 212, 214, 233, 247, 267, 268, 282, 297, 299, 303, 310, 316, 463, 469, 479], "b": [17, 18, 22, 37, 215, 217, 220, 222, 310, 365, 383, 396, 402, 403, 407, 412, 413, 414, 416, 444, 452, 456, 479, 487], "bother": 17, "click": [17, 36, 37, 229, 306, 307, 310, 480], "pure": [18, 246, 473], "just": [18, 19, 23, 27, 45, 48, 191, 193, 195, 198, 203, 206, 209, 220, 222, 243, 251, 314, 318, 456, 459, 463, 469, 471], "udf": [18, 254, 462, 479], "decor": [18, 479], "vd_type": [18, 249, 254, 479], "md_type": [18, 249, 254, 479], "youralgorithm": [18, 479], "staticmethod": [18, 254, 479], "statu": [18, 27, 29, 30, 38, 49, 52, 53, 54, 55, 90, 91, 93, 100, 104, 121, 122, 123, 124, 125, 160, 161, 163, 170, 174, 191, 198, 200, 203, 231, 314, 315, 321, 469, 473, 477], "cython": [18, 34, 203, 282, 461, 479], "sssp_pie": [18, 479], "v_label_num": [18, 470, 479], "vertex_label_num": [18, 249, 465, 470, 479], "v_label_id": [18, 249, 479], "init_valu": [18, 249, 479], "1000000000": [18, 247, 479], "pieaggregatetyp": [18, 249, 479], "kminaggreg": [18, 249, 479], "register_sync_buff": [18, 249, 479], "get_config": [18, 249, 463, 479], "declar": [18, 210, 220, 222, 225, 240, 243, 306, 479], "get_inner_nod": [18, 249, 479], "break": [18, 37, 51, 196, 221, 316, 479], "set_node_valu": [18, 249, 479], "e_label_num": [18, 202, 470, 479], "edge_label_num": [18, 249, 465, 470, 479], "e_label_id": [18, 479], "get_outgoing_edg": [18, 249, 479], "third": [18, 235, 236, 240, 318, 441, 442], "get_int": [18, 249, 479], "get_node_valu": [18, 249, 479], "iv": [18, 479], "inner_nod": [18, 249, 479], "v_dist": [18, 479], "u_dist": [18, 202, 479], "classic": [18, 229, 309, 457], "yourpregelalgorithm": [18, 479], "sssp_pregel": [18, 479], "set_valu": [18, 249, 479], "src_id": [18, 202, 229, 305, 306, 307, 309, 310, 313, 316, 320, 479], "cur_dist": [18, 479], "new_dist": [18, 479], "outgoing_edg": [18, 249, 479], "vote_to_halt": [18, 249, 479], "sin": [18, 479], "m_pi": [18, 479], "translat": [18, 37, 214, 236], "generate_eid": [18, 209, 235, 246, 297, 318, 463, 470, 479, 489], "test": [18, 23, 29, 33, 49, 51, 192, 195, 203, 208, 209, 212, 222, 225, 228, 231, 232, 237, 241, 304, 314, 316, 320, 340, 341, 375, 456, 458, 463, 468, 469, 476, 480, 481, 483, 488], "futur": [18, 47, 121, 191, 196, 215, 220, 222, 235], "to_gar": [18, 479], "my_sssp_pregel": [18, 479], "gar": [18, 247, 255, 479], "construct": [19, 196, 201, 222, 226, 229, 235, 236, 237, 238, 246, 297, 304, 305, 306, 307, 308, 318, 319, 323, 324, 364, 385, 387, 388, 390, 396, 400, 401, 402, 410, 413, 414, 415, 416, 418, 434, 438, 442, 448, 450, 463, 467, 470], "expand": [19, 196, 210, 222, 223, 308, 310, 457], "add_edges_from": [19, 20, 340, 456], "add_nod": [19, 20, 456, 459], "number_of_nod": [19, 20, 321, 365, 449, 456], "number_of_edg": [19, 20, 330, 365, 449, 456], "sort": [19, 20, 202, 210, 222, 321, 327, 355, 359, 362, 365, 390, 391, 449, 450, 456, 468], "connected_compon": [19, 321], "nx": [19, 20, 206, 258, 260, 261, 264, 267, 269, 271, 276, 277, 281, 284, 285, 318, 321, 456, 458, 459], "add_nodes_from": [19, 20, 456], "red": [19, 20, 37, 214, 305, 456], "green": [19, 20, 36, 37], "add_edg": [19, 20, 191, 206, 214, 235, 318, 334, 340, 341, 344, 349, 350, 456, 459, 483, 484, 489], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 194], "dict": [19, 20, 27, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 247, 248, 275, 283, 303, 306, 307, 310, 318, 319, 403, 404, 405, 406, 413, 414, 434, 456, 462, 463, 469], "draw": [19, 51, 196, 222, 403, 406], "matplotlib": [19, 222], "with_label": 19, "font_weight": 19, "bold": [19, 244], "twitter": [19, 244], "wget": [19, 22, 23, 29, 35, 213, 311, 487], "raw": [19, 22, 23, 45, 46, 48, 193, 200, 209, 210, 226, 273, 274, 306, 312, 314, 315, 320], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 48, 51, 214, 220, 222, 237, 238, 247, 306, 316, 321, 379, 380, 381, 383, 392, 393, 394, 397, 398, 400, 402, 404, 405, 406, 407, 410, 412, 487], "o": [19, 22, 23, 27, 30, 33, 38, 246, 316, 321, 338, 389, 391, 396, 404, 405, 406, 408, 409, 410, 456, 469, 480, 483], "gs_nx": 19, "g1": [19, 318, 460, 471, 472], "read_edgelist": [19, 458], "expandvar": [19, 22], "nodetyp": [19, 458], "create_us": [19, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 385, 386, 387, 388, 390, 392, 393, 394, 396, 400, 401, 402, 408, 409, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 451, 458], "g2": [19, 318, 456, 460, 471, 472], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 214, 242, 321], "hashabl": [20, 336, 351, 413, 456, 458], "float": [20, 82, 96, 215, 218, 220, 231, 235, 244, 247, 304, 305, 306, 307, 315, 316, 317, 321, 375, 378, 379, 380, 381, 383, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 410, 411, 412, 448, 456, 458, 463, 467, 471, 487, 488, 489], "tupl": [20, 222, 235, 305, 306, 307, 316, 318, 321, 340, 341, 350, 362, 403, 407, 413, 452, 456, 458, 463], "though": [20, 375, 456, 469], "yield": [20, 51, 198, 310, 316, 403, 407, 456], "node_attribute_dict": 20, "discuss": [20, 203, 222, 321, 468, 482], "incorpor": [20, 51, 217], "path_graph": [20, 321, 332, 334, 335, 341, 456, 458], "grown": [20, 365, 398, 456], "unpack": [20, 221, 246, 456], "ebunch": [20, 456], "dictionari": [20, 194, 247, 291, 321, 403, 404, 405, 406, 413, 414, 415, 416, 456, 458, 467], "11": [20, 27, 30, 31, 32, 209, 212, 222, 228, 244, 247, 305, 306, 307, 309, 323, 324, 325, 361, 456, 469, 477], "complaint": 20, "clear": [20, 37, 220, 222, 260, 261, 356, 358, 359, 361, 363, 365, 366, 368, 370, 371, 374, 385, 387, 388, 390, 392, 393, 394, 396, 400, 401, 402, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 451, 456, 458, 469], "quietli": [20, 351, 456], "ignor": [20, 48, 321, 332, 351, 456, 463], "spam": 20, "stage": [20, 203, 208, 226, 242, 243, 310, 468], "seen": [20, 210, 236, 468], "report": [20, 203, 217, 244, 281, 379, 380, 381, 456, 459], "adj": [20, 249, 321, 456], "item": [20, 29, 46, 193, 233, 236, 305, 306, 307, 310, 316, 321, 456, 469], "One": [20, 210, 215, 236, 240, 241, 242, 243, 247, 308, 310, 387, 396, 450, 469], "nbunch": [20, 329, 333, 335, 351, 456], "remove_nod": [20, 456], "remove_nodes_from": [20, 456], "remove_edg": [20, 456], "remove_edges_from": [20, 385, 387, 456], "instanti": [20, 247, 316, 471], "digraph": [20, 318, 323, 333, 335, 340, 341, 344, 349, 350, 361, 378, 379, 380, 383, 387, 388, 390, 392, 393, 394, 395, 399, 450, 451, 452, 454, 457, 458, 459], "edgelist": [20, 434, 458], "subscript": [20, 456], "notat": [20, 44, 46, 421, 423, 425, 427, 429, 435, 437, 456], "yellow": [20, 305], "blue": [20, 305, 456], "undirect": [20, 47, 235, 241, 247, 267, 306, 310, 318, 321, 327, 331, 353, 376, 377, 383, 385, 392, 394, 397, 399, 400, 401, 403, 404, 405, 406, 407, 413, 418, 422, 423, 426, 429, 430, 432, 438, 451, 453, 456, 470], "twice": [20, 434, 456], "fg": [20, 470], "add_weighted_edges_from": [20, 340, 456], "125": [20, 305, 389, 400], "75": [20, 222, 228, 231, 232, 237, 244, 321, 379, 380, 381, 383, 463, 483], "375": 20, "eattr": [20, 456], "wt": 20, "attach": [20, 246, 305, 392, 395], "fridai": [20, 456, 459], "mondai": 20, "5pm": [20, 456], "2pm": [20, 456], "room": [20, 456], "714": [20, 456], "to_direct": [20, 318, 376, 377, 392, 394, 456], "represent": [20, 47, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 196, 210, 236, 238, 241, 318, 454, 456, 467], "dg": [20, 225, 241], "dgv": 20, "as_view": [20, 352, 353, 456], "shallow": 20, "out_edg": [20, 333, 456], "in_degre": [20, 229, 231, 308, 310, 313, 316, 387, 413, 414, 456], "predecessor": [20, 326, 399, 450, 456], "successor": [20, 293, 326, 393, 394, 399, 456], "out_degre": [20, 387, 413, 414, 456], "feel": [20, 37, 203], "inconsist": [20, 244], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 220, 229, 241, 247, 308, 313, 378, 379, 380, 381, 383, 385, 389, 392, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 410, 412], "to_undirect": [20, 318, 392, 394, 456], "theoret": 20, "load_ldbc": [20, 222, 467, 487], "foo": [20, 456], "famou": [22, 23, 455], "hadoop": [22, 469], "stop": [22, 27, 30, 45, 55, 121, 125, 191, 192, 200, 238, 242, 246, 321], "open": [22, 36, 37, 192, 211, 221, 223, 229, 240, 243, 316, 458, 468, 469], "actual": [22, 23, 28, 45, 47, 191, 211, 218, 220, 222, 229, 250, 252, 309, 407, 456, 459, 467, 477], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 318], "p2pvertexinputformat": 22, "eformat": [22, 318], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33], "graphscope_sess": [22, 318], "31": [22, 23, 206, 235, 306, 307, 309, 489], "v_prop": [22, 246, 280], "vdata": 22, "e_prop": [22, 246, 280], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 193, 321], "toward": [22, 469], "offici": [22, 209, 211, 212, 221, 240], "pl": 22, "snapshot": [22, 218, 243, 465, 469], "writabl": 22, "degrad": [22, 243], "procedur": [22, 29, 44, 45, 49, 54, 100, 121, 124, 170, 191, 192, 193, 196, 197, 199, 201, 209, 210, 222, 257, 398], "except": [22, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 196, 203, 221, 228, 231, 232, 235, 237, 242, 309, 316, 334, 351, 355, 366, 375, 385, 387, 436, 456, 463, 468, 483], "right": [22, 215, 217, 220, 235, 314, 357, 366, 368, 389, 454], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 51, 192, 206, 210, 225, 239, 241, 243, 244, 378], "proceed": [23, 27, 193, 378, 396], "side": [23, 37, 210, 220, 221, 247, 266, 306, 359, 468], "venv": [23, 212, 237], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 44, 45, 51, 192, 193, 198, 211, 212, 221, 222, 236, 237, 330, 469, 477, 481, 487], "pyspark_venv_g": 23, "tar": [23, 29, 31, 469], "gz": [23, 31, 458, 469], "upload": [23, 209], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 236, 467, 487], "oss": [23, 29, 31, 235, 246, 311, 318, 469, 479, 480, 489], "beij": [23, 29, 31, 226, 241, 305, 469, 480], "fixm": 23, "yuansi": 23, "env": [23, 203, 212, 233, 237, 311], "var": [23, 33, 38, 203, 235, 316, 469, 477, 489], "gs_jar": 23, "l": [23, 29, 35, 198, 229, 241, 308, 376, 377, 379, 380, 381, 388, 389, 390, 392, 393, 394, 397, 404, 405, 406, 407, 409, 413, 414, 415, 416, 445, 448, 456, 476, 477], "lib": [23, 31, 121, 194, 211, 255, 469], "7077": 23, "master_url": 23, "conf": [23, 44, 45, 193, 211, 221, 246, 469, 487], "executor": [23, 35, 38, 48, 209, 211, 236, 319, 477], "driver": [23, 27, 121, 191, 196, 216, 221, 235, 283, 318, 469, 487], "2g": 23, "10g": [23, 481], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 215], "url": [23, 93, 163, 192, 211, 318, 319, 469, 487], "rdd": 23, "classifi": [23, 226, 228, 232, 237, 241, 316, 479], "maven": [23, 49, 251, 469, 479], "conflict": [23, 212, 222, 228, 318, 446, 469], "correctli": [23, 37, 203, 225, 321, 469], "resolv": [23, 28, 203, 235, 318, 470], "goal": [23, 196, 201, 210, 215, 226, 238, 241, 468], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 202, 210, 362, 469], "config": [23, 27, 28, 31, 48, 200, 209, 211, 221, 233, 281, 291, 303, 304, 317, 320, 460, 463, 465, 469, 470, 476, 487, 488], "socket": [23, 28, 30, 211, 246, 470], "bound": [23, 47, 192, 220, 222, 240, 282, 375, 463, 468, 471], "vineyardsock": 23, "filepath": 23, "sock": [23, 28, 211], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 51, 193, 198, 199, 209, 211, 216, 240, 247], "grow": [24, 196, 206, 225, 236, 375, 385, 392, 393, 394, 455, 468], "capac": [24, 33, 211, 456, 463], "indivis": 24, "succinctli": [24, 194], "oppos": [24, 229], "orient": [24, 229, 243, 313, 469], "googl": [24, 35, 239, 481], "powergraph": [24, 243, 244], "wa": [24, 29, 30, 37, 198, 217, 220, 222, 238, 244, 310, 321, 375, 390, 403, 404, 405, 406, 455, 469], "2010": [24, 244, 247, 321, 381, 448, 453], "sequenc": [24, 194, 215, 220, 222, 247, 318, 355, 375, 385, 386, 387, 388, 389, 390, 391, 407, 413, 414, 417, 450, 451, 456, 457, 470], "conceptu": [24, 217], "behavior": [24, 44, 192, 220, 222, 235, 249, 463], "becom": [24, 198, 206, 217, 222, 229, 456, 468, 469], "inact": 24, "again": [24, 203, 235, 471, 476], "termin": [24, 36, 193, 214, 476], "halt": [24, 240, 249, 395], "individu": [24, 209, 211, 217, 232, 237], "messageiter": [24, 249], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 226, 229, 305, 316, 321, 418, 470], "getvalu": [24, 202], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 203, 469], "dramat": 24, "face": [24, 31, 210, 222, 239, 441, 442], "power": [24, 121, 191, 198, 215, 216, 220, 222, 225, 240, 247, 321, 375, 385, 433, 456], "law": [24, 375, 385], "gather": [24, 463], "scatter": [24, 306], "accumul": [24, 229, 450], "workload": [27, 36, 196, 206, 208, 210, 211, 219, 222, 225, 236, 238, 244, 469, 471, 472], "grpc": [27, 28, 31, 203, 246, 480, 482], "linux": [27, 30, 31, 36, 195, 209, 228, 244, 251, 486], "maco": [27, 30, 36, 195, 203, 212, 480, 482, 483, 486], "skip": [27, 31, 35, 240, 251, 469], "minikub": [27, 30, 469], "instruct": [27, 29, 30, 33, 37, 193, 196, 198, 209, 211, 212, 213, 214, 221, 237, 240, 246, 259, 310], "platform": [27, 32, 37, 42, 208, 209, 210, 228, 242, 243, 244, 251, 305, 447, 463], "desktop": [27, 469, 483], "server": [27, 29, 48, 52, 90, 91, 100, 122, 160, 161, 170, 191, 192, 210, 211, 214, 218, 221, 223, 225, 229, 234, 236, 238, 240, 245, 309, 314, 315, 316, 469, 481, 487], "kubectl": [27, 29, 30, 33, 38, 48, 203, 209, 469, 477, 482], "kube": [27, 463], "apivers": [27, 33, 233], "v1": [27, 33, 35, 52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 203, 220, 222, 228, 231, 232, 233, 237, 240, 304, 421, 434, 459, 482, 483, 488], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 222, 310, 315, 318, 378, 450, 477], "16": [27, 31, 209, 211, 222, 244, 304, 306, 307, 309, 311, 412, 435, 449, 488], "2023": [27, 217, 477], "44": [27, 48, 244, 306, 307, 309, 449], "05": [27, 383, 396], "cst": 27, "sig": [27, 479, 486], "28": [27, 220, 222, 226, 241, 244, 306, 307, 309, 453], "cluster_info": 27, "172": [27, 244], "21": [27, 31, 206, 222, 244, 247, 306, 307, 309, 429, 469], "67": [27, 244, 247], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 233, 463], "profil": [27, 487], "encapsul": [27, 51, 193, 198, 225, 226, 304, 310, 463], "entranc": [27, 310], "tag": [27, 41, 48, 220, 222, 244, 383, 463, 469, 481], "intranet": 27, "internet": [27, 29, 31, 214, 222, 239, 453, 455], "might": [27, 44, 47, 193, 203, 321, 413, 456, 472], "k8s_image_registri": [27, 33, 463], "k8s_image_repositori": [27, 463], "k8s_image_tag": [27, 33, 233, 463], "fit": [27, 196, 206, 209, 230, 231, 251], "increas": [27, 38, 44, 203, 206, 306, 354, 355, 363, 385, 387, 395, 413, 416, 418, 468], "cpu": [27, 192, 203, 209, 233, 234, 311, 463, 472, 482], "num_work": [27, 28, 33, 233, 234, 303, 463, 487], "k8s_engine_cpu": [27, 303, 463], "32": [27, 220, 244, 306, 307, 309, 317, 321, 467], "k8s_engine_mem": [27, 203, 233, 303, 463, 482], "256gi": 27, "vineyard_shared_mem": [27, 203, 233, 303, 463, 482], "preexist": [27, 217], "k8s_client_config": [27, 463], "disk": [27, 196, 203, 209, 236, 469], "test_data": [27, 228, 232, 237, 480, 483], "testingdata": [27, 30, 33, 480, 483], "k8s_volum": [27, 30, 33, 303, 463, 480, 483], "constructor": [27, 235, 356, 358, 359, 361, 363, 365, 366, 368, 370, 371, 374, 385, 387, 388, 390, 392, 393, 394, 396, 400, 401, 402, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 451, 458], "vm": [27, 30, 246], "copi": [27, 29, 30, 209, 236, 238, 243, 264, 321, 328, 332, 334, 335, 393, 399, 454, 456, 459, 467, 468, 469, 470, 471], "hostpath": [27, 30, 33, 48, 209, 463, 480, 483], "expandus": [27, 480, 483], "mountpath": [27, 30, 33, 233, 463, 480, 483], "expect": [27, 34, 37, 49, 203, 235, 251, 385, 387, 389, 459, 463], "monitor": [27, 29, 225], "wait": [27, 93, 203, 463], "finish": [27, 202, 221, 231, 249, 306, 309, 469], "remov": [27, 29, 90, 91, 121, 160, 161, 191, 200, 217, 220, 222, 247, 251, 311, 328, 334, 336, 382, 385, 387, 389, 431, 434, 450, 456, 469], "remain": [27, 196, 198, 215, 220, 235, 239, 305, 310, 390, 417], "statefulset": [27, 469], "svc": [27, 48, 209], "left": [27, 36, 44, 215, 217, 220, 247, 318, 321, 357, 389], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 470], "0000": [28, 206, 222], "rpc_port": 28, "9600": 28, "sai": [28, 41], "configmap": [28, 233], "mount": [28, 30, 33, 45, 203, 210, 235, 315, 463, 480, 482, 483], "ideal": [29, 37, 47, 196, 243], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 48, 203, 209, 211, 222, 469, 480, 482], "minut": [29, 203, 210], "succe": 29, "past": [29, 47, 210, 471], "noteport": 29, "node_ip": [29, 469], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 233, 246, 316], "nodeport": [29, 233, 463, 469, 483], "echo": [29, 31], "listen": [29, 44, 48, 121, 191, 196, 211, 246], "statement": [29, 310, 469], "ident": [29, 248, 264, 352, 353, 357, 428, 448, 450, 456], "reconnect": [29, 463], "disconnect": [29, 321, 397, 398, 413, 416, 463, 476], "sess2": 29, "comment": [29, 37, 206, 214, 215, 222, 235, 305, 456, 458, 459, 467, 484, 489], "homepag": 29, "remot": [29, 36, 121, 221, 233, 234, 251, 319, 463, 487], "cater": [29, 236], "tgz": 29, "unzip": [29, 195, 213, 214, 221, 487], "zxvf": 29, "bundl": [30, 463], "aliv": 30, "reserv": 30, "simplifi": [30, 42, 51, 209, 236, 237, 238, 240, 242, 305, 310, 468], "etcd": [30, 203, 209, 463, 465, 480], "replica": [30, 209, 233], "etcd_replica": 30, "greater": [30, 33, 215, 220, 247, 306, 321, 375, 406, 463, 468], "ag": [30, 33, 46, 47, 161, 192, 210, 217, 218, 220, 222, 226, 241, 304, 305, 318, 462, 477, 487, 488], "33": [30, 196, 220, 306, 307, 309, 446, 449], "vineyardd": [30, 33, 211], "vineyardctl": [30, 463], "v6d": [30, 31, 209, 235, 463], "blob": [30, 203, 479], "cmd": [30, 246, 463], "readm": [30, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 251], "md": [30, 316], "notic": [30, 33, 209, 218, 222, 236, 310, 318, 449, 456, 463, 471], "charact": [30, 46, 447, 452, 458], "vineyard_deploy": 30, "restart": [30, 44, 51, 55, 121, 125, 191, 192, 198, 200, 477], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 303, 463], "k8s_vineyard_deploy": [30, 33, 303, 463], "reload": [30, 469], "vineyard_id": [30, 33, 318, 477], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 246, 318, 463, 468, 470], "softwar": [30, 33, 46, 90, 160, 192, 209, 212, 217, 220, 225, 236, 318, 470], "successfulli": [30, 90, 91, 100, 160, 161, 170, 192, 195, 211, 214, 226, 231, 375, 469], "folder": [31, 38, 45, 195, 200, 233, 235, 468], "cento": [31, 32, 203, 212, 244, 482, 486], "82": [31, 244], "boost": [31, 225, 236, 246], "perl": 31, "v3": [31, 240, 244], "24": [31, 161, 209, 222, 244, 306, 307, 309, 423, 441, 449], "openmpi": [31, 244], "gflag": 31, "glog": [31, 217], "arrow": [31, 46, 202, 246, 258, 271, 318, 459], "74": [31, 244, 447], "openssl": [31, 203, 482], "zlib": 31, "protobuf": 31, "49": [31, 222, 244, 306, 307, 309], "13": [31, 35, 222, 244, 305, 306, 307, 309, 361, 402], "libclang": 31, "curl": [31, 49, 221], "lo": [31, 221], "czf": 31, "mkdir": [31, 203, 316, 482], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 202], "y": [31, 32, 222, 233, 234, 247, 402, 403, 407], "devtoolset": 31, "python38": 31, "opt": [31, 36, 44, 198, 210, 211, 227, 316], "bash": [31, 220, 233, 477, 481], "euxo": 31, "pipefail": 31, "dir": [31, 469], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 481], "manylinux2010_x86_64": 31, "whl": [31, 311, 314], "x86_64": [31, 195, 233], "sh": [31, 35, 221, 311, 469, 487], "licens": [31, 481], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 305], "program_opt": 31, "regex": [31, 220], "chrono": 31, "atom": [31, 469], "date_tim": [31, 47], "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 67, 87, 106, 192], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 210, 236, 441, 469], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 246], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 195, 203, 209, 212, 311, 480, 482, 486], "04": [32, 203, 209, 212, 222, 244, 311, 480, 482, 486], "intel": [32, 212, 480, 482, 486], "appl": [32, 203, 212, 456, 480, 482, 486], "silicon": [32, 212, 480, 482], "jdk": [32, 209, 212, 224, 473, 479], "wheel": [32, 203, 374, 440, 482, 485], "manylinux2014": [32, 481], "abi": 32, "wish": [32, 37, 44, 193, 198], "nightli": [32, 203, 482], "tidi": 32, "quickli": [32, 36, 196, 225, 237, 240, 241, 243, 316, 463], "insid": [32, 38, 46, 203, 220, 222, 247, 255, 305, 317, 318, 431, 462, 463, 487], "apt": [32, 311], "ipython": 32, "tensorflow": [32, 225, 226, 228, 231, 232, 236, 237, 241, 242, 304, 305, 306, 309, 310, 312, 316, 483], "tool": [32, 35, 36, 45, 193, 196, 201, 206, 209, 216, 223, 225, 227, 236, 403, 405, 465, 468, 469, 470, 486], "dep": [32, 35, 476, 480, 481], "fly": [32, 196, 237], "clang": [32, 35, 212, 481], "essenti": [32, 46, 47, 203, 215, 220, 225, 240, 242], "arm": 32, "preliminari": 32, "yet": [32, 121, 191, 195, 213, 220, 248, 413, 416, 456, 462, 469], "calcul": [33, 210, 217, 220, 222, 247, 249, 307, 321, 375, 407], "period": [33, 469], "restor": [33, 463, 469], "persistentvolum": [33, 469], "dump": [33, 247, 283], "cat": [33, 233, 234, 469, 477], "eof": 33, "metadata": [33, 45, 46, 103, 173, 192, 198, 200, 203, 233, 246, 318, 456, 465, 469], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 463], "persistentvolumeclaim": [33, 463, 469], "matchlabel": 33, "request": [33, 49, 121, 191, 203, 235, 246, 275, 306, 314, 317, 319, 350, 456, 463, 469, 482], "extern": [33, 37, 45, 229, 236, 463, 469], "ccc": 33, "sub_graph": [33, 218, 237, 483, 484], "haslabel": [33, 206, 212, 218, 222, 237, 487], "simple_g": [33, 237, 479, 483], "pr_result": 33, "tc_result": 33, "add_column": [33, 237, 246, 318, 479, 483, 484], "tc": [33, 237, 483], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 52, 54, 65, 90, 91, 100, 105, 463], "pvc_name": [33, 463], "schema": [33, 45, 46, 52, 62, 64, 84, 121, 122, 132, 191, 192, 196, 200, 202, 210, 211, 214, 216, 217, 218, 222, 231, 232, 235, 247, 305, 306, 315, 318, 456, 465, 467, 468, 469, 470, 484, 487, 489], "oid_typ": [33, 235, 246, 247, 275, 297, 318, 463, 489], "ulong": 33, "lang": [33, 35, 46, 192, 212, 214, 217, 237, 319], "eid": [33, 202, 214, 318, 469], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 44, 210, 216, 236, 240, 242, 243], "behind": [34, 231, 468, 471, 476, 477], "scene": [34, 210, 231, 313], "lower": [34, 210, 220, 222, 240, 375, 382, 395], "cost": [34, 210, 222, 236, 240, 321, 469], "ownership": 34, "cach": [34, 193, 226, 233, 239, 243, 456], "layout": [34, 239, 469], "were": [34, 37, 222, 244, 407, 469], "outperform": [34, 225, 239, 241, 242, 243], "art": [34, 225, 239, 242, 244], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 196, 198], "promot": 35, "readabl": [35, 51, 220, 456], "qualiti": [35, 37, 241], "black": [35, 481], "enforc": 35, "rule": [35, 44, 198, 210, 222, 229, 239, 308, 314, 318, 355, 465], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 208, 233, 480, 481], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 211, 221], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 227], "devcontain": 36, "json": [36, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 209, 211, 463, 465, 469, 470], "setup": [36, 37, 191, 203, 318, 463, 481], "visual": [36, 37, 196, 236], "studio": 36, "collabor": [36, 236, 468], "stabl": [36, 247, 318, 465, 469, 486], "haven": [36, 195, 222], "navig": [36, 468, 476], "icon": 36, "bottom": [36, 366], "corner": 36, "window": [36, 222, 486], "reopen": 36, "marketplac": 36, "prompt": [36, 51, 214, 221], "shift": [36, 215, 220, 222, 321, 421], "ctrl": 36, "made": [36, 37, 44, 193, 209, 229, 244, 305, 308, 314, 321, 416, 468], "rebuild": 36, "subcommand": [36, 227], "assembli": [36, 211], "learning_engin": 36, "graphlearn": [36, 38, 226, 228, 231, 232, 233, 237, 304, 305, 306, 310, 311, 316, 317, 320, 463, 477, 483, 488], "compos": [36, 38, 194, 217, 226, 229, 237, 239, 243], "alon": [36, 210, 218, 476], "circul": [36, 359], "edit": [36, 37, 214, 402, 439, 476], "entrypoint": [36, 476, 483], "plai": [36, 210, 224, 245, 315, 320, 473], "thank": [37, 196, 206, 214, 236], "interest": [37, 222, 225, 239, 469], "focus": [37, 217, 222, 236, 242, 244, 310, 448, 469], "eager": [37, 247, 248, 297, 299, 318, 463], "contributor": [37, 449], "welcom": [37, 192, 193], "engag": [37, 236, 237], "good": [37, 196], "particip": [37, 44], "join": [37, 44, 215, 217, 222, 233, 306, 316, 357, 360, 368, 375, 384, 385, 398, 400, 403, 404, 405, 406, 407, 415, 416, 456, 468], "ask": [37, 208], "question": [37, 208, 216, 222, 482], "ve": [37, 45, 193, 198, 209, 213, 221, 236], "hasn": [37, 222], "confirm": 37, "concis": [37, 217, 218, 240, 319], "descript": [37, 46, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 198, 200, 209, 210, 215, 217, 220, 229, 233, 235, 305, 308, 313, 314, 318, 413, 421, 469], "relev": [37, 44, 45, 311, 350, 456, 467], "reproduc": [37, 456], "yourself": 37, "why": [37, 203, 222, 247], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 206, 214, 226, 241, 312], "submiss": 37, "fact": [37, 210, 214, 217, 413, 416], "page": [37, 45, 193, 208, 238, 247, 250, 252, 366, 381, 445, 485], "button": [37, 214], "tbf": [37, 207, 244, 464, 475, 478], "isn": [37, 200, 218, 309], "someon": 37, "approach": [37, 196, 214, 218, 225, 226, 236, 238, 240, 241, 309, 385, 398, 453, 468], "spend": 37, "secret": [37, 235, 463, 480, 489], "accident": 37, "hook": 37, "titl": [37, 45, 222, 232, 237], "grammar": 37, "spell": 37, "500": [37, 52, 54, 55, 90, 91, 100, 122, 124, 125, 160, 161, 170, 192, 375], "word": [37, 198, 222, 232, 237, 240, 241, 316, 318, 456], "42": [37, 222, 244, 306, 307, 309, 379, 381, 391, 449], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 240], "patch": 37, "rest": [37, 42, 48, 49, 122, 123, 124, 125, 160, 161, 170, 201, 456, 469], "attain": 37, "brief": [37, 205], "valid": [37, 210, 231, 232, 241, 254, 304, 351, 375, 397, 403, 452, 463, 465], "typo": 37, "feat": 37, "inv": [37, 310, 316, 487], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 469], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 321, 456], "insight": [37, 206, 239, 241, 476], "feedback": [37, 206], "discourag": 37, "rebas": 37, "workflow": [37, 206, 236, 241, 242, 246], "upstream": [37, 310], "leas": 37, "ping": [37, 479], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 201, 208, 449], "approv": 37, "date": [37, 47, 215, 222, 467, 468, 469], "todo": [37, 48, 100, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 215, 217, 233, 234, 314], "dongz": 37, "potenti": [37, 194, 196, 226, 236, 468], "concern": [37, 236, 243, 468], "reach": [37, 203, 218, 222, 240, 310, 315, 318, 321, 398, 413, 416, 468], "action": [37, 193, 200], "realiti": [37, 310], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 235, 463, 469], "failur": [37, 243], "stream": [38, 203, 209, 220, 221, 222, 226, 310, 315, 318], "stdout": 38, "log_level": [38, 44, 233, 303], "permiss": [38, 47, 203, 255, 482], "consol": [38, 196, 209, 211, 214, 223, 225, 235, 240, 319, 469, 485], "frontend": [38, 39, 48, 209, 211, 212, 213, 221, 469, 477], "event": [38, 375], "involvedobject": 38, "warn": [38, 456], "pinpoint": 38, "exec": [38, 469, 477], "diagnost": 38, "forward": [38, 196, 226, 228, 229, 231, 232, 237, 241, 310, 469, 483], "browser": [38, 222], "explain": [38, 222, 305, 463, 468, 487], "leverag": [39, 121, 216, 218, 224, 225, 238, 240, 251, 448, 465, 469, 473], "opentelemetri": 39, "javaag": 39, "agent": 39, "protocol": [39, 213, 216, 235, 243, 463], "java_tool_opt": 39, "TO": 39, "otel_service_nam": 39, "compris": [41, 45, 215, 218, 232, 236, 309], "busi": [41, 210, 222, 226, 235, 236, 237, 243], "e2": [41, 435], "coupl": [41, 238, 243, 436, 465], "entri": [42, 200, 210, 220, 222, 229, 231, 320, 321, 368, 385, 387, 388, 413, 415, 416, 434, 476], "swagger": 42, "shield": 42, "understand": [42, 45, 46, 222, 229, 240, 304, 310, 318, 468], "straightforward": [44, 212, 237], "gs_interact": [44, 45, 51, 193, 198, 200], "tailor": [44, 192], "align": [44, 45, 46, 47, 62, 132, 193, 198, 210, 220, 229, 240, 304, 307, 308, 407, 468], "engine_config": [44, 192, 463], "unconfigur": 44, "glimps": 44, "what": [44, 193, 198, 203, 209, 222, 223, 240, 315, 402, 456, 462, 468], "compute_engin": 44, "thread_num_per_work": 44, "planner": [44, 198], "is_on": 44, "rbo": [44, 210], "filtermatchrul": 44, "filterintojoinrul": 44, "notexisttoantijoinrul": 44, "query_timeout": 44, "20000": 44, "timeout": [44, 203, 211, 212], "millisecond": [44, 47, 215, 220, 244, 467], "default_listen_address": 44, "localhost": [44, 211, 213, 221, 233, 235, 463, 489], "bolt_connector": [44, 196], "cypher": [44, 45, 48, 49, 67, 87, 100, 106, 121, 170, 191, 192, 198, 199, 201, 209, 210, 211, 212, 214, 216, 217, 236, 237, 238, 242, 243, 319, 463], "7687": [44, 48, 193, 196, 209, 211, 213, 214], "gremlin_connector": [44, 196], "8182": [44, 48, 209, 211, 221, 469], "http_servic": 44, "admin_port": 44, "7777": [44, 48], "query_port": [44, 192], "10000": [44, 48, 453], "hierarchi": [44, 46], "propertynam": [44, 59, 69, 88, 469], "databas": [44, 45, 194, 196, 199, 203, 210, 215, 216, 217, 220, 222, 236, 238, 240, 242, 244, 469, 479], "debug": [44, 203, 233, 305, 310, 463, 469, 477], "default_graph": 44, "benefit": [44, 217, 221, 235, 239, 468], "throughput": [44, 48, 196, 201, 210, 236, 242, 243, 469], "claus": [44, 196, 216, 217], "calcit": [44, 209, 217], "notmatchtoantijoinrul": 44, "transform": [44, 51, 210, 217, 222, 246, 258, 271, 448, 456, 457, 461, 467], "anti": [44, 215, 217, 236, 240, 243], "bind": [44, 247, 468], "admin": [44, 48, 49, 192, 196, 199, 318, 469], "submit": [44, 100, 170, 192, 193, 196, 197, 210, 213, 214, 220, 221, 222, 237, 240, 305, 306, 319, 465, 469, 483], "movi": [45, 198, 238, 306], "interactive_hom": [45, 195], "destroi": [45, 200], "csv": [45, 48, 201, 206, 209, 214, 235, 318, 456, 459, 467, 469, 470, 483, 484, 489], "volum": [45, 48, 193, 200, 203, 209, 217, 221, 233, 379, 380, 381, 391, 400, 445, 463, 468], "crucial": [45, 47, 51, 192, 236], "conclud": [45, 304], "reflect": [45, 220, 468, 476], "v0": [45, 48, 244, 311, 459], "vertex_typ": [45, 47, 136, 155, 192], "type_nam": [45, 46, 47, 126, 130, 133, 140, 149, 153, 159, 187, 189, 192], "property_nam": [45, 47, 129, 139, 158, 192, 222, 248, 249, 462], "property_typ": [45, 47, 129, 139, 158, 192], "primitive_typ": [45, 47, 152, 167, 192], "dt_signed_int64": [45, 47, 82, 96, 192], "dt_signed_int32": [45, 47, 82, 96], "taglin": 45, "long_text": [45, 47, 164, 178, 192], "primary_kei": [45, 47, 130, 140, 159, 192, 469], "born": 45, "acted_in": 45, "vertex_type_pair_rel": [45, 47, 126, 133, 153, 192], "source_vertex": [45, 46, 47, 127, 147, 190, 192], "destination_vertex": [45, 46, 47, 127, 147, 190, 192], "many_to_mani": [45, 47, 57, 192], "review": [45, 236, 247, 321, 385, 403], "wrote": 45, "dt_unsigned_int32": [45, 47, 82, 96], "dt_unsigned_int64": [45, 47, 82, 96], "dt_bool": [45, 47, 82, 96], "dt_float": [45, 47, 82, 96], "dt_doubl": [45, 47, 82, 96, 192], "comprehens": [45, 121, 191, 192, 196, 198, 200, 236, 242, 244, 245], "administr": [45, 192, 193, 199, 201, 433], "loading_config": [45, 46, 171, 192], "data_sourc": [45, 46, 192], "odp": [45, 201, 305], "import_opt": [45, 46, 172, 192], "append": [45, 202, 222, 231, 232, 233, 234, 237, 249, 304, 315, 316, 387, 450, 483, 488], "overwrit": [45, 46, 102, 200, 463, 469], "delimit": [45, 46, 209, 318, 458, 470, 484], "edge_map": [45, 46, 143, 171, 192], "type_triplet": [45, 46, 143, 192], "column_map": [45, 46, 132, 143, 187, 192], "consult": [45, 196], "graph_algo": 45, "flex": [45, 121, 196, 201, 476], "delv": [46, 192], "deeper": 46, "thorough": 46, "examin": [46, 217, 237], "modern_import_ful": 46, "showcas": 46, "dissect": 46, "header_row": [46, 209, 318, 470], "quot": 46, "quote_char": 46, "double_quot": 46, "escape_char": 46, "block_siz": 46, "4mb": 46, "person_knows_person": [46, 469], "source_vertex_map": [46, 143, 192], "destination_vertex_map": [46, 143, 192], "person_created_softwar": 46, "dd_graph": 46, "your_proj_nam": 46, "table_nam": 46, "partition_col_nam": 46, "partition_nam": 46, "src_user_id": 46, "dst_user_id": 46, "mandatori": [46, 47, 237, 305], "ye": [46, 206, 456], "No": [46, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192, 203, 220, 456], "header": [46, 209, 318, 468, 469], "escap": 46, "batch_siz": [46, 229, 231, 233, 234, 304, 308, 309, 310, 313, 316, 472, 488], "triplet": [46, 47, 218], "outlin": [46, 211, 215], "seamlessli": [46, 121, 191, 193, 206, 209, 216, 223, 225, 236, 242, 243], "encompass": [47, 213, 217, 221, 232], "friendship": 47, "peopl": [47, 210, 214, 222, 456, 469], "since_d": 47, "explan": [47, 192, 196, 247, 308], "terminologi": [47, 215], "delin": 47, "plan": [47, 100, 170, 196, 210, 215, 236, 238, 239, 240, 251, 469, 477], "var_char": [47, 178, 184], "fixed_char": [47, 150, 151], "character": [47, 308], "exclus": [47, 51, 215], "symbol": 47, "skill": 47, "profici": [47, 222], "one_to_on": [47, 57], "one_to_mani": [47, 57, 192], "many_to_on": [47, 57], "x_csr_param": [47, 127, 130, 140, 159], "max_vertex_num": [47, 131], "mmap": 47, "48": [47, 206, 244, 306, 307, 309, 408, 409, 455], "edge_storage_strategi": [47, 128], "only_in": [47, 58], "only_out": [47, 58], "both_out_in": [47, 58], "pertain": [47, 209], "categor": [47, 196, 229], "subtyp": 47, "length": [47, 121, 202, 206, 215, 220, 222, 235, 240, 247, 308, 321, 360, 362, 367, 389, 410, 414, 420, 442, 451, 456, 489], "unlimit": 47, "text": [47, 100, 170, 241, 249, 357], "char": [47, 150, 178, 315, 318, 468], "fixed_length": 47, "desir": [47, 218, 318, 375, 397, 417, 419, 420], "restrict": 47, "max_length": [47, 185], "uint32": [47, 215], "situat": [47, 220, 222, 225, 305, 306, 469], "df_yyyy_mm_dd": 47, "iso": 47, "fomat": 47, "2019": [47, 449], "01": [47, 222, 228, 232, 234, 237, 247, 305, 321, 380, 483], "date_format": 47, "tf_hh_mm_ss_sss": 47, "00": [47, 222], "000": [47, 209, 222, 244], "time_format": 47, "tzf_utc": 47, "tzf_offset": 47, "time_zone_format": 47, "dtf_yyyy_mm_dd_hh_mm_ss_sss": 47, "date_time_format": 47, "date32": [47, 71, 110, 141, 180], "int32": [47, 215, 228, 232, 237, 305, 307, 315, 316, 467, 483], "1970": 47, "time32": 47, "midnight": 47, "timestamp": [47, 110, 111, 180, 181, 467, 469], "int64": [47, 215, 235, 249, 275, 297, 305, 307, 308, 313, 315, 316, 318, 463, 467, 489], "000000": 47, "zone": [47, 215], "signifi": [47, 340, 341], "integ": [47, 61, 76, 79, 81, 83, 84, 86, 87, 88, 89, 93, 104, 115, 119, 120, 215, 220, 321, 356, 359, 360, 361, 362, 363, 365, 367, 368, 370, 371, 374, 375, 378, 379, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 434, 448, 449, 450, 451, 453, 456, 467, 469], "januari": 47, "timezon": 47, "albeit": 47, "previous": [47, 198, 222, 255, 392, 393, 394, 467, 468], "mention": [47, 220, 222, 467, 468, 477], "component_typ": 47, "overflow": 47, "truncat": [47, 441, 442, 443, 448], "bolt": [48, 193, 196, 211, 213, 214, 240], "grep": [48, 209], "awk": [48, 209], "192": 48, "168": [48, 244], "pvc": [48, 209, 463, 469], "higher": [48, 210, 242, 321, 331, 395, 469], "nf": [48, 203, 315, 482], "dataload": [48, 52, 53, 121, 122, 123, 191, 192, 233, 234], "pv": [48, 203, 209, 463, 469, 482], "vim": 48, "someth": [48, 212, 456], "claim": [48, 209, 438, 468, 469], "emptydir": [48, 233], "existingclaim": 48, "replicacount": [48, 209, 469], "num": [48, 202, 211, 221, 222, 317, 468], "gremlinport": [48, 104, 209], "hiactor": [48, 236], "hiactorworkernum": 48, "hiactortimeout": 48, "240000": [48, 211], "craft": [49, 196, 198], "listgraph": [49, 121], "graphmanag": 49, "categori": [49, 215, 220, 226, 228, 229, 237, 241, 316], "getgraphstatist": 49, "creategraph": [49, 121], "deletegraph": [49, 121], "getgraphschema": 49, "getgraphmeta": 49, "importgraph": 49, "createprocedur": [49, 121], "proceduremanag": 49, "listallprocedur": 49, "getprocedur": [49, 121], "updateprocedur": [49, 121], "deleteprocedur": [49, 121], "startservic": [49, 121], "servicemanag": 49, "restartservic": [49, 121], "stopservic": [49, 121], "servicestatu": [49, 55, 121, 125, 191], "systemmetr": 49, "nodemetr": 49, "getjobbyid": [49, 121], "jobmanag": 49, "getalljob": 49, "canceljobbyid": 49, "adminservic": 49, "setuptool": 49, "intric": [51, 192, 222], "inspir": [51, 251, 456], "neo4j": [51, 121, 193, 194, 196, 198, 208, 209, 211, 212, 213, 214, 215, 238, 243, 244, 319, 467], "empow": [51, 216, 223, 240], "skeleton": [51, 424, 427, 441, 442], "param_nam": [51, 196], "clariti": [51, 215], "mandat": 51, "hous": [51, 236, 430, 431], "personid": 51, "draft": 51, "query1": 51, "firstnam": [51, 222, 235, 467, 484, 489], "lastnam": [51, 222, 235, 467, 484, 489], "intrins": 51, "absenc": 51, "imper": [51, 220, 240], "subsequ": [51, 193, 198, 209, 210, 211, 217, 221, 247, 305, 306], "1l": [51, 198, 220], "conclus": [51, 222], "effortlessli": [51, 237], "streamlin": [51, 217, 220], "uri": [52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 213, 235, 318, 467, 489], "interactive_endpoint": [52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192], "post": [52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191, 192, 203, 222, 235, 310, 375, 489], "graph_id": [52, 53, 54, 90, 91, 100, 121, 122, 123, 124, 135, 160, 161, 170, 175, 191, 192, 463], "statist": [52, 122, 192, 210, 217, 222, 307], "jobrespons": [52, 121, 122, 191], "schemamap": [52, 84, 121, 122, 154, 191], "openapi": [52, 53, 54, 55, 90, 91, 100, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "apicli": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 463], "apiexcept": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170], "defaultcli": [52, 53, 54, 55, 90, 91, 100], "getdefaultapicli": [52, 53, 54, 55, 90, 91, 100], "setbasepath": [52, 53, 54, 55, 90, 91, 100], "apiinst": [52, 53, 54, 55, 90, 91, 100], "graphid_exampl": [52, 54, 90, 91, 100], "println": [52, 53, 54, 55, 90, 91, 100, 121, 469], "catch": [52, 53, 54, 55, 90, 91, 100, 469], "err": [52, 53, 54, 55, 90, 91, 100, 334], "getcod": [52, 53, 54, 55, 90, 91, 100], "getresponsebodi": [52, 53, 54, 55, 90, 91, 100], "getresponsehead": [52, 53, 54, 55, 90, 91, 100], "printstacktrac": [52, 53, 54, 55, 90, 91, 100], "200": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192, 222, 304, 462, 472, 488], "creategraphrespons": [52, 121, 122, 191], "creategraphrequest": [52, 121, 122, 191], "400": [52, 54, 90, 91, 122, 124, 160, 161, 192, 462], "badrequest": [52, 122], "Not": [52, 53, 54, 55, 90, 91, 122, 123, 124, 125, 160, 161, 192, 196, 217, 456, 469], "404": [52, 54, 90, 91, 122, 124, 160, 161, 192], "getgraphrespons": [52, 104, 121, 122, 174, 191], "getgraphstatisticsrespons": [52, 122], "503": [52, 122], "unavail": [52, 122], "getgraphschemarespons": [52, 84, 121, 122, 154, 191], "job_id": [53, 121, 123, 162, 191, 192], "jobid": [53, 92], "jobid_exampl": 53, "jobstatu": [53, 121, 123, 191], "procedure_id": [54, 121, 124, 138, 191, 192], "createprocedurerespons": [54, 121, 124, 191], "createprocedurerequest": [54, 64, 121, 124, 134, 191], "bad": [54, 90, 91, 124, 160, 161], "procedureid": [54, 68], "procedureid_exampl": 54, "getprocedurerespons": [54, 84, 121, 124, 154, 191], "updateprocedurerequest": [54, 121, 124, 191], "startservicerequest": [55, 121, 125, 191], "vertextypepairrel": [56, 63, 83], "baseedgetypevertextypepairrelationsinn": [56, 63, 83, 121, 126, 133, 153, 191], "sourcevertex": [57, 77, 120], "destinationvertex": [57, 77, 120], "xcsrparam": [57, 60, 70, 89], "baseedgetypevertextypepairrelationsinnerxcsrparam": [57, 121, 127, 191], "edgestoragestrategi": 58, "sortoncompact": 58, "boolean": [58, 87, 106, 215, 217, 220, 235, 247, 249, 306, 310, 321, 340, 341, 378, 380, 383, 414, 454, 467], "oemut": 58, "iemut": 58, "propertytyp": [59, 69, 88], "gsdatatyp": [59, 69, 88, 95, 112, 121, 129, 139, 158, 166, 182, 191], "primarykei": [60, 70, 89], "basevertextypexcsrparam": [60, 70, 89, 121, 130, 140, 159, 191], "maxvertexnum": 61, "edgemappingsourcevertexmappingsinnercolumn": [62, 74, 75, 121, 132, 144, 145, 191], "createpropertymeta": [63, 70, 121, 133, 140, 191], "storedprocedur": [64, 84], "creategraphschemarequest": [64, 121, 134, 191], "vertextyp": [66, 85], "createvertextyp": [66, 121, 136, 191], "edgetyp": [66, 85, 458], "createedgetyp": [66, 121, 136, 191], "srclabel": [72, 78, 90, 469], "dstlabel": [72, 78, 90, 469], "edgelabel": [72, 78, 90, 220, 268], "srcprimarykeyvalu": [72, 78, 90], "dstprimarykeyvalu": [72, 78, 90], "typetriplet": 73, "edgemappingtypetriplet": [73, 121, 143, 191], "sourcevertexmap": 73, "edgemappingsourcevertexmappingsinn": [73, 121, 143, 191], "destinationvertexmap": 73, "edgemappingdestinationvertexmappingsinn": [73, 121, 143, 191], "columnmap": [73, 117, 121, 143, 187, 191], "typeid": [79, 83, 89, 119], "vertextypepairstatist": [79, 149], "_char": [80, 108], "fixedcharchar": [80, 108, 121, 150, 178, 191], "fixedchar": [81, 121, 191], "primitivetyp": [82, 121, 191], "stringtypestr": [82, 107, 121, 152, 177, 191], "tempor": [82, 109, 152, 179, 215, 220], "temporaltypetempor": [82, 109, 152, 179], "signed_int32": [82, 96], "unsigned_int32": [82, 96], "signed_int64": [82, 96], "unsigned_int64": [82, 96], "dt_string": [82, 96], "getpropertymeta": [83, 89, 121, 153, 159, 191], "storetyp": 84, "creationtim": [84, 87], "dataupdatetim": 84, "dataimportconfig": 84, "mutable_csr": [84, 192], "getvertextyp": [85, 121, 155, 191], "getedgetyp": [85, 121, 155, 191], "totalvertexcount": 86, "totaledgecount": 86, "vertextypestatist": 86, "vertexstatist": [86, 156], "edgetypestatist": 86, "edgestatist": [86, 156], "boundgraph": 87, "propertyid": 88, "edgerequest": [90, 121, 160, 191], "409": [90, 91, 160, 161, 192], "exit": [90, 91, 160, 161, 221, 233, 247, 487], "edgedata": [90, 121, 160, 191], "paramt": [90, 91, 160, 161], "vertexrequest": [91, 121, 161, 191], "primarykeyvalu": [91, 118], "label_exampl": [91, 161], "null": [91, 100, 215, 220, 321, 338, 354, 355, 362, 369, 421, 451, 456], "vertexdata": [91, 121, 161, 191], "value1": [91, 161, 209, 235, 489], "param2": [91, 161], "value2": [91, 161, 209], "starttim": [93, 104], "endtim": 93, "querynam": 99, "typedvalu": [99, 121, 169, 191], "byte": [100, 215, 247, 255, 315], "xinteractiverequestformat": 100, "bodi": [100, 170, 192, 310, 314, 422], "typeinfo": [100, 170], "proto": [100, 246, 266, 291], "enum": [100, 246], "plain": [100, 170, 241], "loadingconfig": 101, "schemamappingloadingconfig": [101, 121, 171, 191], "importopt": 102, "schemamappingloadingconfigformat": [102, 121, 172, 191], "boltport": 104, "hqpsport": 104, "longtext": [108, 121, 191], "varchar": [108, 121, 191], "varcharvarchar": [108, 114, 121, 178, 184, 191], "maxlength": 115, "propertyarrai": [118, 121, 188, 191], "gradl": 121, "ossrh": 121, "gettingstart": [121, 196], "neo4jsess": 121, "getneo4jsess": [121, 191], "tostr": [121, 246, 470], "adminservicegraphmanagementapi": [121, 191], "createdataloadingjob": 121, "getgraph": 121, "getschema": 121, "adminservicejobmanagementapi": [121, 191], "deletejobbyid": 121, "listjob": 121, "adminserviceproceduremanagementapi": [121, 191], "listprocedur": 121, "adminserviceservicemanagementapi": [121, 191], "getservicestatu": 121, "graphserviceedgemanagementapi": [121, 191], "addedg": 121, "deleteedg": 121, "getedg": 121, "updateedg": 121, "graphservicevertexmanagementapi": [121, 191], "addvertex": 121, "deletevertex": 121, "getvertex": [121, 246], "updatevertex": 121, "queryserviceapi": [121, 191], "proccal": 121, "baseedgetyp": [121, 191], "basepropertymeta": [121, 191], "basevertextyp": [121, 191], "collectiveresult": [121, 191], "keyvalu": [121, 191], "queryrequest": [121, 191], "storedproceduremeta": [121, 191], "stringtyp": [121, 191], "temporaltyp": [121, 191], "timestamptyp": [121, 191], "authent": [121, 191, 211, 213, 242, 469], "schema_map": [122, 171], "job_respons": [122, 162], "pprint": [122, 123, 124, 125, 160, 161, 170], "api_cli": [122, 123, 124, 125, 160, 161, 170, 463], "api_inst": [122, 123, 124, 125, 160, 161, 170], "graph_id_exampl": [122, 124, 160, 161, 170], "api_respons": [122, 123, 124, 125, 160, 161, 170], "back": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 222, 225, 231, 314, 468, 476], "create_graph_request": [122, 134], "create_graph_respons": [122, 135], "get_graph_respons": [122, 154], "get_graph_statistics_respons": [122, 156], "get_graph_schema_respons": [122, 155], "job_id_exampl": 123, "job_statu": [123, 163], "create_procedure_request": [124, 137], "create_procedure_respons": [124, 138], "procedure_id_exampl": 124, "get_procedure_respons": [124, 157], "update_procedure_request": [124, 183], "service_statu": [125, 174], "start_service_request": [125, 175], "interactive_sdk": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "base_edge_typ": 126, "base_edge_type_inst": 126, "from_json": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "to_json": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "base_edge_type_dict": 126, "to_dict": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "base_edge_type_from_dict": 126, "from_dict": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "base_edge_type_vertex_type_pair_relations_inn": 127, "base_edge_type_vertex_type_pair_relations_inner_inst": 127, "base_edge_type_vertex_type_pair_relations_inner_dict": 127, "base_edge_type_vertex_type_pair_relations_inner_from_dict": 127, "sort_on_compact": 128, "oe_mut": 128, "ie_mut": 128, "base_edge_type_vertex_type_pair_relations_inner_x_csr_param": 128, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_inst": 128, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_dict": 128, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_from_dict": 128, "base_property_meta": 129, "base_property_meta_inst": 129, "base_property_meta_dict": 129, "base_property_meta_from_dict": 129, "base_vertex_typ": 130, "base_vertex_type_inst": 130, "base_vertex_type_dict": 130, "base_vertex_type_from_dict": 130, "base_vertex_type_x_csr_param": 131, "base_vertex_type_x_csr_params_inst": 131, "base_vertex_type_x_csr_params_dict": 131, "base_vertex_type_x_csr_params_from_dict": 131, "var_properti": [132, 144, 145], "column_mapping_inst": 132, "column_mapping_dict": 132, "column_mapping_from_dict": 132, "create_edge_typ": 133, "create_edge_type_inst": 133, "create_edge_type_dict": 133, "create_edge_type_from_dict": 133, "stored_procedur": [134, 154, 192, 198, 200], "var_schema": [134, 154], "create_graph_request_inst": 134, "create_graph_request_dict": 134, "create_graph_request_from_dict": 134, "create_graph_response_inst": 135, "create_graph_response_dict": 135, "create_graph_response_from_dict": 135, "create_graph_schema_request": 136, "create_graph_schema_request_inst": 136, "create_graph_schema_request_dict": 136, "create_graph_schema_request_from_dict": 136, "create_procedure_request_inst": 137, "create_procedure_request_dict": 137, "create_procedure_request_from_dict": 137, "create_procedure_response_inst": 138, "create_procedure_response_dict": 138, "create_procedure_response_from_dict": 138, "create_property_meta": 139, "create_property_meta_inst": 139, "create_property_meta_dict": 139, "create_property_meta_from_dict": 139, "create_vertex_typ": 140, "create_vertex_type_inst": 140, "create_vertex_type_dict": 140, "create_vertex_type_from_dict": 140, "date_typ": 141, "date_type_inst": 141, "date_type_dict": 141, "date_type_from_dict": 141, "src_label": [142, 148, 160, 209, 235, 318, 459, 463, 469, 470, 483, 484], "dst_label": [142, 148, 160, 209, 235, 318, 459, 463, 469, 470, 483, 484], "src_primary_key_valu": [142, 148, 160], "dst_primary_key_valu": [142, 148, 160], "modelproperti": [142, 148, 168, 186, 191], "edge_data": [142, 160, 281, 471], "edge_data_inst": 142, "edge_data_dict": 142, "edge_data_from_dict": 142, "edge_mapping_inst": 143, "edge_mapping_dict": 143, "edge_mapping_from_dict": 143, "edge_mapping_destination_vertex_mappings_inn": 144, "edge_mapping_destination_vertex_mappings_inner_inst": 144, "edge_mapping_destination_vertex_mappings_inner_dict": 144, "edge_mapping_destination_vertex_mappings_inner_from_dict": 144, "edge_mapping_source_vertex_mappings_inn": 145, "edge_mapping_source_vertex_mappings_inner_inst": 145, "edge_mapping_source_vertex_mappings_inner_dict": 145, "edge_mapping_source_vertex_mappings_inner_from_dict": 145, "edge_mapping_source_vertex_mappings_inner_column": 146, "edge_mapping_source_vertex_mappings_inner_column_inst": 146, "edge_mapping_source_vertex_mappings_inner_column_dict": 146, "edge_mapping_source_vertex_mappings_inner_column_from_dict": 146, "edge_mapping_type_triplet": 147, "edge_mapping_type_triplet_inst": 147, "edge_mapping_type_triplet_dict": 147, "edge_mapping_type_triplet_from_dict": 147, "edge_request": [148, 160], "edge_request_inst": 148, "edge_request_dict": 148, "edge_request_from_dict": 148, "type_id": [149, 153, 159, 189, 192], "vertex_type_pair_statist": [149, 190, 192], "edge_statist": 149, "edge_statistics_inst": 149, "edge_statistics_dict": 149, "edge_statistics_from_dict": 149, "fixed_char_inst": 150, "fixed_char_dict": 150, "fixed_char_from_dict": 150, "fixed_char_char": 151, "fixed_char_char_inst": 151, "fixed_char_char_dict": 151, "fixed_char_char_from_dict": 151, "gs_data_typ": 152, "gs_data_type_inst": 152, "gs_data_type_dict": 152, "gs_data_type_from_dict": 152, "get_edge_typ": 153, "get_edge_type_inst": 153, "get_edge_type_dict": 153, "get_edge_type_from_dict": 153, "store_typ": [154, 192], "creation_tim": [154, 157, 192], "data_update_tim": [154, 192], "data_import_config": [154, 192], "get_graph_response_inst": 154, "get_graph_response_dict": 154, "get_graph_response_from_dict": 154, "get_graph_schema_response_inst": 155, "get_graph_schema_response_dict": 155, "get_graph_schema_response_from_dict": 155, "total_vertex_count": [156, 192], "total_edge_count": [156, 192], "vertex_type_statist": [156, 192], "edge_type_statist": [156, 192], "get_graph_statistics_response_inst": 156, "get_graph_statistics_response_dict": 156, "get_graph_statistics_response_from_dict": 156, "bound_graph": [157, 192], "get_procedure_response_inst": 157, "get_procedure_response_dict": 157, "get_procedure_response_from_dict": 157, "property_id": [158, 192, 249], "get_property_meta": 158, "get_property_meta_inst": 158, "get_property_meta_dict": 158, "get_property_meta_from_dict": 158, "get_vertex_typ": 159, "get_vertex_type_inst": 159, "get_vertex_type_dict": 159, "get_vertex_type_from_dict": 159, "src_pk_name": 160, "src_pk_valu": 160, "dst_pk_name": 160, "dst_pk_valu": 160, "vertex_request": [161, 188], "primimary_key_valu": 161, "bob": [161, 469], "primary_key_valu": [161, 188], "cindi": 161, "job_response_inst": 162, "job_response_dict": 162, "job_response_from_dict": 162, "start_tim": [163, 174, 192], "end_tim": 163, "job_status_inst": 163, "job_status_dict": 163, "job_status_from_dict": 163, "long_text_inst": 164, "long_text_dict": 164, "long_text_from_dict": 164, "model_properti": 165, "model_property_inst": 165, "model_property_dict": 165, "model_property_from_dict": 165, "parameter_inst": 166, "parameter_dict": 166, "parameter_from_dict": 166, "primitive_type_inst": 167, "primitive_type_dict": 167, "primitive_type_from_dict": 167, "property_arrai": 168, "property_array_inst": 168, "property_array_dict": 168, "property_array_from_dict": 168, "query_nam": 169, "query_request": 169, "query_request_inst": 169, "query_request_dict": 169, "query_request_from_dict": 169, "bytearrai": 170, "x_interactive_request_format": 170, "x_interactive_request_format_exampl": 170, "schema_mapping_inst": 171, "schema_mapping_dict": 171, "schema_mapping_from_dict": 171, "schema_mapping_loading_config": 172, "schema_mapping_loading_config_inst": 172, "schema_mapping_loading_config_dict": 172, "schema_mapping_loading_config_from_dict": 172, "schema_mapping_loading_config_format": 173, "schema_mapping_loading_config_format_inst": 173, "schema_mapping_loading_config_format_dict": 173, "schema_mapping_loading_config_format_from_dict": 173, "bolt_port": 174, "hqps_port": 174, "gremlin_port": [174, 469], "service_status_inst": 174, "service_status_dict": 174, "service_status_from_dict": 174, "start_service_request_inst": 175, "start_service_request_dict": 175, "start_service_request_from_dict": 175, "stored_procedure_meta": 176, "stored_procedure_meta_inst": 176, "stored_procedure_meta_dict": 176, "stored_procedure_meta_from_dict": 176, "string_typ": 177, "string_type_inst": 177, "string_type_dict": 177, "string_type_from_dict": 177, "string_type_str": 178, "string_type_string_inst": 178, "string_type_string_dict": 178, "string_type_string_from_dict": 178, "temporal_typ": 179, "temporal_type_inst": 179, "temporal_type_dict": 179, "temporal_type_from_dict": 179, "temporal_type_tempor": 180, "temporal_type_temporal_inst": 180, "temporal_type_temporal_dict": 180, "temporal_type_temporal_from_dict": 180, "time_stamp_typ": 181, "time_stamp_type_inst": 181, "time_stamp_type_dict": 181, "time_stamp_type_from_dict": 181, "typed_valu": 182, "typed_value_inst": 182, "typed_value_dict": 182, "typed_value_from_dict": 182, "update_procedure_request_inst": 183, "update_procedure_request_dict": 183, "update_procedure_request_from_dict": 183, "var_char_inst": 184, "var_char_dict": 184, "var_char_from_dict": 184, "var_char_var_char": 185, "var_char_var_char_inst": 185, "var_char_var_char_dict": 185, "var_char_var_char_from_dict": 185, "vertex_data_inst": 186, "vertex_data_dict": 186, "vertex_data_from_dict": 186, "vertex_mapping_inst": 187, "vertex_mapping_dict": 187, "vertex_mapping_from_dict": 187, "vertex_request_inst": 188, "vertex_request_dict": 188, "vertex_request_from_dict": 188, "vertex_statist": 189, "vertex_statistics_inst": 189, "vertex_statistics_dict": 189, "vertex_statistics_from_dict": 189, "vertex_type_pair_statistics_inst": 190, "vertex_type_pair_statistics_dict": 190, "vertex_type_pair_statistics_from_dict": 190, "assist": [191, 211, 216, 239], "har": 191, "sudo": [191, 311, 480, 481], "pytest": 191, "mock": 191, "virtserv": 191, "swaggerhub": 191, "resp": 191, "f0": [191, 318], "create_dataloading_job": 191, "create_graph": 191, "delete_graph": 191, "get_graph": 191, "get_schema": 191, "list_graph": 191, "delete_job_by_id": 191, "get_job_by_id": 191, "list_job": 191, "create_procedur": 191, "delete_procedur": 191, "get_procedur": 191, "list_procedur": 191, "update_procedur": 191, "get_service_statu": 191, "restart_servic": 191, "start_servic": 191, "stop_servic": 191, "delete_edg": [191, 469], "get_edg": [191, 307], "update_edg": 191, "add_vertex": 191, "delete_vertex": [191, 469], "get_vertex": 191, "update_vertex": 191, "proc_cal": 191, "seek": [192, 315], "toolkit": 192, "showprocedur": 192, "proc_nam": [192, 200], "metric": [192, 241, 403, 404, 405, 406, 407], "canceljob": 192, "x": [192, 221, 222, 233, 234, 244, 247, 304, 310, 316, 321, 359, 392, 400, 402, 403, 407, 431, 488], "ok": [192, 246], "enumer": [192, 233, 234, 246], "respond": [192, 306], "NOT": [192, 215, 220, 468], "yourfil": 192, "123": [192, 305], "example_graph": 192, "11223444": 192, "11123445": 192, "rune": 192, "path_to_fil": 192, "query_servic": 192, "reject": [192, 463], "unabl": 192, "emptybodi": 192, "cpu_usag": 192, "memory_usag": 192, "job_": 192, "create_timestamp": 192, "process_id": 192, "line1": 192, "nlin2": 192, "1706786404768": 192, "bulk_load": 192, "workspac": [192, 233], "maintan": 192, "interactive_serv": 192, "subprocess": 192, "statuscod": 192, "invalidargu": 192, "unsupportedoper": 192, "alreadyexist": 192, "notexist": 192, "codegenerror": 192, "uninitializedstatu": 192, "invalidschema": 192, "permissionerror": [192, 255], "403": 192, "illegaloper": 192, "internalerror": 192, "invalidimportfil": 192, "ioerror": 192, "notfound": 192, "queryfail": 192, "depth": [193, 211, 215, 237, 304, 316, 321, 488], "graph_data": 193, "gs_interactive_conf": 193, "breakdown": [193, 201], "regist": [193, 194, 196, 210, 217, 235, 246, 249, 278, 463], "meta": [193, 211, 226, 235, 246, 307, 308, 467, 469], "tell": [193, 468], "eras": [193, 200], "irrevers": [193, 200], "caution": 193, "establish": [193, 206, 469], "connector": [193, 196, 213, 222], "opencyph": [193, 238], "supported_cyph": [193, 196], "term": [194, 226], "proc": [194, 408, 409, 413, 414, 455], "storp": 194, "sproc": 194, "stopro": 194, "storedproc": 194, "storeproc": 194, "subroutin": 194, "rdbm": [194, 214], "wikipedia": [194, 239, 247, 418, 422, 423, 424, 425, 427, 428, 429, 435, 436, 437, 438, 440, 441, 442, 443, 449], "nest": [194, 220], "sole": [195, 214, 215], "theori": [195, 229, 308, 316], "arm64": 195, "mac": [195, 251, 481, 483], "gs_interactive_hom": 195, "concurr": [196, 201, 236, 306], "impress": [196, 201], "Its": [196, 201, 203, 238, 435, 468], "timefram": [196, 201], "emphas": [196, 201, 243], "stand": [196, 243, 308, 309, 468], "shoulder": 196, "pivot": 196, "pillar": 196, "qp": [196, 209, 222, 242, 469], "snb": [196, 222, 235, 484, 489], "180": 196, "87": [196, 244, 447], "op": [196, 248, 258, 260, 261, 262, 263, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 286, 287, 288, 290, 291, 314, 456, 460, 463], "boast": 196, "highlight": [196, 215, 236, 240], "laid": 196, "triumph": 196, "ten": [196, 239, 243, 308], "thousand": 196, "swiftli": 196, "versatil": [196, 217, 242, 468], "expans": [196, 240, 241, 313, 487], "prowess": 196, "prime": [196, 400, 402], "gql": [196, 210, 236, 243], "scalabl": [196, 209, 221, 239, 240, 241, 242, 243, 453], "possess": 196, "larger": [196, 218, 222, 232, 403], "massiv": [196, 210, 240], "too": [196, 209, 222, 243, 306, 375, 456], "offload": [196, 469], "excess": 196, "slave": 196, "constraint": [196, 215, 222, 223, 240], "portion": [196, 222, 239, 240, 248, 318], "occurr": [196, 214, 240], "syntax": [196, 215, 220, 229, 240, 248, 310, 456, 462], "definit": [196, 220, 236, 321, 402, 403, 405], "ir": [196, 209, 210, 211, 236, 238], "unif": 196, "physic": [196, 209, 210, 236, 247, 321, 379, 380, 381, 403, 467], "ddl": 196, "supported_gremlin_step": 196, "acid": [196, 242], "graph_nam": [198, 200, 211], "stored_procedure_1": 198, "flag": [198, 305, 306], "taken": [198, 456], "account": [198, 210, 240, 454, 487], "compile_onli": [198, 200], "procedure_nam": 198, "comma": [198, 305], "proc1": 198, "proc2": 198, "appear": [198, 203, 210, 222, 247, 361, 363, 365, 368, 370, 397, 398, 456, 482], "capit": [198, 215, 217], "aspect": [200, 210, 217, 222, 243], "desc": [200, 220, 222], "input_fil": 200, "solid": [201, 424, 441, 442], "prerequisit": 201, "helm": [201, 203, 208, 209, 469, 480, 482], "entiti": [201, 217, 218, 222, 232, 237, 241, 305], "\u6807\u7b7e": 202, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 202, "\u5c5e\u6027": [202, 487, 489], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 202, "\u539f\u59cbid": 202, "oid": [202, 246, 248, 249], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 202, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 202, "\u5b50\u56feid": 202, "fid": [202, 246, 249, 281, 465], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 202, "\u5206\u533a\u5668": 202, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 202, "\u7684\u6620\u5c04": 202, "\u5b50\u56fe": 202, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 202, "\u5b58\u50a8\u4e86\u9876\u70b9": 202, "\u8fb9": [202, 479], "\u9876\u70b9\u6570\u636e": 202, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 202, "\u5185\u90e8\u70b9": 202, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 202, "\u5916\u90e8\u70b9": 202, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 202, "\u672c\u5730id": 202, "lid": [202, 246, 281], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 202, "\u5168\u5c40id": 202, "gid": [202, 246, 281], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 202, "\u88abfragment\u5171\u8bc6": 202, "\u7528\u4e8e\u5b58\u50a8gid": 202, "oid\u7684\u6620\u5c04\u5173\u7cfb": 202, "\u7684\u8282\u70b9": 202, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 202, "gid\u7f16\u7801": 202, "\u5176\u4e2d": [202, 479, 484], "\u548c": [202, 310, 479, 481, 482, 483, 484, 486, 487, 488, 489], "\u5171\u540c\u7ec4\u6210": 202, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 202, "\u7684\u9876\u70b9": 202, "\u5e8f\u53f7": 202, "lid\u7f16\u7801": 202, "\u586b\u5145": 202, "\u603b\u662f": 202, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 202, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 202, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 202, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 202, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 202, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 202, "\u8fb9\u6587\u4ef6": 202, "\u5f97\u5230\u591a\u4e2avertex": 202, "\u548cedg": 202, "etabl": 202, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 202, "\u5206\u7ec4": 202, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 202, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 202, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 202, "\u8fb9\u8868": 202, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 202, "partial_v_t": 202, "partial_e_t": 202, "table\u5305\u542boid": 202, "table\u5305\u62ecsrc\u548cdst\u7684oid": 202, "\u8bbf\u95eevtable\u7684oid\u5217": 202, "\u6839\u636eoid\u67e5\u8be2partit": 202, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 202, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 202, "gather\u64cd\u4f5c": 202, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 202, "\u6839\u636efrag\u6570\u91cf": 202, "label\u6570\u91cf\u548c\u5168\u90e8oid": 202, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 202, "fid_t": [202, 246], "fnum_": 202, "label_id_t": [202, 246], "label_num_": 202, "hashmapbuild": 202, "cur_gid": 202, "id_parser_": 202, "generateid": 202, "\u8d77\u59cbgid": 202, "vnum": 202, "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 202, "\u751f\u6210gid": 202, "emplac": 202, "getview": 202, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 202, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 202, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 202, "\u6839\u636epartitioner\u83b7\u53d6fid": 202, "\u6839\u636efid": 202, "id\u548coid\u67e5\u8be2gid": 202, "\u751f\u6210gid\u6570\u7ec4": 202, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 202, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 202, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 202, "\u5bf9etable\u6267\u884cshuffl": 202, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 202, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 202, "\u5904\u7406\u9876\u70b9": 202, "\u521d\u59cb\u5316id": 202, "parser": [202, 210, 233], "\u521d\u59cb\u5316ivnum": 202, "ovnum\u548ctvnum\u6570\u7ec4": 202, "\u6309\u7167vertex": 202, "label\u5206\u7ec4": 202, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 202, "\u5411vertex": 202, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 202, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 202, "\u5c06vertex": 202, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 202, "vid_parser_": 202, "vertex_label_num_": 202, "resiz": 202, "ivnums_": 202, "ovnums_": 202, "tvnums_": 202, "combinechunk": 202, "default_memory_pool": 202, "vm_ptr_": 202, "getinnervertexs": [202, 246], "fid_": 202, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 202, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 202, "\u901a\u8fc7src": 202, "gid\u5217\u548cdst": 202, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 202, "\u5e76\u6309\u7167vertex": 202, "edge_t": [202, 305, 316], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 202, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 202, "collect_outer_vertic": 202, "dynamic_pointer_cast": [202, 470], "converttoarrowtyp": [202, 246], "arraytyp": [202, 246], "chunk": [202, 291, 318, 467], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 202, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 202, "\u5916\u90e8\u70b9\u7684lid\u7531label": 202, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 202, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 202, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 202, "ovg2l_maps_": 202, "ovgid_lists_": 202, "cur_list": 202, "collected_ovgids_": 202, "\u6392\u5e8fgid": 202, "cur_map": 202, "buildertyp": 202, "vec_build": 202, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 202, "\u5176\u4e2dfid\u4e3a0": 202, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 202, "cur_id": 202, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 202, "cur_list_length": 202, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 202, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 202, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 202, "\u5220\u9664edg": 202, "table\u7684src\u5217\u548cdst\u5217": 202, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 202, "generate_local_id_list": 202, "gid_list": 202, "lid_list": 202, "vec": 202, "getfid": 202, "\u751f\u6210\u5185\u90e8\u70b9lid": 202, "getlabelid": 202, "getoffset": 202, "\u67e5\u8be2g2l": 202, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 202, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 202, "edge_src_": 202, "edge_dst_": 202, "table\u7684src\u5217\u548cgid\u5217": 202, "\u53ea\u4fdd\u7559\u5c5e\u6027": 202, "tmp_table0": 202, "removecolumn": 202, "\u6784\u5efacsr": 202, "\u5bf9\u4e8e\u6709\u5411\u56fe": 202, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 202, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 202, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 202, "\u6784\u5efarow": 202, "offset\u6570\u7ec4": 202, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 202, "\u4f7f\u7528row": 202, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 202, "\u586b\u5145dst": 202, "lid\u548ceid\u5230nbr": 202, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 202, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 202, "generate_directed_csr": 202, "vid_array_t": [202, 246], "src_list": 202, "dst_list": 202, "fixedsizebinaryarrai": 202, "int64arrai": 202, "edge_offset": 202, "actual_edge_num": 202, "v_label": [202, 246, 465], "edge_num": [202, 281, 483, 487], "src_list_ptr": 202, "raw_valu": 202, "dst_list_ptr": 202, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 202, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 202, "tvnum": 202, "offset_vec": 202, "degree_vec": 202, "int64build": 202, "podarraybuild": 202, "nbr_unit_t": [202, 246], "edge_build": 202, "v_offset": 202, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 202, "ptr": 202, "mutablepoint": 202, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 202, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 202, "vid": [202, 246, 318], "eid_t": [202, 246], "\u66f4\u65b0offset": 202, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 202, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 202, "offsets_ptr": 202, "lh": 202, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 202, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 202, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 202, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 202, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 202, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 202, "lid\u548ceid": 202, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 202, "\u5c01\u88c5": 202, "seal": [202, 225, 241], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 202, "ovgid\u548cg2l_map\u540e": 202, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 202, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 202, "\u4e5f\u5c31\u662f\u8bf4": [202, 480], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 202, "\u5f53\u524dfragment": 202, "fragment\u603b\u6570": 202, "directed_": 202, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 202, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 202, "edge_label_num_": 202, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 202, "propertygraphschema": 202, "schema_": 202, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 202, "\u9876\u70b9\u5c5e\u6027\u8868": 202, "\u4e0d\u5305\u542bid\u5217": 202, "\u5916\u90e8\u70b9gid": 202, "gid\u5230lid\u6620\u5c04": 202, "\u8fb9\u5c5e\u6027": 202, "csr\u7ed3\u6784\u7684column": 202, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 202, "csr\u7ed3\u6784\u7684row": 202, "vertex_map_t": [202, 246], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 202, "edge_tables_columns_": 202, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 202, "flatten_edge_tables_columns_": 202, "\u540c\u4e0a": 202, "vertex_tables_columns_": 202, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 202, "ie_ptr_lists_": 202, "oe_ptr_lists_": 202, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 202, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 202, "\u4e5f\u5c31\u662fcolumn": 202, "index\u7684\u8d77\u59cb\u5730\u5740": 202, "ie_offsets_ptr_lists_": 202, "oe_offsets_ptr_lists_": 202, "\u51fa\u8fb9\u7684row": 202, "offset\u8d77\u59cb\u5730\u5740": 202, "offset\u7684\u8d77\u59cb\u5730\u5740": 202, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 202, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 202, "\u76ee\u7684\u9876\u70b9fid": 202, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 202, "idst_": 202, "odst_": 202, "iodst_": 202, "idoffset_": 202, "odoffset_": 202, "iodoffset_": 202, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 202, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 202, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 202, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 202, "id\u548c\u9876\u70b9\u5e8f\u53f7": 202, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 202, "ivnum": 202, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 202, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 202, "vertex_range_t": [202, 246], "label_id": [202, 246, 248, 249, 281], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 202, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 202, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 202, "\u5c5e\u6027id": 202, "\u5217\u53f7": 202, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 202, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 202, "\u884c\u53f7": 202, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 202, "getdata": [202, 246], "prop_id_t": [202, 246], "prop_id": 202, "property_graph_util": [202, 246], "valuegett": 202, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 202, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 202, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 202, "adj_list_t": [202, 246], "e_label": [202, 246], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 202, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 202, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 202, "offset_arrai": 202, "\u8bbf\u95eerow": 202, "oe": 202, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 202, "\u751f\u6210adjlist\u5bf9\u8c61": 202, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 202, "\u7ed3\u675f\u5730\u5740": 202, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 202, "\u548c\u51fa\u8fb9\u540c\u7406": 202, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 202, "ie": 202, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 202, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 202, "\u5bf9\u5e94\u5230\u884c\u53f7": 202, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 202, "\u4f8b\u5982": [202, 479, 483, 487, 489], "\u83b7\u53d6edg": 202, "struct": [202, 246, 379, 412], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 202, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 202, "edata_arrays_": 202, "nbr_": 202, "8g": [203, 233], "18": [203, 212, 222, 244, 306, 307, 309, 318, 321, 379, 428, 433, 437, 439, 442, 448, 467, 479, 482, 486], "silent": [203, 456, 477], "did": [203, 316], "role": [203, 210, 224, 233, 238, 306, 315, 321, 407, 445, 453, 469, 473, 477, 482], "rolebind": [203, 482], "uninstal": [203, 209, 482], "recycl": 203, "alloc": [203, 227, 231], "seem": [203, 222], "stuck": 203, "consumpt": 203, "poor": [203, 312], "acquir": [203, 213, 221], "mostli": [203, 211, 282], "visibl": [203, 249], "cloud": [203, 242, 243, 469], "k8s_vineyard_mem": [203, 233, 303, 463, 482], "shape": [203, 228, 229, 232, 237, 246, 248, 307, 308, 309, 310, 313, 316, 320, 378, 483], "forth": 203, "smaller": [203, 222, 244, 319, 321, 377, 378, 382], "shared_mem": [203, 482], "grpcio": [203, 482], "grpc_python_build_system_openssl": [203, 482], "scipi": [203, 403, 404, 405, 406, 456, 459, 482], "anaconda": [203, 482], "workaround": 203, "openbla": 203, "tri": [203, 206, 231, 240, 385, 391], "pkgconfig": 203, "cmake_prefix_path": 203, "brew": 203, "deni": [203, 255, 482], "kafka": [203, 465, 469, 482], "zookeep": [203, 482], "crashloopbackoff": [203, 482], "bitnami": [203, 482], "755": 203, "1001": [203, 469], "brutal": 203, "chmod": [203, 221, 482], "777": [203, 244, 482], "eleg": [203, 206], "grant": [203, 453], "rais": [203, 210, 247, 255, 257, 291, 303, 310, 318, 319, 321, 327, 336, 340, 341, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 395, 397, 400, 401, 402, 413, 416, 448, 451, 452, 456, 459, 463], "timeout_second": [203, 303, 463, 482], "600": [203, 244, 463, 482], "enterpris": 203, "proxi": [203, 482], "properli": [203, 218], "wrong": 203, "resolut": [203, 469], "occup": 203, "hostnam": [203, 482], "no_proxi": [203, 482], "suffix": [203, 220], "flush": 203, "forcibli": 203, "contact": 203, "slack": [203, 482], "dingtalk": [203, 482], "happi": 203, "90": [205, 244], "traffic": 206, "web": [206, 247, 321, 389, 403, 408, 449], "ever": [206, 229], "amount": [206, 221, 227, 241, 308, 310, 312], "hidden": [206, 238, 239, 241, 304, 488], "attract": 206, "attent": [206, 241, 310], "difficult": [206, 305, 315, 469], "obstacl": 206, "attempt": [206, 209, 239, 240, 243, 456], "curv": [206, 239], "hard": [206, 220, 230, 231, 417, 468], "complic": [206, 210, 222, 248], "sql": [206, 210, 217, 220, 222, 223], "deep": [206, 229, 236, 304, 309, 310, 312, 332, 335, 444, 456], "gnn": [206, 208, 226, 228, 229, 232, 236, 237, 242, 243, 304, 308, 309, 310, 312, 313, 463, 485, 488], "train": [206, 214, 226, 228, 229, 230, 236, 237, 242, 243, 245, 306, 309, 310, 312, 313, 316, 320, 463, 483, 488], "fist": 206, "interpret": [206, 236, 321], "mount_dataset": [206, 235], "ran": [206, 231], "p2p_network": 206, "embed": [206, 226, 232, 237, 241, 305, 312], "inter": [206, 317, 375, 378], "wherea": [206, 375, 468], "numpi": [206, 222, 226, 246, 248, 263, 274, 283, 307, 308, 310, 311, 312, 313, 316, 318, 320, 321, 448, 456, 459, 485], "datafram": [206, 235, 248, 262, 273, 283, 286, 318, 456, 479, 489], "head": [206, 209, 214, 220, 222], "creationd": [206, 220, 222, 235, 467, 484, 489], "locationip": [206, 235, 489], "browserus": [206, 222, 235, 489], "618475290625": 206, "2011": [206, 222, 389], "08": [206, 244, 321], "17t14": 206, "26": [206, 220, 222, 233, 244, 306, 307, 309, 405], "59": [206, 244], "961": 206, "210": [206, 244, 452], "17": [206, 222, 244, 306, 307, 309, 479], "chrome": [206, 222], "618475290626": 206, "17t11": 206, "570": 206, "comment_replyof_com": 206, "274877907301": 206, "274877907299": 206, "274877907302": 206, "pd": [206, 214, 235, 489], "df_v": [206, 235, 479, 489], "read_csv": [206, 214, 235, 489], "sep": [206, 214, 235, 318, 489], "df_e": [206, 235, 489], "graphcomput": [208, 487], "gl": [208, 229, 242, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317], "neural": [208, 226, 236, 237, 242, 243, 245, 304, 305, 308, 310, 312, 316], "posit": [208, 222, 241, 242, 304, 310, 321, 366, 385, 387, 388, 390, 391, 395, 403, 404, 405, 406, 407, 451, 454, 468, 471], "frequent": [208, 236, 239, 469], "groot": [208, 218, 236, 243], "graphar": [208, 318], "gart": 208, "gap": 208, "oltp": [208, 236, 238], "style": [208, 225, 236, 461], "wonder": 209, "throughout": [209, 210, 220], "smoothli": 209, "easiest": 209, "websit": [209, 239, 375], "untar": 209, "cp": [209, 211, 453, 468], "tree": [209, 238, 356, 358, 366, 386, 392, 394, 404, 405, 406, 419, 420, 457, 463, 489], "your_release_nam": 209, "cypherport": 209, "littl": [209, 220, 222], "v6d_modern_load": [209, 211], "data_path": [209, 470], "store_data_path": [209, 211], "thing": [209, 310, 476], "key1": 209, "key2": 209, "token": [209, 220], "column_typ": 209, "infer": [209, 235, 241, 242], "filed1": 209, "filed2": 209, "unexpect": 209, "troubl": 209, "correspondingli": [209, 229, 413, 416], "v6d_ldbc_loader": 209, "hdf": [209, 235, 283, 315, 318, 469, 479, 489], "pegasusworkernum": 209, "pegasustimeout": 209, "durat": [209, 215, 220], "pegasusbatchs": 209, "1024": [209, 211, 220, 467], "pegasusoutputcapac": 209, "frontendquerypersecondlimit": 209, "2147483647": [209, 469], "gremlinscriptlanguagenam": 209, "antlr_gremlin_travers": 209, "antlr_gremlin_calcit": 209, "inher": 210, "manufactur": 210, "upcom": 210, "sticki": 210, "shelv": 210, "intellig": [210, 222, 236, 243, 413, 416], "hybrid": [210, 468, 469], "dedupl": 210, "latenc": [210, 221, 236, 242, 243], "hope": [210, 222, 469], "trade": [210, 236, 469], "inevit": 210, "realist": [210, 448], "lengthi": 210, "verif": [210, 236], "80": [210, 244, 435], "decoupl": [210, 236, 243], "upper": [210, 220, 222, 226, 240, 375, 468], "briefli": [210, 241], "algebra": [210, 445], "edgeexpans": 210, "pathexpans": 210, "legal": 210, "predic": [210, 222], "arithmet": [210, 220, 222], "firstli": [210, 218, 222, 235, 243], "down": [210, 217, 234, 373], "cbo": 210, "glogu": 210, "shuffl": [210, 220, 233, 234, 310, 316, 320], "plu": [210, 220, 222, 359, 431], "unaccept": 210, "come": [210, 214, 222, 225, 235, 237, 238, 241, 242, 244, 307, 422, 459], "end2end": 211, "sf": [211, 222], "v6d_object_id": 211, "unsur": [211, 214], "vineyard_ipc_socket": [211, 470], "gie_test_hom": 211, "rpc": [211, 233, 246, 317, 463, 469], "1234": 211, "127": [211, 244, 469], "11234": 211, "pegasu": [211, 236], "gaia_executor": 211, "log4r": [211, 469], "yml": [211, 467, 469], "usernam": [211, 469], "password": [211, 469], "auth": [211, 213, 321, 469], "djna": 211, "kill": [211, 463], "pkill": 211, "gcc": [212, 244, 486], "64": [212, 221, 229, 309, 310, 387, 467, 487], "chip": [212, 486], "hereaft": [212, 222, 237], "q1": [212, 214, 222, 237], "q2": [212, 222, 237], "q3": [212, 222, 237], "453": 212, "xxx": [212, 214, 314, 318, 463, 479], "pppp": 212, "startup": 212, "600000": 212, "entr": 212, "ee": 212, "syntact": [212, 218, 223, 240], "sugar": [212, 218, 223, 240], "graphdatabas": 213, "routingcontrol": [213, 237], "print_top_10": 213, "execute_queri": 213, "routing_": [213, 237], "simpler": [213, 221, 222, 456], "nowadai": 214, "shortcom": [214, 218, 222], "gpt": 214, "materi": 214, "year": [214, 220, 222, 237, 239, 483], "mislead": 214, "hot": 214, "cold": 214, "workabl": 214, "significantli": [214, 217, 218, 239, 242], "openai": 214, "novic": 214, "dream": 214, "chamber": 214, "25": [214, 222, 228, 232, 237, 244, 306, 307, 309, 378, 380, 383, 402, 449, 483], "langchain": 214, "316": 214, "suchun": 214, "sv": 214, "nodes_set": 214, "stone_story_nodes_rel": 214, "vid_field": [214, 235, 318, 484], "edges_set": 214, "stone_story_edg": 214, "edges_sets_": 214, "src_field": [214, 235, 318, 484], "dst_field": [214, 235, 318, 484], "daughter_in_law_of_grandson_of": 214, "wife_of": 214, "api_kei": 214, "query_to_cyph": 214, "langchain_prompt": 214, "son": 214, "baoyu": 214, "jia": 214, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 214, "cypher_sent": 214, "son_of": 214, "q": [214, 221, 308, 310, 316, 398, 402], "\u8d3e\u5b9d\u7389": 214, "lastli": 214, "\u8d3e\u653f": 214, "stori": 214, "compli": [215, 310], "unaddress": 215, "regard": [215, 222, 232, 468], "keyword": [215, 323, 324, 325, 392, 399, 403, 404, 405, 406, 407, 456, 459, 462, 463], "insensit": [215, 220], "lowercas": 215, "letter": [215, 450], "slightli": [215, 311, 375, 462], "elabor": [215, 243], "uint64": [215, 297, 318, 463], "byte_arrai": 215, "datetim": 215, "citizen": 215, "unsupport": [215, 218, 220], "conceiv": [215, 403], "inner_typ": 215, "mathemat": [215, 388, 390, 398, 400, 402, 411], "moment": [215, 251, 469], "averag": [215, 220, 232, 237, 247, 321, 375], "avg": [215, 220, 321], "summar": [215, 222, 226], "subtract": [215, 220], "divis": [215, 220], "modulo": [215, 220, 400], "exponenti": [215, 220, 222, 241, 403, 405, 406], "multipli": [215, 220, 443], "inequ": 215, "sensit": [215, 448], "WITH": [215, 220], "conjunct": 215, "AND": [215, 220, 237, 249], "disjunct": 215, "OR": [215, 218, 220, 249, 456], "xor": [215, 220], "negat": [215, 220], "bitopr": 215, "scalar": [215, 314, 321], "listliter": 215, "fold": [215, 468, 487], "mapliter": 215, "elementid": [215, 220], "interv": [215, 375, 407, 463], "notabl": 215, "AS": [215, 218, 453, 457], "BY": [215, 218], "interconnect": [216, 239, 306], "tcp": [216, 233], "llm": 216, "sentenc": [216, 217, 220, 222], "tradition": 217, "accommod": [217, 243], "heurist": [217, 240, 383], "coexist": 217, "sophist": [217, 238], "cardin": 217, "primarili": [217, 222, 240, 468], "stem": 217, "atc": 217, "instrument": 217, "efficaci": 217, "alias": [217, 220], "p1": [217, 222], "p2": [217, 222], "id1": [217, 487], "id2": [217, 487], "expedit": 217, "intent": 217, "k1": [217, 220], "k2": [217, 220], "p3": 217, "retain": [217, 220, 397, 470], "constrain": 217, "simultan": [217, 237, 243, 465], "necessit": [217, 236], "lai": 217, "groundwork": 217, "conform": 217, "nonexist": 217, "kno": 217, "mismatch": 217, "websocket": [218, 487], "worth": [218, 232, 310, 318, 456], "mutat": 218, "lambda": [218, 222, 304, 310, 316, 321, 392, 403, 405, 406, 407, 488], "groovi": 218, "currenttimemilli": [218, 469, 487], "expr": [218, 220, 222, 487], "transact": [218, 236, 242, 243, 244, 465, 469, 479], "secondari": 218, "rocksdb": [218, 469], "isol": [218, 321, 417, 469], "therein": 218, "council": [218, 244], "birthdai": [218, 235, 489], "differenti": 218, "123456": [218, 226, 241, 469], "hasid": 218, "expos": [218, 224, 308, 319, 463, 473], "secondli": [218, 243], "path_expand": 218, "concret": [218, 247, 248, 318], "endv": [218, 222, 240, 487], "repeat": [218, 240, 241, 310, 316, 390, 395, 398, 418, 421, 487], "path_opt": [218, 220, 222, 240, 487], "pathexpand": 218, "marko": [218, 220, 222], "27": [218, 220, 222, 244, 306, 307, 309, 437], "hasstep": 218, "groupcount": [218, 487], "age_cnt": 218, "age_sum": 218, "scan": [218, 468], "propertyidvalu": 218, "moreov": [218, 220, 236, 240, 242, 468], "propertyidvalue1": 218, "propertyidvalue2": 218, "inE": [218, 310, 487], "conquer": 219, "meant": [220, 222], "vertexid": 220, "inject": 220, "edgeid": 220, "histori": [220, 222, 240], "propertykei": 220, "accessor": 220, "eq": [220, 222, 240, 247, 487], "neq": [220, 487], "gt": [220, 222, 487], "lt": [220, 222, 487], "gte": [220, 222, 237, 483, 487], "lte": [220, 237, 483, 487], "outsid": [220, 487], "textp": [220, 487], "startingwith": [220, 487], "endingwith": [220, 487], "rko": 220, "ark": 220, "notstartingwith": [220, 487], "notendingwith": [220, 487], "notcontain": [220, 487], "unequ": 220, "wheretravers": 220, "act": [220, 304, 453, 456, 476, 488], "startkei": 220, "alter": [220, 456], "opposit": [220, 310, 384, 431], "nottravers": 220, "duplic": [220, 222, 383, 385, 387, 456, 457], "deduplabel": 220, "composit": [220, 222], "de": [220, 231], "impli": 220, "flat": 220, "br": 220, "selectkei": 220, "roll": [220, 222, 225], "accompani": 220, "aggregatefunc": 220, "emit": [220, 222, 304, 307, 310, 316, 488], "ascend": [220, 222], "asc": [220, 222], "bias": 220, "toss": 220, "merg": [220, 310], "uniontravers": 220, "matchsent": 220, "binder": 220, "__": [220, 221, 222, 237, 310, 483, 487], "graphnam": 220, "unrol": 220, "linear": [220, 390, 392, 448, 468], "result_opt": [220, 222, 487], "all_v": [220, 222, 487], "lengthrang": 220, "keyvaluepair": 220, "end_v": [220, 222, 487], "all_v_": 220, "vada": 220, "josh": 220, "ongo": 220, "liter": 220, "0f": 220, "0d": 220, "2l": 220, "IN": [220, 238], "isnul": 220, "month": 220, "1000": [220, 247, 306, 321, 453, 456, 469], "bitwis": 220, "startswith": 220, "ma": 220, "endswith": 220, "ko": 220, "substr": [220, 487], "preced": [220, 456, 469], "parenthes": 220, "unari": 220, "modulu": 220, "membership": [220, 456], "lop": 220, "rippl": 220, "peter": 220, "34": [220, 222, 244, 306, 307, 309, 449], "729": 220, "1225": 220, "841": 220, "v2": [220, 222, 228, 240, 304, 434, 488], "35": [220, 222, 244, 306, 307, 309, 316, 383, 433, 449], "29": [220, 222, 306, 307, 309], "simplepath": [220, 487], "latter": [220, 222, 239], "mix": [220, 247, 468], "sack": [220, 487], "guidanc": 221, "gremlinpython": [221, 469], "sy": [221, 316], "gremlin_python": [221, 469], "graph_travers": 221, "driver_remote_connect": 221, "driverremoteconnect": [221, 469], "gremlin_endpoint": [221, 469], "remoteconn": [221, 469], "withremot": [221, 469], "assert": [221, 247, 468], "oom": 221, "vast": 221, "mitig": 221, "risk": [221, 236], "queue": [221, 249], "graph_url": [221, 319, 469, 487], "stopiter": 221, "resultiterationbatchs": 221, "addcontactpoint": [221, 469], "resultset": [221, 469], "hasnext": 221, "dlcdn": 221, "your_endpoint_address": 221, "your_endpoint_port": 221, "classnam": [221, 487], "ser": [221, 487], "gryomessageserializerv1d0": [221, 487], "serializeresulttostr": [221, 487], "realm": 222, "audit": 222, "toolsuit": 222, "simul": [222, 281, 316], "confid": 222, "permit": [222, 456], "3k": 222, "gremlin_queri": 222, "190376": 222, "787074": 222, "sf1": 222, "432345564227583365": 222, "504403158265495622": 222, "576460752303435306": 222, "432345564227579434": 222, "hastyp": 222, "504403158265495612": 222, "144115188075855941": 222, "issubclassof": 222, "504403158265495553": 222, "confus": [222, 404, 405, 406], "mechan": [222, 238, 241, 243, 465, 473], "belong": [222, 241, 247, 248, 249, 318, 446, 449, 456, 462, 469], "distinguish": [222, 236, 304, 305, 306, 468], "worri": 222, "havelabel": 222, "216172782113783808": 222, "216172782113784710": 222, "label1": 222, "label2": 222, "forum": 222, "72057594037936036": 222, "360287970189718653": 222, "360287970189718655": 222, "joseph": 222, "yacin": 222, "01t00": 222, "curiou": 222, "38416": 222, "mayb": 222, "pyplot": 222, "plt": 222, "comment_cont": 222, "comment_length": 222, "histogram": 222, "hist": [222, 330], "50": [222, 244, 403, 405, 406], "607c8e": 222, "grid": [222, 449], "axi": [222, 246, 247, 248, 263, 287, 316, 462], "xlabel": 222, "ylabel": 222, "gender": [222, 235, 489], "person_gend": 222, "male": 222, "femal": 222, "male_count": 222, "female_count": 222, "216172782113784483": 222, "around": [222, 319], "432345564227569033": 222, "288230376151712472": 222, "144115188075856168": 222, "144115188075860911": 222, "72057594037934114": 222, "hasmoder": 222, "studyat": 222, "workat": 222, "islocatedin": 222, "432345564227582847": 222, "hasinterest": 222, "504403158265496227": 222, "864691128455136658": 222, "1008806316530991636": 222, "360287970189645858": 222, "en": [222, 239, 247, 418, 422, 423, 424, 425, 427, 428, 429, 435, 436, 437, 438, 440, 441, 442, 443], "e1": 222, "citi": [222, 226, 239, 241], "ispartof": 222, "countri": 222, "288230376151711797": 222, "216172782113784555": 222, "14": [222, 244, 306, 307, 309, 361, 421, 429, 441, 456], "exactli": [222, 226, 240, 247, 321, 366, 375, 389, 434, 462, 469], "432345564227569357": 222, "432345564227570524": 222, "288230376151712984": 222, "144115188075861043": 222, "replyof": [222, 467, 484], "54336": 222, "33411": 222, "360287970189700805": 222, "59465": 222, "33403": 222, "awai": 222, "ineffect": 222, "illeg": 222, "simple_path": 222, "unfold": [222, 247], "hascreat": 222, "nation": 222, "china": 222, "np": [222, 307, 310, 316, 320, 471], "market": 222, "japan": 222, "browsers_us": 222, "browser_list": 222, "firefox": 222, "safari": 222, "browser_count": 222, "autopct": 222, "1f": 222, "univers": [222, 236, 321, 354, 355, 402, 412, 444, 448], "person1": 222, "person2": 222, "university1": 222, "university2": 222, "studi": [222, 232, 237, 243, 402, 404], "216172782113784481": 222, "216172782113784279": 222, "144115188075858884": 222, "216172782113784361": 222, "216172782113784291": 222, "144115188075858879": 222, "216172782113784642": 222, "216172782113784473": 222, "216172782113784328": 222, "144115188075858700": 222, "216172782113784700": 222, "216172782113784331": 222, "144115188075860619": 222, "216172782113784375": 222, "216172782113784333": 222, "144115188075858813": 222, "216172782113784593": 222, "216172782113784688": 222, "144115188075860870": 222, "216172782113784047": 222, "216172782113784692": 222, "144115188075862429": 222, "isomorph": [222, 241, 306, 310, 435, 457], "22": [222, 244, 306, 307, 309, 318, 449, 467], "23": [222, 306, 307, 309], "216172782113784192": 222, "216172782113784107": 222, "216172782113784171": 222, "regular": [222, 395, 400, 401, 402, 424, 429, 432, 437, 440, 441, 442, 443], "squar": [222, 383, 402, 430, 431, 434, 449], "butterfli": 222, "notion": 222, "matchanalyticsalgorithm": 222, "matchoptimizationalgorithm": 222, "216172782113784587": 222, "216172782113784363": 222, "144115188075860919": 222, "216172782113784532": 222, "216172782113784400": 222, "144115188075861858": 222, "216172782113784491": 222, "216172782113784401": 222, "144115188075858086": 222, "216172782113784598": 222, "216172782113784629": 222, "144115188075858881": 222, "216172782113783931": 222, "216172782113784657": 222, "144115188075858708": 222, "repli": 222, "pa": 222, "pb": 222, "216172782113783809": 222, "216172782113784011": 222, "360287970189640007": 222, "360287970189640008": 222, "360287970189640009": 222, "2012": [222, 415], "216172782113783812": 222, "216172782113783882": 222, "36": [222, 244, 306, 307, 309, 361, 441, 449, 481], "360287970189640010": 222, "37": [222, 244, 306, 307, 309, 321, 449, 481], "216172782113784105": 222, "38": [222, 244, 306, 307, 309, 449, 481], "41": [222, 244, 306, 307, 309, 396, 449], "43": [222, 306, 307, 309, 321, 423, 449, 479], "216172782113783814": 222, "216172782113783962": 222, "360287970189640135": 222, "52": [222, 449], "216172782113784199": 222, "54": [222, 244, 396, 449], "216172782113784038": 222, "56": [222, 244, 355, 449], "216172782113783816": 222, "216172782113784144": 222, "175": 222, "360287970189640462": 222, "72057594037927936": 222, "144115188075855872": 222, "288230376151711744": 222, "432345564227567616": 222, "504403158265495555": 222, "india": 222, "hasmemb": 222, "8248": 222, "8101": 222, "imposs": 222, "2822": 222, "tag1": 222, "tag2": 222, "37164": 222, "432": 222, "property1": 222, "property2": 222, "donati": 222, "luigi": 222, "hall": 222, "costa": 222, "carlo": 222, "khan": 222, "meera": 222, "mahinda": 222, "eli": 222, "94": 222, "228": [222, 244], "emb": [222, 304, 488], "th": [222, 308, 321, 434], "dom": 222, "pedro": 222, "ii": 222, "condariuc": 222, "bonomi": 222, "anyth": 222, "david": [222, 357, 368, 433], "silva": 222, "guliyev": 222, "tagclass": 222, "504403158265495552": 222, "504403158265495554": 222, "504403158265495556": 222, "504403158265495557": 222, "504403158265495558": 222, "504403158265495559": 222, "504403158265495560": 222, "504403158265495561": 222, "504403158265495562": 222, "504403158265495563": 222, "504403158265495564": 222, "504403158265495565": 222, "504403158265495566": 222, "504403158265495567": 222, "504403158265495568": 222, "504403158265495569": 222, "504403158265495570": 222, "504403158265495571": 222, "504403158265495572": 222, "504403158265495573": 222, "504403158265495574": 222, "504403158265495575": 222, "504403158265495576": 222, "504403158265495577": 222, "504403158265495578": 222, "504403158265495579": 222, "504403158265495580": 222, "504403158265495581": 222, "504403158265495582": 222, "504403158265495583": 222, "504403158265495584": 222, "504403158265495585": 222, "504403158265495586": 222, "504403158265495587": 222, "504403158265495588": 222, "504403158265495589": 222, "504403158265495590": 222, "504403158265495591": 222, "504403158265495592": 222, "504403158265495593": 222, "504403158265495594": 222, "504403158265495595": 222, "504403158265495596": 222, "504403158265495597": 222, "504403158265495598": 222, "504403158265495599": 222, "504403158265495600": 222, "504403158265495601": 222, "504403158265495602": 222, "504403158265495603": 222, "504403158265495604": 222, "504403158265495605": 222, "504403158265495606": 222, "504403158265495607": 222, "504403158265495608": 222, "504403158265495609": 222, "504403158265495610": 222, "504403158265495611": 222, "504403158265495613": 222, "504403158265495614": 222, "504403158265495615": 222, "504403158265495616": 222, "504403158265495617": 222, "504403158265495618": 222, "504403158265495619": 222, "504403158265495620": 222, "504403158265495621": 222, "q4": 222, "690": 222, "134313148716225": 222, "216172782113783811": 222, "216172782113783813": 222, "216172782113784707": 222, "216172782113784708": 222, "216172782113784709": 222, "216172782113783910": 222, "216172782113784104": 222, "216172782113784207": 222, "216172782113784318": 222, "216172782113784305": 222, "216172782113784597": 222, "216172782113784693": 222, "216172782113784018": 222, "216172782113784092": 222, "216172782113784108": 222, "216172782113784161": 222, "216172782113784162": 222, "73": [222, 244, 402], "216172782113783875": 222, "216172782113783932": 222, "216172782113784057": 222, "216172782113784068": 222, "216172782113784065": 222, "216172782113784235": 222, "216172782113784247": 222, "meaning": [222, 235, 248, 318], "449": 222, "454": [222, 244], "216172782113783810": 222, "descend": [222, 450], "216172782113784082": 222, "216172782113784169": 222, "216172782113784267": 222, "216172782113784368": 222, "216172782113784376": 222, "216172782113783938": 222, "216172782113784405": 222, "216172782113783980": 222, "216172782113783844": 222, "216172782113783901": 222, "216172782113783935": 222, "216172782113784439": 222, "216172782113784315": 222, "216172782113784374": 222, "216172782113784601": 222, "216172782113784431": 222, "216172782113783815": 222, "216172782113783817": 222, "216172782113783971": 222, "216172782113784154": 222, "216172782113784381": 222, "216172782113783933": 222, "earlier": [222, 407, 469], "216172782113783819": 222, "216172782113783826": 222, "216172782113783836": 222, "bi": [222, 239, 242], "query2": 222, "09": [222, 244], "07": [222, 231, 244, 375, 383], "hastag": 222, "count1": 222, "count2": 222, "jet_li": 222, "zhang_yim": 222, "faye_wong": 222, "tsui_hark": 222, "bruce_le": 222, "johnny_depp": 222, "tom_cruis": 222, "jackie_chan": 222, "query3": 222, "moder": 222, "infinit": [222, 417], "seriou": 222, "song": 222, "containerof": 222, "message_count": 222, "824633725780": 222, "08t02": 222, "334": [222, 244], "album": 222, "hao": 222, "wang": [222, 388, 390], "19791209300479": 222, "755914248304": 222, "02t20": 222, "03": [222, 244, 477], "344": 222, "wall": 222, "lin": 222, "lei": 222, "24189255811275": 222, "824633725045": 222, "02": [222, 383], "03t18": 222, "633": 222, "893353201782": 222, "28t23": 222, "53": [222, 244, 449], "251": 222, "1030792152809": 222, "03t09": 222, "47": [222, 233, 234, 244, 306, 307, 309], "414": 222, "chen": 222, "32985348833887": 222, "07t07": 222, "30": [222, 244, 306, 307, 309, 380, 425, 427, 432, 469, 487], "038": 222, "zhang": [222, 479], "yang": [222, 479], "15393162789707": 222, "query4": 222, "membercount": 222, "country_count": 222, "personcount": 222, "72057594037932503": 222, "72057594037932473": 222, "72057594037932489": 222, "72057594037932494": 222, "72057594037932501": 222, "72057594037934803": 222, "72057594037934804": 222, "72057594037935005": 222, "72057594037928132": 222, "72057594037935879": 222, "288230376151711799": 222, "country_top100_forums_dict": 222, "personcountforum": 222, "72057594037935702": 222, "72057594037930685": 222, "72057594037932114": 222, "72057594037934231": 222, "72057594037935703": 222, "72057594037935730": 222, "72057594037935734": 222, "72057594037932509": 222, "72057594037935707": 222, "72057594037935708": 222, "72057594037935711": 222, "72057594037935714": 222, "72057594037935719": 222, "72057594037935729": 222, "72057594037935731": 222, "72057594037935724": 222, "72057594037929560": 222, "72057594037931546": 222, "72057594037931545": 222, "72057594037932479": 222, "72057594037932485": 222, "72057594037932505": 222, "72057594037932511": 222, "72057594037935710": 222, "72057594037935722": 222, "72057594037929246": 222, "72057594037928266": 222, "72057594037935713": 222, "72057594037934308": 222, "72057594037934313": 222, "72057594037934302": 222, "72057594037930430": 222, "72057594037934303": 222, "72057594037932482": 222, "72057594037935147": 222, "72057594037935148": 222, "72057594037935157": 222, "72057594037927973": 222, "72057594037929386": 222, "72057594037934315": 222, "72057594037935720": 222, "72057594037935015": 222, "72057594037934300": 222, "72057594037930861": 222, "72057594037934319": 222, "72057594037931542": 222, "72057594037929583": 222, "72057594037933324": 222, "72057594037929182": 222, "72057594037929739": 222, "72057594037934829": 222, "72057594037935658": 222, "72057594037935660": 222, "72057594037935674": 222, "72057594037935682": 222, "72057594037935683": 222, "72057594037935672": 222, "72057594037927978": 222, "72057594037935163": 222, "72057594037935014": 222, "72057594037931544": 222, "72057594037934297": 222, "72057594037927979": 222, "72057594037932474": 222, "72057594037934384": 222, "72057594037932639": 222, "72057594037934380": 222, "72057594037935146": 222, "72057594037935152": 222, "72057594037928134": 222, "72057594037928674": 222, "72057594037929248": 222, "72057594037931240": 222, "72057594037931247": 222, "72057594037931256": 222, "72057594037930958": 222, "72057594037930963": 222, "72057594037931259": 222, "72057594037931260": 222, "72057594037931262": 222, "72057594037929365": 222, "72057594037929419": 222, "72057594037929421": 222, "72057594037929431": 222, "72057594037929434": 222, "72057594037929437": 222, "72057594037929446": 222, "72057594037929447": 222, "72057594037929449": 222, "72057594037929450": 222, "72057594037935166": 222, "72057594037929519": 222, "72057594037929451": 222, "72057594037929452": 222, "72057594037935046": 222, "72057594037932339": 222, "72057594037932481": 222, "72057594037934294": 222, "72057594037932389": 222, "72057594037932976": 222, "72057594037930870": 222, "72057594037931266": 222, "72057594037928092": 222, "72057594037928495": 222, "72057594037929510": 222, "72057594037929517": 222, "72057594037929961": 222, "72057594037929965": 222, "72057594037930242": 222, "72057594037930248": 222, "72057594037930250": 222, "72057594037930313": 222, "72057594037931547": 222, "72057594037935686": 222, "72057594037929052": 222, "72057594037929053": 222, "72057594037929055": 222, "72057594037929057": 222, "72057594037929060": 222, "72057594037934811": 222, "72057594037934813": 222, "72057594037934816": 222, "72057594037934821": 222, "72057594037934822": 222, "72057594037934823": 222, "72057594037934828": 222, "72057594037934835": 222, "72057594037934837": 222, "72057594037934975": 222, "72057594037934976": 222, "72057594037935032": 222, "72057594037935038": 222, "72057594037935045": 222, "72057594037935664": 222, "72057594037935673": 222, "72057594037935678": 222, "72057594037935685": 222, "72057594037931549": 222, "72057594037931550": 222, "72057594037931552": 222, "72057594037931554": 222, "72057594037931557": 222, "72057594037931560": 222, "72057594037931566": 222, "72057594037935671": 222, "72057594037935670": 222, "72057594037934977": 222, "72057594037931543": 222, "72057594037929518": 222, "72057594037935679": 222, "72057594037931575": 222, "72057594037932438": 222, "72057594037932878": 222, "72057594037932886": 222, "72057594037932888": 222, "72057594037927982": 222, "72057594037930526": 222, "72057594037930535": 222, "72057594037930546": 222, "72057594037930976": 222, "72057594037930536": 222, "72057594037931358": 222, "72057594037930366": 222, "72057594037931574": 222, "72057594037932435": 222, "72057594037935020": 222, "72057594037935864": 222, "72057594037933861": 222, "72057594037932440": 222, "72057594037927981": 222, "72057594037931349": 222, "72057594037931366": 222, "72057594037932885": 222, "72057594037927980": 222, "72057594037930529": 222, "72057594037930532": 222, "72057594037931304": 222, "72057594037932433": 222, "72057594037932441": 222, "72057594037934547": 222, "query11": 222, "live": 222, "startdat": 222, "enddat": 222, "216172782113784091": 222, "216172782113784250": 222, "216172782113784403": 222, "216172782113784537": 222, "216172782113784122": 222, "query14": 222, "country1": 222, "country2": 222, "subscor": 222, "award": [222, 479], "chile": 222, "case1": 222, "case2": 222, "case3": 222, "case4": 222, "216172782113784153": 222, "216172782113784100": 222, "216172782113783956": 222, "216172782113784673": 222, "216172782113784252": 222, "216172782113784263": 222, "216172782113784193": 222, "216172782113784242": 222, "216172782113784623": 222, "216172782113784498": 222, "216172782113784251": 222, "216172782113784538": 222, "216172782113784167": 222, "216172782113783864": 222, "216172782113784613": 222, "216172782113784116": 222, "faq": 223, "javasdk": [224, 473], "creation": [225, 306, 380], "transit": [225, 425, 453], "magnitud": [225, 238], "superior": [225, 237, 239, 243], "rich": [225, 236, 239, 241, 306, 308], "neg": [225, 226, 304, 308, 310, 312, 316, 321, 340, 418], "gsl": [225, 226, 236, 306, 307, 308, 309, 313, 320], "gat": [225, 241, 304, 312, 488], "deepwalk": [225, 304, 488], "trans": [225, 304, 488], "pyg": [225, 226, 229, 230, 241, 242, 243], "flexibli": [225, 236, 241, 243], "pytorch": [225, 226, 233, 236, 241, 310, 312], "onlin": [225, 238, 241, 242, 465, 469], "fed": [225, 237, 241], "dockerfil": [225, 311], "ek": 225, "aw": [225, 244, 480], "ack": 225, "failov": [225, 243], "concentr": [225, 243, 360], "secur": [226, 241, 242], "industri": [226, 236, 241, 243, 244], "feasibl": [226, 241], "preprocess": [226, 316], "uniformli": [226, 393, 394, 395, 403, 404, 405, 406, 407, 451], "lookup": [226, 241, 316, 456], "topolog": [226, 306], "nn": [226, 228, 231, 232, 233, 234, 237, 241, 247, 304, 316, 483, 488], "ego": [226, 241, 312, 457, 488], "dimension": [226, 232, 237, 241, 305, 307, 308], "conv": [226, 229, 241], "edge_index": [226, 229, 233, 234], "carri": 226, "predict": [226, 232, 236, 237, 241], "asynchron": 226, "tensor": [226, 229, 246, 247, 248, 287, 304, 308, 312, 314, 460, 462], "plaintext": 226, "clearli": [226, 241], "space": [226, 241, 305, 306, 310, 321, 355, 403, 404, 405, 406, 407], "dimens": [226, 228, 231, 232, 237, 241, 305, 403, 404, 405, 406, 448, 483], "batchgraph": 226, "mini": [226, 241], "loss": [226, 228, 231, 232, 233, 234, 237, 241, 316, 483, 488], "mind": 226, "classif": [226, 230, 237, 241, 245, 304, 305, 316], "trainer": [226, 228, 231, 232, 237, 304, 483, 488], "hk": 227, "rm": [227, 316], "4g": 227, "aarch64": 228, "processor": 228, "egographsag": [228, 231, 237, 483], "349": [228, 232, 237, 483], "venu": [228, 237], "confer": [228, 237, 308, 479], "www": [228, 231, 232, 237, 321, 375, 429, 438, 441, 469, 483], "tf": [228, 229, 231, 232, 237, 304, 305, 310, 311, 316, 483, 488], "disable_v2_behavior": [228, 231, 232, 237, 483], "importerror": [228, 231, 232, 237, 483], "load_ogbn_mag": [228, 231, 232, 235, 237, 483, 489], "egosagesuperviseddataload": [228, 232, 237, 483], "localtrain": [228, 231, 232, 237, 483], "node_typ": [228, 231, 232, 237, 304, 306, 307, 310, 313, 316, 320, 483, 488], "class_num": [228, 232, 237, 304, 483, 488], "features_num": [228, 231, 232, 237, 304, 483, 488], "hops_num": [228, 232, 237, 304, 483, 488], "nbrs_num": [228, 231, 232, 237, 483], "epoch": [228, 229, 231, 232, 233, 234, 237, 304, 309, 467, 483, 488], "hidden_dim": [228, 231, 232, 237, 304, 316, 483, 488], "256": [228, 232, 233, 234, 237, 244, 385, 445, 469, 483], "in_drop_r": [228, 232, 237, 483], "learning_r": [228, 231, 232, 237, 316, 483], "reset_default_tf_graph": [228, 232, 237, 483], "act_func": [228, 232, 237, 483], "relu": [228, 232, 237, 483], "dropout": [228, 231, 232, 237, 316, 483], "train_data": [228, 231, 232, 237, 483], "mask": [228, 232, 237, 320, 483], "train_embed": [228, 232, 237, 483], "src_ego": [228, 231, 232, 237, 483], "train_label": [228, 232, 237, 483], "reduce_mean": [228, 232, 237, 304, 316, 483, 488], "sparse_softmax_cross_entropy_with_logit": [228, 232, 237, 304, 316, 483, 488], "logit": [228, 232, 237, 316, 483], "adamoptim": [228, 231, 232, 237, 316, 483], "test_embed": [228, 232, 237, 483], "test_label": [228, 232, 237, 483], "test_indic": [228, 232, 237, 483], "argmax": [228, 232, 233, 234, 237, 483], "output_typ": [228, 232, 237, 291, 460, 483], "test_acc": [228, 232, 233, 234, 237, 483], "div": [228, 232, 237, 483], "reduce_sum": [228, 232, 237, 483], "cast": [228, 232, 235, 237, 316, 468, 483], "float32": [228, 232, 233, 234, 237, 307, 316, 483], "obgn": [228, 232], "mag": [228, 232, 237, 483], "paper_featur": [228, 237, 483], "feat_": [228, 231, 232, 233, 234, 237, 483], "128": [228, 231, 232, 233, 234, 237, 316, 483], "lg": [228, 231, 232, 237, 299, 463, 477, 483], "cite": [228, 231, 232, 237, 483], "gen_label": [228, 231, 232, 237, 299, 463, 483], "val": [228, 231, 232, 237, 304, 320, 463, 483, 488], "85": [228, 231, 232, 237, 244, 247, 463, 483], "seed": [229, 304, 312, 316, 375, 378, 379, 380, 381, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 410, 411, 412, 413, 416, 448, 451, 453], "sampler": [229, 231, 309, 312, 314], "perceptu": 229, "unsupervis": [229, 231, 245, 304, 310, 312, 313, 463], "mainstream": [229, 308, 309], "putback": 229, "outofrangeerror": [229, 309, 310, 316], "evolv": [229, 236, 469], "neighborsampl": [229, 308], "edge_weight": [229, 308, 310], "random_with_replac": 229, "topk": [229, 308, 310], "pad": [229, 308], "expand_factor": [229, 308, 313], "sparsenod": [229, 307, 308, 310], "sparseedg": [229, 307, 308, 310], "layer1": [229, 308], "layer2": [229, 308], "neighbor_sampl": [229, 308], "bui": [229, 236, 307, 308, 309, 310, 313, 316], "i2i": [229, 308, 310], "layer_nod": [229, 308], "int_attr": [229, 307, 308, 309, 313, 316], "layer_edg": [229, 308], "float_attr": [229, 307, 308, 309, 313, 316], "egograph": [229, 241, 304, 312, 488], "negativesampl": [229, 313], "node_weight": [229, 310, 313], "edge_sampl": [229, 309, 313], "negative_sampl": [229, 304, 313, 488], "neg_nod": [229, 313], "heterogen": [229, 232, 237, 239, 241, 305, 306, 307, 308, 310], "randomli": [229, 310, 375, 381, 385, 387, 396, 398, 403, 406, 411, 453], "outv": [229, 304, 308, 310, 316, 487, 488], "overs": 229, "citat": [230, 232, 233, 234, 237, 245, 316, 483], "revisit": [230, 231, 245], "ho2": 230, "with_dataset": [231, 233, 303, 463, 489], "k8s_service_typ": [231, 233, 303, 463, 483], "loadbalanc": [231, 463, 483], "k8s_image_pull_polici": [231, 233, 303, 463], "cell": [231, 449], "metainfo": 231, "obgn_mag": 231, "ogbn_mag_smal": [231, 235, 483, 489], "chose": [231, 232], "i_featur": [231, 232], "argpars": [231, 233], "tfg": 231, "egosageunsuperviseddataload": 231, "parse_arg": [231, 233], "argumentpars": [231, 233], "egosag": 231, "add_argu": [231, 233], "output_dim": [231, 304, 488], "neg_num": 231, "0001": 231, "agg_typ": 231, "drop_out": 231, "neg_sampl": 231, "temperatur": 231, "dim": [231, 233, 234, 403, 404, 405, 406], "src_emb": [231, 304, 488], "dst_emb": 231, "dst_ego": 231, "neg_dst_emb": 231, "neg_dst_ego": 231, "unsupervised_softmax_cross_entropy_loss": 231, "ogbn": [232, 233, 234, 237, 483], "academ": [232, 237, 483], "microsoft": [232, 237, 483], "institut": [232, 237, 483], "accomplish": [232, 237, 375], "word2vec": [232, 237, 483], "load_ogbn_arxiv": [233, 234], "num_server_nod": 233, "num_client_nod": 233, "ogbn_arxiv": [233, 234], "8gi": 233, "ifnotpres": [233, 463], "0a20240115": 233, "glt_graph": [233, 234], "graphlearn_torch": [233, 234], "node_featur": [233, 234], "node_label": [233, 234, 463], "edge_dir": [233, 234], "random_node_split": [233, 234], "num_val": [233, 234], "num_test": [233, 234], "num_client": [233, 234], "manifest_path": 233, "client_folder_path": 233, "kubeflow": [233, 315], "pytorchjob": 233, "torch": [233, 234], "pytorchreplicaspec": 233, "restartpolici": 233, "onfailur": 233, "imagepullpolici": 233, "node_rank": 233, "master_addr": [233, 234], "volumemount": 233, "medium": 233, "sizelimit": 233, "num_worker_replica": 233, "my_pod_nam": 233, "group_mast": 233, "valuefrom": 233, "fieldref": 233, "fieldpath": 233, "distributeddataparallel": 233, "torch_geometr": [233, 234], "glt": [233, 234], "gl_torch_graph": 233, "gltorchgraph": 233, "no_grad": [233, 234], "test_load": [233, 234], "dataset_nam": [233, 234], "eval": [233, 234, 460], "y_true": [233, 234], "devic": [233, 234, 244], "del": [233, 234, 318, 456], "y_pred": [233, 234], "keepdim": [233, 234], "run_client_proc": 233, "num_serv": [233, 234], "client_rank": [233, 234], "server_rank_list": 233, "training_pg_master_port": 233, "init_cli": [233, 234], "master_port": [233, 234], "server_client_master_port": [233, 234], "num_rpc_thread": [233, 234], "client_group_nam": 233, "k8s_glt_client": 233, "is_dynam": [233, 234], "current_ctx": 233, "get_context": 233, "init_process_group": 233, "gloo": 233, "world_siz": 233, "init_method": 233, "train_load": [233, 234], "distneighborload": [233, 234], "num_neighbor": [233, 234], "input_nod": [233, 234], "collect_featur": [233, 234], "to_devic": [233, 234], "worker_opt": [233, 234], "remotedistsamplingworkeropt": [233, 234], "server_rank": 233, "worker_devic": [233, 234], "worker_concurr": [233, 234], "buffer_s": [233, 234], "256mb": 233, "prefetch_s": [233, 234], "workload_typ": [233, 234], "in_channel": [233, 234], "hidden_channel": [233, 234], "num_lay": [233, 234], "out_channel": [233, 234], "device_id": 233, "adam": [233, 234], "lr": [233, 234], "001": 233, "arxiv": [233, 234, 321, 364, 379, 380, 381, 395, 448], "zero_grad": [233, 234], "log_softmax": [233, 234], "nll_loss": [233, 234], "backward": [233, 234, 241, 310, 407, 463], "03d": [233, 234], "04f": 233, "barrier": 233, "accuraci": [233, 234, 241], "4f": [233, 234], "shutdown": 233, "shutdown_cli": [233, 234], "__name__": [233, 316], "__main__": [233, 316], "supervis": [233, 237, 245, 305, 308, 316, 463, 483], "sage": 233, "9997": 233, "train_loader_master_port": 233, "9998": 233, "test_loader_master_port": 233, "9999": 233, "9001": 233, "9002": 233, "9003": 233, "9004": 233, "k8s_launch": 233, "ogb": 234, "nodeproppr": 234, "unsqueez": 234, "acc": 234, "512": [234, 310], "1gb": 234, "shut": 234, "trivial": [235, 243, 372], "bucket": [235, 463, 479], "_e": [235, 318, 465, 489], "ldbc_sampl": [235, 469, 487, 489], "person_0_0": [235, 469, 484, 489], "didn": [235, 244], "person_knows_person_0_0": [235, 469, 484, 489], "comment_0_0": [235, 484, 489], "person_likes_comment_0_0": [235, 489], "deal": [235, 239, 308], "unseen": [235, 241, 471], "person_likes_post_0_0": [235, 489], "post_0_0": [235, 489], "ndarrai": [235, 248, 263, 274, 307, 308, 310, 313, 318, 320, 456, 489], "apart": [235, 403], "comment_replyof_comment_0_0": [235, 484, 489], "datasourc": [235, 489], "col_0": [235, 489], "col_1": [235, 489], "coo": [235, 467, 489], "array_v": [235, 489], "col": [235, 489], "array_": [235, 489], "s3": [235, 318, 489], "hood": 235, "distributedli": [235, 306, 312, 314, 315, 316], "fsspec": [235, 489], "kwarg": [235, 247, 248, 255, 266, 278, 282, 283, 300, 303, 313, 318, 319, 320, 463], "ds1": [235, 489], "datafil": [235, 489], "ds2": [235, 489], "graphscope_bucket": [235, 489], "hangzhou": [235, 305, 489], "ds3": [235, 489], "9000": [235, 469, 489], "extra_conf": [235, 489], "conf1": [235, 489], "d34": [235, 489], "client_kwarg": [235, 489], "region_nam": [235, 489], "east": [235, 489], "ossf": [235, 489], "subclass": [235, 246, 456], "abstractfilesystem": [235, 489], "abstractbufferfil": 235, "_upload_chunk": [235, 489], "_initiate_upload": [235, 489], "_fetch_rang": [235, 489], "register_implement": [235, 489], "protocol_nam": [235, 489], "protocol_file_system": [235, 489], "direction": 235, "exce": [235, 414, 415], "super": [235, 247, 306, 310], "precis": [235, 241, 448], "modular": [236, 448], "rapidli": [236, 308], "seller": 236, "buyer": [236, 240], "fraudul": 236, "sell": 236, "suspici": 236, "fraud": [236, 243], "feed": [236, 299, 304, 307, 310, 316, 320, 463, 488], "webui": 236, "diversifi": 236, "ingest": [236, 469], "rapid": 236, "parti": [236, 436], "analyst": 236, "gaia": [236, 487], "resembl": [236, 448, 453, 455], "olap": 236, "gen": [236, 310], "dataflow": [236, 238], "arriv": 236, "financi": 236, "billion": [236, 239, 243], "preval": 236, "miniconda": 237, "scientif": 237, "field_of_studi": [237, 483], "subject": 237, "4307": [237, 483], "n1": 237, "n2": 237, "proven": 237, "2014": [237, 321, 483], "2020": [237, 483], "ret1": [237, 483], "k_core": [237, 247, 321, 457, 479, 483], "ret2": [237, 483], "kcore": [237, 483], "downstream": [237, 310], "train_sag": 237, "130": [237, 483], "conduit": 237, "icde2023": 238, "sigmod2017": [238, 479, 485], "gra": 238, "ph": 238, "arallel": 238, "ngine": 238, "opensourc": 238, "raph": 238, "nalysi": 238, "elat": 238, "ransact": 238, "loos": [238, 243, 465], "mysql": [238, 465], "nutshel": [238, 465], "exploit": [238, 465], "ahead": [238, 465], "wal": [238, 465], "etriev": 238, "terfac": 238, "portabl": [238, 468], "rust": [238, 468, 469], "handler": [238, 463], "chive": 238, "guardian": 238, "galaxi": 238, "steal": 238, "tackl": [238, 239], "imbal": 238, "nvlink": 238, "acut": 238, "asymmetr": 238, "holist": 238, "innov": 238, "speedup": 238, "cncf": 238, "sandbox": 238, "soon": [238, 242, 243, 244, 307], "amplifi": 238, "dissoci": 238, "ly": 238, "dag": [238, 247, 248, 266, 318, 456, 460, 463], "laptop": 238, "loop": [238, 321, 331, 344, 383, 385, 387, 389, 395, 403, 404, 405, 406, 407, 413, 416, 456, 457, 487], "correl": [238, 321], "subtask": 238, "earli": 238, "nsdi": [238, 485], "legaci": 238, "interchang": 238, "memoiz": 238, "vldb2021": 238, "artial": 238, "ncrement": 238, "transport": 239, "protein": [239, 397], "uncov": 239, "vari": [239, 305], "unless": [239, 308, 456], "discov": 239, "discoveri": [239, 241, 463, 469], "rough": 239, "accordingli": [239, 296], "snap": 239, "stanford": [239, 447], "cs224w": 239, "constitu": 239, "bellman": [239, 321], "ford": [239, 321], "wiki": [239, 247, 418, 422, 423, 424, 425, 427, 428, 429, 435, 436, 437, 438, 440, 441, 442, 443], "s_algorithm": 239, "towardsdatasci": 239, "9bd8951e7da": 239, "road": [239, 471], "logist": 239, "deliveri": 239, "media": 239, "nontrivi": [239, 428], "steep": 239, "sought": 239, "monei": [240, 243], "launder": [240, 243], "exact": [240, 385, 387, 483], "exclud": 240, "purchas": 240, "bolder": 240, "border": 240, "sens": [240, 448, 463], "worst": 240, "embrac": 240, "grasp": 240, "drug": 241, "likelihood": 241, "biologi": 241, "valuabl": 241, "bioinformat": 241, "chemic": 241, "promis": 241, "driven": [241, 448, 468], "carefulli": 241, "rewind": 241, "stack": 241, "convolut": [241, 312], "weigh": 241, "choic": [241, 468, 469], "huge": [241, 471], "gradient": 241, "recal": 241, "f1": [241, 318], "assess": [241, 316, 433], "irregular": 241, "unstructur": 241, "pool": 241, "hardwar": [241, 472], "undergo": 241, "perceiv": 241, "maxgraph": [242, 485], "2x": 242, "excel": 242, "elast": [242, 469], "encrypt": 242, "geminigraph": [243, 244], "plato": [243, 244], "empir": 243, "enjoi": 243, "janusgraph": 243, "nebula": 243, "dbm": 243, "relaunch": [243, 469], "recoveri": 243, "coars": 243, "grain": 243, "invest": 243, "trace": [243, 247], "dgl": 243, "nebular": 243, "movement": [243, 310], "grade": 244, "r6": 244, "8xlarg": 244, "alibabacloud": 244, "ec": 244, "xl": 244, "a038f97": 244, "170e7d3": 244, "21009d6": 244, "v4": 244, "mpich": 244, "fair": 244, "huge_pag": 244, "jemalloc": 244, "o3": 244, "stub": [244, 250, 252, 385, 413, 416], "determinist": [244, 249, 463, 469], "cdlp": [244, 247, 479], "load_direct": 244, "load_undirected_from_direct": 244, "reformat": 244, "mark": [244, 321], "datagen": 244, "9_0": 244, "fb": 244, "62": 244, "9_1": 244, "78": [244, 375, 449], "9_2": 244, "zf": 244, "88": [244, 388, 390], "60": [244, 321, 449, 469], "61": 244, "176": [244, 412], "graph500": 244, "71": [244, 321, 393, 397, 403], "79": [244, 388, 390], "friendster": 244, "97": 244, "39": [244, 306, 307, 309, 321, 449, 479, 481], "86": 244, "57": 244, "126": [244, 389], "98": 244, "83": 244, "66": 244, "1695": 244, "2742": 244, "3600": 244, "425": 244, "55": [244, 355], "lcc": 244, "521": 244, "51": [244, 449], "296": 244, "1859": 244, "201": [244, 452], "842": 244, "68": 244, "competitor": 244, "pagerank_loc": 244, "65": 244, "72": 244, "84": 244, "63": [244, 392, 394], "gunrock": 244, "0c9a96": 244, "grout": 244, "5ce160": 244, "v7": 244, "v10": 244, "gn6v": 244, "c8g1": 244, "16xlarg": 244, "8x": 244, "16gb": 244, "nvidia": 244, "v100": 244, "gb": 244, "soc": [244, 376, 377], "livejournal1": 244, "89": 244, "9345": 244, "215": [244, 445], "560": 244, "3029": 244, "129": [244, 411], "389": 244, "155": 244, "0549": 244, "sinaweibo": 244, "1649": 244, "647": 244, "orkut": 244, "105": [244, 376, 377], "121": 244, "193": 244, "658": 244, "3201": 244, "7677": 244, "137": [244, 383], "2139": 244, "319": 244, "261": 244, "69": [244, 443, 449], "235": 244, "567": 244, "283": 244, "073": 244, "6619": 244, "45": [244, 306, 307, 309, 385], "150": 244, "87299": 244, "162": 244, "60403": 244, "9676": 244, "141": 244, "347": 244, "7772": 244, "0118": 244, "306": 244, "8618": 244, "9134": 244, "467": 244, "60801": 244, "8666": 244, "3501": 244, "870": 244, "6451": 244, "198": 244, "829": 244, "5036": 244, "229": 244, "024": 244, "483": 244, "178": 244, "5593": 244, "807": 244, "367": 244, "6946": 244, "2339": 244, "jupyt": [245, 463], "notebook": [245, 463], "jupyterlab": 245, "playground": [245, 490], "bipartit": [245, 304, 306, 362, 410, 411, 412, 444, 488], "grapeengin": 246, "vineyardserv": 246, "grapeinst": 246, "graphscopeserv": 246, "inlin": 246, "dag_fil": 246, "dagfil": 246, "rundagfil": 246, "subscrib": 246, "charg": 246, "commspec": [246, 465, 468, 470], "comm_spec": [246, 465, 468, 470], "vineyard_socket": 246, "bl": 246, "dispatchresult": 246, "onrec": 246, "commanddetail": 246, "gsobject": 246, "objectmanag": 246, "appentri": 246, "icontextwrapp": 246, "ifragmentwrapp": 246, "projector": 246, "propertygraphutil": 246, "objecttyp": 246, "putobject": 246, "obj": 246, "removeobject": 246, "getobject": [246, 469, 470], "hasobject": 246, "analyticalserv": 246, "startserv": 246, "stopserv": 246, "engineconfig": 246, "tojsonstr": 246, "vineyard_rpc_endpoint": 246, "enable_java_sdk": 246, "setcommand": 246, "aggregatepolici": 246, "kpickfirst": 246, "kpickfirstnonempti": 246, "krequireconsist": 246, "kconcat": 246, "kpickfirstnonemptygraphdef": 246, "kmergegraphdef": 246, "worker_id": 246, "error_cod": 246, "set_error": 246, "has_large_data": 246, "set_graph_def": 246, "graphdefpb": 246, "graph_def": 246, "set_data": 246, "large_data": 246, "inarch": 246, "arc": 246, "aggregate_polici": 246, "fragmentwrapp": 246, "addcolumn": 246, "vdata_t": 246, "edata_t": 246, "arrowvertexmap": 246, "internaltyp": 246, "arrowprojectedfragmentbas": 246, "bareregist": 246, "internal_oid_t": 246, "property_graph_typ": 246, "eid_typ": 246, "vertexrang": [246, 249], "inner_vertices_t": 246, "outer_vertices_t": 246, "vertices_t": 246, "sub_vertices_t": 246, "nbr_t": 246, "arrow_projected_fragment_impl": 246, "compact_nbr_t": 246, "compactnbr": 246, "nbrunit": 246, "compact_adj_list_t": 246, "compactadjlist": 246, "const_adj_list_t": 246, "const_compact_adj_list_t": 246, "property_vertex_map_t": 246, "arrowprojectedvertexmap": 246, "label_id_typ": 246, "prop_id_typ": 246, "property_graph_t": 246, "eid_array_t": 246, "data_t": 246, "inner_vertex_array_t": 246, "outer_vertex_array_t": 246, "objectmeta": 246, "preparetorunapp": 246, "prepareconf": 246, "fnum": [246, 249], "vertex_prop_id": 246, "edge_prop_id": 246, "mirrorvertic": 246, "getid": 246, "getinternalid": 246, "getfragid": 246, "typedarrai": 246, "value_typ": 246, "gid2vertex": 246, "vertex2gid": 246, "getinnerverticesnum": 246, "getouterverticesnum": 246, "getverticesnum": 246, "getedgenum": [246, 470], "getinedgenum": [246, 470], "getoutedgenum": [246, 470], "getoutgoingedgenum": 246, "getincomingedgenum": 246, "gettotalverticesnum": 246, "isinnervertex": 246, "getoutervertex": 246, "getinnervertexid": 246, "getinnervertexinternalid": 246, "getoutervertexid": 246, "getoutervertexinternalid": 246, "gid2oid": 246, "oid2gid": 246, "innervertexgid2vertex": 246, "outervertexgid2vertex": 246, "getoutervertexgid": 246, "getinnervertexgid": 246, "compact_": 246, "enable_if": 246, "getincominginnervertexadjlist": 246, "getoutgoinginnervertexadjlist": 246, "getincomingoutervertexadjlist": 246, "getoutgoingoutervertexadjlist": 246, "src_fid": 246, "dst_fid": 246, "getlocaloutdegre": 246, "getlocalindegre": 246, "destlist": 246, "iedest": 246, "oedest": 246, "ioedest": 246, "getvertexmap": 246, "get_out_edges_ptr": 246, "get_in_edges_ptr": 246, "get_oe_offsets_begin_ptr": 246, "get_oe_offsets_end_ptr": 246, "get_ie_offsets_begin_ptr": 246, "get_ie_offsets_end_ptr": 246, "get_edata_array_accessor": 246, "get_vdata_array_accessor": 246, "get_arrow_frag": 246, "vertex_map_id": 246, "local_vertex_map": [246, 470], "getoid": 246, "getgid": 246, "offset2lid": 246, "getoffsetfromlid": 246, "getlidfromgid": 246, "getfidfromgid": 246, "oid_t_": 246, "vid_t_": 246, "arrowfragmentload": 246, "efil": [246, 470], "vfile": [246, 470], "graph_info": 246, "leaf": [246, 248, 293, 321, 366, 450], "table_vec_t": 246, "loadvertexedget": 246, "loadvertext": 246, "loadedget": 246, "loadfrag": 246, "loadfragmentasfragmentgroup": 246, "addlabelstofrag": 246, "frag_id": [246, 465, 470], "adddatatoexistedvlabel": 246, "adddatatoexistedelabel": 246, "addlabelstofragmentasfragmentgroup": 246, "extendlabeldata": 246, "extend_typ": 246, "initpartition": 246, "doxygenclass": 246, "arrowfragmentappend": 246, "doxygen": 246, "runner": [246, 479], "_build": 246, "appbas": 246, "defaultmessagemanag": 246, "need_split_edg": 246, "konlyout": 246, "propertyappbas": 246, "propertymessagemanag": 246, "propertyautoappbas": 246, "propertyautomessagemanag": 246, "app_t": 246, "defaultwork": 246, "parallelenginespec": 246, "pe_spec": 246, "defaultparallelenginespec": 246, "getcontext": 246, "ostream": 246, "parallelpropertywork": 246, "parallelpropertymessagemanag": 246, "propertyautowork": 246, "pointer": 246, "appfram": 246, "creatework": 246, "deletework": 246, "lib_path": 246, "worker_handl": 246, "queryarg": 246, "query_arg": [246, 291, 460], "context_kei": 246, "frag_wrapp": 246, "functiontyp": 246, "argsnum": 246, "argsunpack": 246, "datatyp": 246, "argtypeat": 246, "defaultpropertywork": 246, "ctx_t": 246, "ctxwrapperbuild": 246, "contextwrapp": 246, "vertexpropertycontext": [246, 479], "contextbas": 246, "labeledvertexdatacontext": 246, "contextdatatyp": 246, "icolumn": 246, "get_column": 246, "get_typed_column": 246, "vertex_properti": [246, 247, 249], "properties_map": 246, "vertexdatacontextwrapp": 246, "ivertexdatacontextwrapp": 246, "fragment_wrapp": 246, "unique_ptr": 246, "tondarrai": 246, "todatafram": 246, "tovineyardtensor": 246, "tovineyarddatafram": 246, "toarrowarrai": 246, "tensorcontext": [246, 248], "set_shap": 246, "tensor_t": 246, "tensorcontextwrapp": 246, "itensorcontextwrapp": 246, "cmake_extra_opt": 247, "asset": 247, "labeled_vertex_data": 247, "dynamic_vertex_data": 247, "labeled_vertex_properti": 247, "cpp_pregel": 247, "cython_pi": 247, "cython_pregel": 247, "appdagnod": [247, 282, 288], "__init__": [247, 304, 311, 318, 319, 320, 456, 457, 459, 463, 469, 488], "bytesio": [247, 255], "is_compat": 247, "graphdagnod": [247, 259, 273, 274, 290, 297, 299, 318, 319, 463], "invalidargumenterror": [247, 463], "scannererror": 247, "incorrect": 247, "signatur": [247, 310, 456], "full_jar_path": [247, 479], "java_app_class": [247, 479], "neccessari": 247, "resouc": 247, "__call__": 247, "qualifi": [247, 479], "app_asset": [247, 259, 265], "app_nod": 247, "__del__": 247, "unload": [247, 270, 288, 290], "attribute_assortativity_coeffici": [247, 479], "assort": 247, "ref": [247, 468], "joint": [247, 413, 414, 415, 416, 457], "newman": [247, 321, 385, 387, 448], "026126": 247, "2003": [247, 321, 378, 385, 396, 404], "numeric_assortativity_coeffici": [247, 479], "analog": 247, "k_": [247, 357, 421], "rac": 247, "s_i": 247, "sum_": [247, 321, 389], "w_": [247, 321, 389], "ij": [247, 321], "k_j": 247, "valueerror": [247, 303, 318, 321, 395, 452, 463], "barrat": 247, "barth\u00e9lemi": 247, "pastor": 247, "satorra": 247, "vespignani": 247, "pna": 247, "101": [247, 485], "3747": 247, "3752": 247, "2004": [247, 410], "average_shortest_path_length": [247, 321, 457, 479], "frac": [247, 321, 331, 389], "vertexdatacontextdagnod": [247, 248], "avg_clust": [247, 479], "degree_threshold": 247, "threshold": [247, 403, 404, 405, 406], "1e9": 247, "unweight": [247, 321], "foster": 247, "grassberg": 247, "paczuski": 247, "107": [247, 409], "10815": 247, "1e": [247, 316, 321, 375], "06": [247, 321], "html": [247, 321, 405, 408, 417, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436, 438], "gv": 247, "hits_algorithm": 247, "vertexpropertycontextdagnod": [247, 248], "is_simple_path": [247, 479], "nonempti": 247, "biject": [247, 451], "smallest": [247, 408, 428, 438], "pairwis": 247, "k_shell": [247, 479], "katz_centrality_numpi": [247, 321], "auttenu": 247, "maximun": 247, "min_progress": 247, "progress_tri": 247, "progress": [247, 400], "met": 247, "blondel": 247, "et": [247, 453], "al": [247, 453], "stat": [247, 403, 405], "mech": 247, "10008": 247, "2008": [247, 375, 398], "sotera": 247, "lpa_u2i": [247, 479], "labeledvertexpropertycontextdagnod": [247, 248], "pagerank_nx": [247, 479], "max_it": [247, 321, 375], "tol": [247, 321, 375], "solver": 247, "voterank": [247, 479], "unsign": [247, 469], "basecontextdagnod": [248, 318], "bound_app": [248, 265], "contextdagnod": 248, "to_vineyard_tensor": [248, 462, 479], "to_vineyard_datafram": [248, 462, 479], "lazi": [248, 318, 463], "sg": 248, "resultdagnod": [248, 283], "r4": [248, 471], "62586": 248, "comparis": 248, "alphabet": [248, 462], "tensorcontextdagnod": 248, "quer": 248, "labeledvertexdatacontextdagnod": 248, "label_nam": [248, 462], "column_nam": [248, 462], "labeld": 248, "context_nod": 248, "result_schema": 248, "referenc": 248, "dynamicvertexdatacontext": 248, "dag_nod": 248, "get_str": 249, "get_doubl": 249, "edge_label_id": 249, "edge_label_nam": 249, "incoming_edg": 249, "register_aggreg": 249, "pregelaggregatortyp": 249, "aggr_typ": 249, "get_aggregated_valu": 249, "get_total_vertices_num": 249, "vertex_property_num": 249, "vertex_label_nam": 249, "vertex_label_id": 249, "edge_property_num": 249, "get_vertex_label_by_id": 249, "get_vertex_label_id_by_nam": 249, "get_edge_label_by_id": 249, "get_edge_label_id_by_nam": 249, "edge_properti": 249, "get_vertex_property_id_by_nam": 249, "vertex_property_nam": [249, 468], "get_vertex_property_by_id": 249, "vertex_property_id": 249, "get_edge_property_id_by_nam": 249, "edge_property_nam": 249, "get_edge_property_by_id": 249, "edge_property_id": 249, "kboolandaggreg": 249, "kbooloraggreg": 249, "kbooloverwriteaggreg": 249, "overwritten": 249, "kdoubleminaggreg": 249, "kdoublemaxaggreg": 249, "kdoublesumaggreg": 249, "kdoubleproductaggreg": 249, "kdoubleoverwriteaggreg": 249, "kint64minaggreg": 249, "kint64maxaggreg": 249, "kint64sumaggreg": 249, "kint64productaggreg": 249, "kint64overwriteaggreg": 249, "ktextappendaggreg": 249, "kalongoutgoingedgetooutervertex": 249, "kalongincomingedgetooutervertex": 249, "kalongedgetooutervertex": 249, "get_total_nodes_num": 249, "get_nodes_num": 249, "get_inner_nodes_num": 249, "get_outer_nodes_num": 249, "outer_nod": 249, "get_node_fid": 249, "is_inner_nod": 249, "is_outer_nod": 249, "get_nod": [249, 307], "get_outer_nod": 249, "get_node_id": 249, "get_incoming_edg": 249, "has_child": 249, "child": [249, 358, 450], "has_par": 249, "parent": [249, 251, 291, 296, 450], "get_indegre": 249, "get_outdegre": 249, "kmaxaggreg": 249, "ksumaggreg": 249, "kproductaggreg": 249, "koverwriteaggreg": 249, "subproject": 251, "scratch": 251, "never": [251, 456], "hopefulli": 251, "dmaven": 251, "antrun": 251, "jni": 251, "gae_java": 252, "graphscope_typ": 254, "graphscopetyp": 254, "myalgorithm": 254, "filenotfounderror": 255, "typeerror": [255, 291, 463], "arrowproperti": [256, 318], "subrang": 256, "loader_op": 257, "notimplementederror": 257, "run_app": [262, 263, 278, 286, 287], "copy_typ": 264, "session_id": [266, 270, 291, 318, 319, 456, 460], "graph_typ": [266, 456], "graphtyp": [266, 456, 465, 470], "view_typ": 267, "vertex_or_edge_label_list": 268, "graph_util": 268, "vertexlabel": 268, "op_typ": [270, 291, 460], "uiliti": 270, "interactive_queri": [275, 463], "gremlin_script": [275, 319], "request_opt": [275, 319], "interactivequerydagnod": 275, "modify_typ": [276, 277], "attr": [276, 277, 291, 310, 323, 324, 325, 456, 459], "type_pb2": [276, 277, 281], "nx_add_edg": 276, "nx_del_edg": 276, "nx_update_edg": 276, "nx_add_nod": 277, "nx_del_nod": 277, "nx_update_nod": 277, "fd": [278, 283, 479], "storage_opt": [278, 283], "write_opt": [278, 283], "adaptor": 278, "result_path": [278, 283], "vertex_collect": 279, "edge_collect": 279, "report_typ": 281, "variati": 281, "node_num": [281, 483, 487], "has_nod": [281, 456], "has_edg": [281, 456], "node_data": 281, "neighbors_by_nod": 281, "succs_by_nod": 281, "preds_by_nod": 281, "neighbors_by_loc": 281, "succs_by_loc": 281, "preds_by_loc": 281, "deg_by_nod": 281, "in_deg_by_nod": 281, "out_deg_by_nod": 281, "deg_by_loc": 281, "in_deg_by_loc": 281, "out_deg_by_loc": 281, "nodes_by_loc": 281, "loc": 281, "multigraph": [281, 321, 323, 331, 335, 344, 349, 350, 376, 377, 385, 387, 400, 401, 402, 456, 459], "multidigraph": [281, 323, 335, 344, 349, 350, 387, 395, 396, 454, 456], "large_attr": [291, 460], "types_pb2": [291, 456], "operationtyp": 291, "opdef": [291, 295], "attrvalu": [291, 318, 487], "largeattrvalu": 291, "op_def_pb2": 295, "incoming_data": [297, 318, 463], "as_default": [297, 463], "alia": [302, 304, 310, 456, 463, 488], "k8s_gs_imag": [303, 463, 481], "k8s_etcd_imag": 303, "k8s_image_pull_secret": [303, 463], "k8s_coordinator_cpu": [303, 463], "k8s_coordinator_mem": [303, 463], "k8s_vineyard_cpu": [303, 463], "k8s_mars_worker_cpu": [303, 463], "k8s_mars_worker_mem": [303, 463], "k8s_mars_scheduler_cpu": [303, 463], "k8s_mars_scheduler_mem": [303, 463], "with_mar": [303, 463], "k8s_waiting_for_delet": [303, 463], "dataset_download_retri": 303, "k8s_deploy_mod": [303, 463], "kv": 303, "cooper": [304, 318], "\u02bbegograph": 304, "\u02bbegotensor": 304, "sample_se": [304, 488], "positive_sampl": [304, 488], "receptive_fn": [304, 488], "egotensor": [304, 312, 488], "egoflow": [304, 312, 488], "cora": [304, 316, 488], "convers": [304, 305, 465], "node_t": [304, 305, 316, 488], "edge_table_with_self_loop": [304, 488], "train_tabl": [304, 488], "val_tabl": [304, 488], "test_tabl": [304, 488], "dataset_fold": [304, 488], "decod": [304, 305, 306, 316, 488], "attr_typ": [304, 305, 306, 316, 488], "1433": [304, 316, 488], "attr_delimit": [304, 305, 306, 488], "learningbasedmodel": [304, 488], "categorical_attrs_desc": [304, 488], "_sample_se": [304, 488], "_positive_sampl": [304, 488], "_receptive_fn": [304, 488], "ego_flow": [304, 488], "src_ego_spec": [304, 488], "pos_src_ego_tensor": [304, 488], "identityencod": [304, 488], "widendeepencod": [304, 488], "feature_encod": [304, 488], "gcnconv": [304, 488], "sparseegographencod": [304, 488], "_encod": [304, 488], "conv_lay": [304, 488], "_supervised_loss": [304, 488], "full_graph_mod": [304, 488], "localtftrain": [304, 488], "model_fn": [304, 316, 488], "load_graph": [304, 488], "server_id": [304, 488], "server_count": [304, 306, 316, 488], "tracker": [304, 316, 488], "bought": 305, "saturdai": 305, "morn": 305, "bigint": 305, "dst_id": [305, 306, 307, 309, 310, 316, 320], "shanghai": 305, "localfilesystem": 305, "pai": [305, 310, 311], "tab": 305, "s2": [305, 421], "215340": 305, "933091": 305, "grei": 305, "362519": 305, "097545": 305, "chapter": [305, 306, 308, 402, 439], "dscript": 305, "dentryfil": 305, "dtabl": 305, "prj": 305, "define_str": 305, "node_sourc": 305, "edge_sourc": 305, "hash": [305, 318], "bucket_s": 305, "greatli": [305, 306, 468], "your_attr_typ": 305, "you_delimit": 305, "scr_id": 305, "10001": [305, 306, 307, 309], "feature1": 305, "10002": [305, 306, 307, 309], "feature2": 305, "10003": [305, 306, 307, 309], "feature3": 305, "124": 305, "\u02bbitem_node_decod": 305, "\u02bbuser_node_decod": 305, "\u02bbedge_decod": 305, "item_node_decod": 305, "user_node_decod": 305, "edge_decod": [305, 316], "graph_object": 305, "commod": 306, "swing": [306, 307], "30001": [306, 307, 309], "30002": [306, 307, 309], "30003": [306, 307, 309], "table_1": 306, "table_2": 306, "dest": 306, "10004": [306, 307], "20001": [306, 307, 309], "20003": [306, 307, 309], "20004": [306, 307, 309], "46": [306, 307, 309, 321, 443], "ui_decod": 306, "uv_decod": 306, "table_3": 306, "table_4": 306, "click_v": 306, "task_index": [306, 316], "task_count": 306, "atyp": 306, "job_nam": [306, 316], "worker_host": 306, "necessarili": [306, 418], "serious": 306, "decreas": [306, 385, 387], "speak": 306, "client_count": [306, 316], "wait_for_clos": [306, 316], "matter": [306, 462], "get_topologi": 307, "dst_type": 307, "figure1": 307, "topo": 307, "print_al": 307, "string_attr": 307, "src_node": 307, "dst_node": 307, "dense_shap": 307, "__next__": 307, "table1": 307, "u_nod": 307, "table2": 307, "table3": 307, "click_edg": 307, "table4": 307, "conduc": 308, "recept": [308, 312], "ai": 308, "meta_path": 308, "layer_id": 308, "famili": [308, 321, 359, 417, 445], "random_without_replac": 308, "ueri": 308, "default_neighbor_id": 308, "set_default_neighbor_id": [308, 317], "xx": 308, "set_padding_mod": 308, "circular": [308, 310, 360], "throw": 309, "nodesampl": 309, "node_sampl": 309, "by_ord": 309, "node_from": [309, 320], "edge_src": [309, 320], "edge_dst": [309, 320], "edgesampl": 309, "matur": 310, "dl": 310, "sheer": 310, "sink": 310, "generatortyp": [310, 320], "won": [310, 471], "cursor": 310, "ingo": 310, "query\u5bf9\u8c61": 310, "outneg": [310, 313], "inneg": [310, 313, 316], "candid": [310, 313], "u2i": 310, "ouv": 310, "func": 310, "edeg": 310, "src_1hop": 310, "dst_1hop": 310, "neg_i": 310, "neg_i_1hop": 310, "params_list": 310, "arrang": 310, "anonym": [310, 448], "src_attr": 310, "neg_attr": 310, "encode_fn": [310, 316], "src_atr": 310, "outnegv": 310, "gen1": 310, "gen2": 310, "circumst": 310, "foewa": 310, "from_gener": [310, 316], "make_one_shot_iter": [310, 316], "get_next": [310, 316], "zhangjiak": 311, "cp27": 311, "cp27mu": 311, "linux_x86_64": 311, "autoconf": 311, "automak": 311, "libtool": 311, "submodul": [311, 314, 468], "your_wheel_nam": [311, 314], "test_cpp_ut": 311, "test_python_ut": 311, "fastgcn": [312, 488], "graphsaint": 312, "amd": 312, "object_typ": 313, "oprequest": 314, "req": 314, "oprespons": 314, "params_": 314, "tensors_": 314, "redirect": [314, 394], "rewrit": 314, "till": [314, 463], "happen": [314, 468, 471], "stitch": 314, "myoper": 314, "register_oper": 314, "opnam": 314, "randomsampl": 314, "xxxsampler": 314, "reader": 315, "litestr": 315, "getfiles": 315, "getrecordcount": 315, "register_file_system": 315, "myfilesystem": 315, "registr": 315, "ppi": 316, "train_supervis": 316, "gen_test_data": 316, "getopt": 316, "argv": 316, "cur_path": 316, "elif": 316, "102": [316, 452], "dirnam": 316, "rf": 316, "\u4f60\u9700\u8981\u628agen_test_data": 316, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 316, "fi": 316, "sleep": 316, "case_bas": 316, "genetic_algorithm": 316, "neural_network": 316, "probabilistic_method": 316, "reinforcement_learn": 316, "rule_learn": 316, "bag": 316, "1033": 316, "103482": 316, "103515": 316, "31336": 316, "1061127": 316, "05882353": 316, "1106406": 316, "n_featur": 316, "node_decod": 316, "n_class": 316, "140": [316, 379], "n_hop": 316, "n_epoch": 316, "tripl": 316, "graph_object_cn": 316, "sample_gen": 316, "input_fn": 316, "sample_input_fn": 316, "float64": 316, "tensorshap": 316, "layer_featur": 316, "aggregate_fn": 316, "self_vec": 316, "neigh_vec": 316, "raw_feat_layer_index": 316, "layer_index": 316, "variable_scop": 316, "_layer": 316, "auto_reus": 316, "neigh_weight": 316, "get_vari": 316, "self_weight": 316, "output_shap": 316, "get_shap": 316, "neigh_mean": 316, "from_neigh": 316, "matmul": 316, "from_self": 316, "add_n": 316, "leaky_relu": 316, "depth_to_encod": 316, "h_self_vec": 316, "h_neighbor_vec": 316, "features_column": 316, "feature_column": 316, "numeric_column": 316, "loss_fn": 316, "train_op": 316, "global_step": 316, "get_global_step": 316, "estimatorspec": 316, "modekei": 316, "set_xxx": 317, "set_yyi": 317, "other_model": 317, "fill": [317, 357, 368, 378, 412], "nbr_id": 317, "set_default_int_attribut": 317, "set_default_float_attribut": 317, "set_default_string_attribut": 317, "set_inter_threadnum": 317, "intra": [317, 375, 378], "set_intra_threadnum": 317, "16mb": 317, "reset": 317, "enlarg": 317, "set_rpc_message_max_s": 317, "objectnam": 318, "degener": 318, "unspecifi": [318, 333], "consolidate_column": 318, "result_column": 318, "consolid": [318, 470, 477], "weight0": 318, "weight1": 318, "graph_nod": 318, "detach": 318, "varaibl": 318, "lexic": 318, "classmethod": 318, "graphar_store_in_loc": [318, 467], "save_to": [318, 467], "graphar_graph_nam": [318, 467], "graphar_file_typ": [318, 467], "parquet": [318, 467], "orc": [318, 467], "graphar_vertex_chunk_s": [318, 467], "graphar_edge_chunk_s": [318, 467], "graphschema": [318, 456], "schema_path": 318, "currrent": 318, "object_id": [318, 319, 320], "filetyp": 318, "ordinari": 318, "graph_build": 318, "deprec": [318, 336, 434], "group_id": 318, "member_s": 318, "leader_student_id": 318, "student": 318, "member_student_id": 318, "group_for_teacher_stud": 318, "group_nam": 318, "establish_d": 318, "teacher_in_charge_id": 318, "teacher": 318, "lesson_num": 318, "avg_scor": 318, "student_id": 318, "salari": 318, "teacher_id": 318, "both_in_out": 318, "unambigu": 318, "orign": 318, "interactivequeri": [319, 461, 463, 487], "frontend_gremlin_endpoint": 319, "frontend_cypher_endpoint": 319, "gremlin_url": 319, "lifetim": 319, "traversal_sourc": 319, "graphtraversalsourc": 319, "cypher_driv": 319, "cypher_url": 319, "gremlin_cli": 319, "runtimeerror": [319, 463], "modern_graph_data_dir": 319, "tolist": [319, 469], "dtype": 320, "pywrap": 320, "nodefrom": 320, "get_handl": 320, "worker_count": 320, "base64": 320, "nstart": 321, "poweriterationfailedconverg": 321, "langvil": 321, "meyer": 321, "survei": [321, 409], "cites": 321, "ist": 321, "psu": 321, "edu": 321, "713792": 321, "jon": 321, "kleinberg": 321, "authorit": 321, "journal": [321, 390, 398, 415, 446, 449, 453], "acm": [321, 396, 447, 479], "604": 321, "1999": [321, 376, 377], "doi": [321, 391, 398, 433], "1145": 321, "324133": 321, "324140": 321, "cornel": 321, "kleinber": 321, "pdf": [321, 403, 405, 406], "load_centr": 321, "in_degree_centr": [321, 457], "networkxnotimpl": 321, "out_degree_centr": [321, 457], "equat": 321, "ax": 321, "eigenvalu": [321, 401], "virtu": 321, "perron": 321, "frobeniu": 321, "theorem": [321, 400, 412], "0e": 321, "strength": 321, "2f": 321, "networkxpointlessconcept": [321, 451], "networkxerror": [321, 327, 334, 336, 340, 341, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 391, 397, 400, 401, 402, 413, 416, 448, 456, 459], "eigenvector_centrality_numpi": 321, "discern": 321, "phillip": 321, "bonacich": 321, "american": 321, "sociologi": 321, "1170": 321, "1182": 321, "1986": [321, 445], "leonidzhukov": 321, "net": [321, 375], "hse": 321, "socialnetwork": 321, "oxford": [321, 354, 355, 404, 448], "press": [321, 354, 355, 402, 444, 447, 448], "usa": [321, 408, 409, 455], "pp": [321, 385, 388, 389, 390, 403, 409, 410, 447, 453], "169": 321, "x_i": 321, "a_": 321, "x_j": 321, "lambda_": 321, "distant": 321, "penal": 321, "strictli": [321, 375], "invers": [321, 400], "phi": 321, "sqrt": [321, 401], "adjacency_spectrum": 321, "720": 321, "leo": 321, "sociometr": 321, "psychometrika": 321, "1953": 321, "springer": [321, 410], "1007": [321, 355, 391], "bf02289026": 321, "has_path": [321, 457], "djikstra": 321, "floyd": 321, "warshal": 321, "bfs_edg": [321, 457], "depth_limit": 321, "core_numb": 321, "vladimir": 321, "batagelj": 321, "matjaz": 321, "zaversnik": 321, "ab": [321, 379, 380, 381, 395, 403, 407, 448, 450], "0310049": 321, "c_u": 321, "deg": [321, 375, 389, 456], "geometr": [321, 443, 457], "vw": 321, "hat": 321, "uv": [321, 389], "uw": 321, "tot": 321, "2deg": 321, "leftrightarrow": 321, "complete_graph": [321, 327, 456], "saram\u00e4ki": 321, "kivel\u00e4": 321, "onnela": 321, "kaski": 321, "kert\u00e9sz": 321, "027105": 321, "2007": [321, 403, 449], "jponnela": 321, "web_docu": 321, "a9": 321, "intens": 321, "coher": 321, "motif": 321, "065103": 321, "2005": [321, 397, 403], "sign": 321, "costantini": 321, "perugini": 321, "plo": 321, "e88669": 321, "fagiolo": 321, "76": 321, "026107": 321, "average_clust": [321, 457], "count_zero": 321, "c_v": 321, "nonzero": [321, 385, 402], "marcu": 321, "kaiser": 321, "0802": 321, "2512": 321, "g_to_add_to": [323, 324, 325], "nodes_for_cycl": 323, "add_path": [323, 325, 456], "add_star": [323, 324], "nodes_for_path": 324, "add_cycl": [324, 325], "nodes_for_star": 325, "star": [325, 362, 371], "middl": 325, "cnbor": 327, "with_data": 328, "empty_graph": [328, 369], "frequenc": 330, "width": 330, "2m": [331, 409], "prevent": 334, "frozen": [334, 339], "unfreez": 334, "frozen_graph": 334, "unfrozen_graph": 334, "is_frozen": 334, "neighbour": 336, "freez": [339, 457], "nodelist": [344, 383], "selfloop_edg": [344, 349, 385, 387], "number_of_selfloop": [344, 350], "selfloop": [349, 350, 383, 389], "nloop": 349, "nodes_with_selfloop": [349, 350], "datadict": [350, 456], "datavalu": 350, "attrnam": [350, 487], "edgeit": 350, "ekei": 350, "graph_atlas_g": 354, "linearli": [354, 370], "ronald": [354, 355, 445], "robin": [354, 355], "wilson": [354, 355], "1998": [354, 355], "111223": 355, "112222": 355, "automorph": [355, 428], "graph_atla": 355, "expens": 355, "popul": [355, 356, 358, 359, 361, 363, 366, 368, 370, 371, 374, 385, 387, 388, 390, 392, 393, 394, 400, 401, 402, 408, 409, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 451, 458], "book": 355, "violat": 355, "lexicograph": 355, "nondecreas": 355, "001111": 355, "000112": 355, "1008": 355, "3333444": 355, "3333336": 355, "1012": 355, "1213": 355, "1244555": 355, "1244456": 355, "perfectli": 356, "ari": [356, 366], "height": 356, "children": [356, 366, 450], "barbel": [357, 368], "bell": 357, "p_": [357, 389, 403], "mere": [357, 368], "aldou": [357, 368], "jim": [357, 368], "binomi": 358, "leftmost": 358, "ci_n": 359, "x_1": 359, "x_2": 359, "x_m": 359, "mod": [359, 373, 402, 421], "subfamili": 359, "ladder": [360, 367], "cl_n": 360, "k_n": 361, "is_direct": [361, 456], "subset_s": 362, "multipartit": [362, 373], "tripartit": 362, "bc": 362, "complete_bipartite_graph": 362, "c_n": 363, "hierarch": 364, "dorogovtsev": 364, "goltsev": 364, "mend": 364, "mat": 364, "0112143": 364, "kw": [365, 463], "unknown": [365, 468], "abc": 365, "rightmost": 366, "jame": 366, "andrew": 366, "storer": 366, "birkhaus": 366, "boston": 366, "2001": [366, 379, 387, 392, 394, 402, 411, 469], "225": [366, 456], "lollipop": 368, "k_m": 368, "p_n": [368, 370], "etext": 368, "turan": 373, "disjoint": [373, 384, 422], "2r": 373, "tau1": 375, "tau2": 375, "mu": 375, "average_degre": 375, "min_degre": 375, "max_degre": 375, "min_commun": 375, "max_commun": 375, "lfr": 375, "mathrm": 375, "expon": 375, "reassign": [375, 413], "affili": [375, 483], "random_st": [375, 378, 379, 380, 381, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 410, 411, 412, 416, 448, 451, 453], "exceededmaxiter": 375, "250": 375, "frozenset": [375, 458], "rewir": [375, 377, 381, 413, 416], "wire": 375, "robust": 375, "somewhat": 375, "narrow": 375, "andrea": 375, "lancichinetti": 375, "santo": [375, 379, 380, 381], "fortunato": [375, 379, 380, 381], "filippo": 375, "radicchi": 375, "phy": [375, 387, 392, 393, 394, 397], "rev": [375, 387, 392, 393, 394, 397], "046110": 375, "santofortunato": 375, "caveman": [376, 377, 381], "unclear": [376, 377], "connected_caveman_graph": [376, 382], "watt": [376, 377, 387], "phenomenon": [376, 377], "amer": [376, 377], "493": [376, 377], "527": [376, 377], "caveman_graph": 377, "p_in": [378, 379, 380], "p_out": [378, 379, 380], "gaussian": [378, 404, 405, 406], "drawn": [378, 406], "varianc": 378, "probabilti": [378, 381], "random_partition_graph": [378, 383], "ulrik": 378, "brand": 378, "marco": 378, "gaertler": 378, "dorothea": 378, "wagner": 378, "11th": 378, "europ": 378, "symp": 378, "plant": [379, 380], "random_partition_model": 379, "condon": 379, "karp": 379, "algor": 379, "116": 379, "486": [379, 380, 381], "174": [379, 380, 381], "0906": [379, 380, 381], "0612": [379, 380, 381], "relax": 381, "februari": 381, "num_cliqu": 382, "clique_s": 382, "ring": 382, "stochast": [383, 457], "densiti": [383, 385, 403, 405], "symmetr": [383, 402, 425, 429, 435, 437, 448], "300": [383, 452], "prob": 383, "450": 383, "quotient_graph": 383, "relabel": 383, "245": 383, "348": 383, "405": 383, "051": 383, "022": 383, "planted_partition_graph": 383, "gaussian_random_partition_graph": 383, "gnp_random_graph": [383, 410, 411, 412], "holland": 383, "laskei": 383, "leinhardt": 383, "blockmodel": 383, "109": 383, "1983": 383, "windmil": 384, "contract": 384, "wd": 384, "deg_sequ": [385, 386, 387, 388, 390], "pseudograph": [385, 387], "nonneg": [385, 387], "is_graph": [385, 391], "graphic": [385, 387, 390, 391], "realiz": [385, 387, 390, 413, 414, 415, 416, 443, 468], "tend": 385, "poisson": 385, "constant": [385, 487], "siam": [385, 390, 396], "167": 385, "random_sequ": 385, "random_powerlaw_tree_sequ": 385, "5000": [385, 469], "actual_degre": 385, "in_degree_sequ": 387, "out_degree_sequ": 387, "directed_random": 387, "configuration_model": [387, 388, 391], "finit": [387, 389, 402], "strogatz": 387, "026118": 387, "din": 387, "dout": 387, "in_deg_sequ": 388, "out_deg_sequ": 388, "kleitman": [388, 390], "valenc": [388, 390], "1973": [388, 390], "w_0": 389, "w_1": 389, "ldot": 389, "w_u": [389, 403, 406], "w_v": [389, 403, 406], "sum_k": 389, "w_k": 389, "z": [389, 402, 403, 407], "mathcal": 389, "ne": 389, "uu": 389, "fan": [389, 403, 479], "chung": [389, 403], "lu": [389, 479], "ann": 389, "combinator": [389, 449], "145": 389, "2002": 389, "joel": 389, "miller": 389, "aric": [389, 403], "hagberg": [389, 403], "waw": [389, 403], "alan": 389, "friez": 389, "paul": 389, "horn": 389, "pawe\u0142": 389, "pra\u0142at": 389, "lnc": 389, "6732": 389, "115": 389, "havel": 390, "hakimi": 390, "networkxexcept": 390, "resort": 390, "496": 390, "506": 390, "1962": [390, 408, 409, 455], "d_m": 391, "uniform": [391, 403, 412], "networkxunfeas": 391, "moshen": 391, "bayati": 391, "jeong": 391, "han": 391, "kim": 391, "amin": 391, "saberi": 391, "algorithmica": 391, "58": 391, "860": 391, "910": 391, "s00453": 391, "009": 391, "9340": 391, "gn": [392, 455], "a_k": 392, "krapivski": [392, 393, 394, 397], "redner": [392, 393, 394], "066123": [392, 394], "gnc": 393, "growth": [393, 453], "036118": 393, "2005k": 393, "gnr": 394, "probabilii": 394, "self_loop": 395, "preferenti": 395, "proport": 395, "peterson": [395, 438], "nichola": 395, "bori": 395, "pittel": 395, "preprint": 395, "1311": 395, "5961": 395, "2013": [395, 415], "gamma": 396, "delta_in": 396, "delta_out": 396, "bia": 396, "bollob\u00e1": 396, "borg": 396, "chay": 396, "riordan": 396, "fourteenth": 396, "annual": 396, "symposium": 396, "132": [396, 411], "139": 396, "diverg": [397, 457], "retent": 397, "disallow": 397, "ispolatov": 397, "yuryev": 397, "061911": 397, "inclus": 398, "knudsen": 398, "michael": 398, "carsten": 398, "wiuf": 398, "markov": 398, "chain": 398, "1155": 398, "190836": 398, "radiu": [399, 404, 405, 406], "chordal": 400, "chord": [400, 414], "mildli": 400, "lubotzki": 400, "invari": 400, "birkh\u00e4us": 400, "verlag": 400, "basel": 400, "1994": 400, "marguli": 401, "gabber": 401, "galil": 401, "palei": 402, "pz": 402, "f_q": 402, "odd": 402, "bolloba": 402, "cambridg": 402, "theta": [403, 406], "po": [403, 404, 405, 406, 407], "p_dist": [403, 405], "geograph": [403, 406], "rectangular": [403, 407], "ge": [403, 407], "prone": 403, "le": [403, 407, 447], "euclidean": [403, 404, 405, 406, 407], "taxicab": [403, 407], "expovari": [403, 406], "masuda": 403, "miwa": 403, "konno": 403, "036108": 403, "milan": 403, "bradonji\u0107": 403, "allon": 403, "percu": 403, "giant": 403, "antoni": 403, "bonato": 403, "209": 403, "216": 403, "cube": [404, 405, 406, 424, 441], "kdtree": [404, 405, 406], "minkowski": [404, 405, 406], "infin": [404, 405, 406], "erd\u0151": [404, 405, 406], "r\u00e9nyi": [404, 405, 406], "twenti": 404, "2d": [404, 405, 406, 456, 459], "deviat": [404, 405, 406], "gauss": [404, 405, 406], "penros": [404, 405], "mathew": [404, 405], "soft": 405, "exp": [405, 407], "annal": 405, "2016": 405, "986": 405, "1028": 405, "summat": 406, "nodethr": 406, "cole": 406, "maclean": 406, "blog": 406, "thesi": [406, 412], "waxman": 407, "x_min": 407, "y_min": 407, "x_max": 407, "y_max": 407, "Their": 407, "incompat": [407, 468], "rout": 407, "multipoint": 407, "ieee": [407, 415, 416, 448, 453], "1988": 407, "1617": 407, "1622": 407, "harari": [408, 409, 457], "h_": [408, 409], "ceil": 408, "kn": 408, "hnm_harary_graph": 408, "weisstein": 408, "eric": 408, "mathworld": [408, 417, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436], "wolfram": [408, 417, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436], "hararygraph": 408, "nat": [408, 409, 455], "acad": [408, 409, 455], "sci": [408, 409, 455], "1142": [408, 409, 455], "1146": [408, 409, 455], "floor": 409, "hkn_harary_graph": 409, "boesch": 409, "satyanarayana": 409, "suffel": 409, "reliabl": 409, "synthesi": 409, "99": [409, 487], "2009": [409, 449], "uniform_random_intersection_graph": [410, 411], "nikoletsea": 410, "raptopoulo": 410, "spiraki": 410, "icalp": 410, "\u0131az": 410, "karhum": 410, "aki": 410, "lepist": 410, "sannella": 410, "vol": [410, 453], "3142": 410, "lectur": 410, "1029": 410, "1040": 410, "godehardt": 411, "jaworski": 411, "electron": [411, 449], "singer": 412, "cohen": 412, "1995": 412, "phd": 412, "john": [412, 429], "hopkin": 412, "scheinerman": 412, "evolut": 412, "2000": 412, "156": 412, "nkk": [413, 414], "degree_seq": 413, "n_edges_add": 413, "li": [413, 416], "unsatur": 413, "proof": 413, "tillman": [413, 414, 416], "markopoul": [413, 414, 415, 416, 448], "butt": [413, 414, 448], "gjoka": [413, 414, 415, 416], "2k": [413, 414], "kdd": [413, 414], "seconnd": 414, "joint_degre": [415, 416], "diagon": [415, 431], "joint_degree_graph": 415, "kurant": 415, "5k": 415, "infocom": [415, 416, 448], "stanton": 415, "pinar": 415, "prescrib": 415, "experiment": [415, 463], "n_th": 417, "m_1": 417, "singleton": [417, 456], "m_2": 417, "m_i": 417, "mycielskian": 417, "m_": 417, "mycielskigraph": 417, "p_2": 417, "chromat": [418, 449], "2n": 418, "bigcup": 418, "nonisomporph": 419, "adjanc": 419, "matric": [419, 448], "nonisomorph": 420, "shift_list": 421, "cubic": [421, 424, 425, 428, 429, 435, 437, 438, 443], "lcf": [421, 423, 425, 427, 429, 435, 437], "lederberg": 421, "coxet": 421, "frucht": [421, 428], "hamiltonian": [421, 423, 428, 429, 432, 437, 443], "symmetri": [421, 428], "dodecahedral_graph": 421, "desargues_graph": 421, "heawood_graph": 421, "pappus_graph": 421, "s1": 421, "sk": 421, "v_current": 421, "shiftlist": 421, "heawood": [421, 429], "lcfnotat": 421, "bull": 422, "planar": [422, 425, 426, 428], "pendant": 422, "leg": 422, "chv\u00e1tal": 423, "370": 423, "chv": 423, "c3": [423, 435, 436], "a1tal_graph": 423, "chvatalgraph": 423, "platon": [424, 427, 432, 436, 440, 442], "hypercub": 424, "aris": 424, "desargu": 425, "desarguesgraph": 425, "kite": [426, 433], "diamondgraph": 426, "dodecahedr": 427, "dodecahedron": 427, "regular_dodecahedron": 427, "dodecahedralgraph": 427, "fruchtgraph": 428, "cage": 429, "perci": 429, "nonplanar": 429, "girth": 429, "heawoodgraph": 429, "win": [429, 438], "tue": [429, 438], "nl": [429, 438], "aeb": [429, 438], "housegraph": [430, 431], "pentatop": 431, "icosahedr": 432, "icosahedron": 432, "icosahedralgraph": 432, "krackhardt": 433, "andr": 433, "beverlei": 433, "carol": 433, "dian": 433, "fernando": 433, "garth": 433, "heather": 433, "ik": 433, "jane": 433, "polit": 433, "landscap": 433, "cognit": 433, "quarterli": 433, "342": [433, 456], "369": 433, "2307": 433, "2393394": 433, "jstor": 433, "june": 433, "1990": 433, "graph_descript": 434, "ltype": 434, "adjacencylist": 434, "from_dict_of_list": 434, "from_edgelist": 434, "xlist": 434, "c_4": 434, "w2": 434, "vk": 434, "wk": 434, "vj": 434, "wj": 434, "moebiu": 435, "kantor": 435, "m\u00f6biu": 435, "petersen": [435, 438], "b6biu": 435, "93kantor_graph": 435, "octahedr": 436, "octahedron": 436, "shake": 436, "hi": [436, 446, 455], "her": 436, "partner": 436, "handshak": 436, "cocktail": 436, "octahedralgraph": 436, "tur": 436, "a1n_graph": 436, "special_cas": 436, "pappu": 437, "juliu": 438, "counterexampl": [438, 443], "bridgeless": 438, "colour": 438, "drg": 438, "maze": 439, "sedgewick": 439, "3rd": 439, "tetrahedr": 440, "k4": 440, "w4": 440, "grpah": 440, "tetrahedron": [440, 442, 443], "archimedean": [441, 442], "octagon": 441, "triangular": 441, "truncated_cub": 441, "coolmath": 441, "polyhedra": 441, "hexagon": 442, "equilater": 442, "truncated_tetrahedron": 442, "tutt": 443, "polyhedr": 443, "tait": 443, "conjectur": 443, "polyhedron": 443, "davi": 444, "southern": 444, "women": 444, "gardner": 444, "1941": 444, "south": 444, "chicago": 444, "il": 444, "florentin": 445, "breiger": 445, "philippa": 445, "pattison": 445, "cumul": 445, "dualiti": 445, "septemb": 445, "zachari": 446, "karat": 446, "club": 446, "mr": [446, 449], "offic": 446, "wayn": 446, "fission": 446, "anthropolog": 446, "452": 446, "473": 446, "1977": 446, "coappear": 447, "novel": 447, "miser": 447, "knuth": 447, "1993": 447, "graphbas": 447, "combinatori": 447, "york": 447, "spectral": [448, 457], "forg": 448, "sgf": 448, "eigenstructur": 448, "synthes": 448, "percentag": 448, "telecommun": 448, "bernoulli": 448, "baldesi": 448, "1801": 448, "01715": 448, "karate_club_graph": 448, "sud": 449, "81": 449, "810": 449, "herzberg": 449, "murti": 449, "polynomi": 449, "am": 449, "708": 449, "717": 449, "sander": 449, "torsten": 449, "7pp": 449, "2529816": 449, "encyclopedia": 449, "dec": 449, "nil": 450, "arboresc": 450, "downward": 450, "synthet": 450, "trie": 450, "recov": [450, 463], "pr\u00fcfer": 451, "from_prufer_sequ": 451, "forest_str": 451, "triad_nam": 452, "003": 452, "012": 452, "021d": 452, "021u": 452, "021c": 452, "111d": 452, "111u": 452, "030t": 452, "030c": 452, "120d": 452, "120u": 452, "120c": 452, "triadic_censu": 452, "autonom": [453, 455], "elmokashfi": 453, "tier": 453, "mid": 453, "adv": 453, "bidirect": 453, "peer": 453, "commerci": 453, "agreement": 453, "kvalbein": 453, "dovroli": 453, "bgp": 453, "1250": 453, "1261": 453, "octob": 453, "reweight": 454, "mathematician": 455, "frank": 455, "incoming_graph_data": [456, 459], "default_label": [456, 459], "to_networkx_graph": 456, "110": 456, "protect": 456, "bracket": 456, "shortcut": 456, "nbrsdict": 456, "miscellan": 456, "__contains__": 456, "__getitem__": 456, "adj_dict": 456, "atlasview": 456, "__iter__": 456, "niter": 456, "__len__": 456, "nnode": 456, "u_of_edg": 456, "v_of_edg": 456, "ebunch_to_add": 456, "wn2898": 456, "node_for_ad": 456, "nodes_for_ad": 456, "hello": 456, "k3": 456, "attrdict": 456, "behav": 456, "idiom": 456, "foovalu": 456, "adj_it": 456, "nbrdict": 456, "adjlist_inner_dict_factori": 456, "neighbordict": 456, "adjlist_outer_dict_factori": 456, "adjlistdict": 456, "clear_edg": 456, "deepcopi": 456, "fresh": [456, 465], "__class__": 456, "degreeview": 456, "nd_view": 456, "edge_attr_dict_factori": 456, "neighborattrdict": 456, "edge_subgraph": 456, "edgeview": 456, "edgedataview": 456, "ddict": 456, "get_edge_data": 456, "edge_dict": 456, "safe": 456, "graph_attr_dict_factori": 456, "graph_cache_factori": 456, "keyerror": 456, "edge_ind": 456, "data_dictionari": 456, "is_multigraph": 456, "corespond": 456, "nbunch_it": 456, "exhaust": 456, "possibli": 456, "node_attr_dict_factori": 456, "nodeattrdict": 456, "node_dict_factori": 456, "nodedict": 456, "nodeview": 456, "nodedataview": 456, "nodedata": 456, "bar": 456, "nedg": 456, "Will": 456, "nodes_for_remov": 456, "set_edge_data": 456, "set_node_data": 456, "set_item": 456, "adjedgeattr": 456, "dd": 456, "nodeattr": 456, "netowrkx": 456, "to_undirected_class": 456, "itertool": 456, "mg": 456, "nd_iter": 456, "outedgeview": 456, "in_edg": 456, "outedgedataview": 456, "has_predecessor": 456, "has_successor": 456, "indegreeview": 456, "inedgeview": 456, "outdegreeview": 456, "pred": 456, "succ": 456, "_convert_arrow_to_dynam": [457, 459], "atla": 457, "triad": 457, "mycielski": 457, "sudoku": 457, "utf": [458, 469], "filenam": [458, 469], "rb": 458, "bz2": 458, "uncompress": 458, "whitespac": 458, "obsolet": 458, "write_edgelist": 458, "fh": 458, "textlin": 458, "parse_edgelist": 458, "read_adjlist": 458, "marker": 458, "v_0": 459, "v_1": 459, "add_label": 460, "talk": 462, "output_to_cli": [462, 479], "person_id": [462, 469], "deregist": 463, "256mi": 463, "4gi": 463, "5gi": 463, "__enter__": 463, "__exit__": 463, "exc_typ": 463, "exc_valu": 463, "exc_tb": 463, "unregist": 463, "preemptiv": 463, "burstabl": 463, "qo": 463, "preempt": 463, "k8s_vineyard_imag": 463, "fallback": 463, "512mi": 463, "etcd_addr": 463, "etcd01": 463, "etcd02": 463, "etcd03": 463, "4mi": 463, "k8s_coordinator_pod_node_selector": 463, "tinyurl": 463, "3nx6k7ph": 463, "k8s_engine_pod_node_selector": 463, "path1": 463, "path2": 463, "claimnam": 463, "dangling_timeout_second": 463, "heartbeat": 463, "dangl": 463, "config_fil": 463, "resource_nam": 463, "sigint": 463, "sigterm": 463, "signal": 463, "get_vineyard_object_mapping_t": 463, "with_cyph": 463, "recreat": 463, "restore_from_pvc": 463, "kubeconfig": 463, "run_fetch": 463, "lock": 463, "store_to_pvc": 463, "backup": [463, 469], "maxwel": 465, "binlog": 465, "buildgartfrag": 465, "etcd_endpoint": 465, "gartfrag": 465, "etcd_client": 465, "make_shar": 465, "mpi_comm_world": 465, "schema_kei": 465, "gart_schema_p": 465, "to_str": 465, "edge_config_str": 465, "as_str": 465, "gart_blob_m": 465, "_p": 465, "config_str": 465, "edge_config": 465, "inner_vertices_it": 465, "elabel": [465, 470], "edge_it": 465, "hive": 467, "ordered_by_sourc": 467, "ordered_by_dest": 467, "textual": 467, "unix": [467, 482], "ldbc_graphar": 467, "4096": 467, "ldbc_subgraph_graphar": 467, "ldbc_subgraph": 467, "ldbc__graphar": 467, "test_graphar": 467, "broader": 468, "ffi": 468, "agnost": 468, "grin_": 468, "partitioned_graph": 468, "edge_type_nam": 468, "boundari": 468, "sync_properti": 468, "grin_partitioned_graph": 468, "grin_partit": 468, "grin_graph": 468, "grin_get_local_graph_from_partit": 468, "grin_edge_typ": 468, "etyp": 468, "grin_get_edge_type_by_nam": 468, "grin_vertex_type_list": 468, "src_vtype": 468, "grin_get_src_types_from_edge_typ": 468, "dst_vtype": 468, "grin_get_dst_types_from_edge_typ": 468, "src_vtypes_num": 468, "grin_get_vertex_type_list_s": 468, "dst_vtypes_num": 468, "grin_vertex_typ": 468, "grin_get_vertex_type_from_list": 468, "grin_vertex_properti": 468, "dst_vp": 468, "grin_get_vertex_property_by_nam": 468, "grin_null_vertex_properti": 468, "grin_vertex_property_t": 468, "dst_vpt": 468, "grin_get_vertex_property_table_by_typ": 468, "grin_datatyp": 468, "dst_vp_dt": 468, "grin_get_vertex_property_data_typ": 468, "grin_vertex_list": 468, "__src_vl": 468, "grin_get_vertex_list": 468, "_src_vl": 468, "grin_select_type_for_vertex_list": 468, "src_vl": 468, "grin_select_master_for_vertex_list": 468, "src_vl_num": 468, "grin_get_vertex_list_s": 468, "grin_vertex": 468, "grin_get_vertex_from_list": 468, "ifdef": 468, "grin_trait_select_edge_type_for_adjacent_list": 468, "grin_adjacent_list": 468, "_adj_list": 468, "grin_get_adjacent_list": 468, "grin_direct": 468, "adj_list": 468, "grin_select_edge_type_for_adjacent_list": 468, "adj_lsit": 468, "endif": 468, "al_sz": 468, "grin_get_adjacent_list_s": 468, "ifndef": 468, "grin_edg": 468, "grin_get_edge_from_adjacent_list": 468, "grin_get_edge_typ": 468, "grin_equal_edge_typ": 468, "grin_get_neighbor_from_adjacent_list": 468, "grin_get_value_from_vertex_property_t": 468, "grin_vertex_ref": 468, "uref": 468, "grin_get_vertex_ref_for_vertex": 468, "recogn": [468, 469], "u_master_partit": 468, "grin_get_master_partition_from_vertex_ref": 468, "send_valu": 468, "fragment_group_id": [468, 470], "get_partitioned_graph_by_object_id": 468, "local_partit": 468, "grin_get_local_partition_list": 468, "pnum": 468, "grin_get_partition_list_s": 468, "grin_get_partition_from_list": 468, "disclaim": 468, "sacrif": 468, "boilerpl": 468, "ineffici": 468, "enorm": 468, "grin_assume_all_vertex_property_local_complet": 468, "grin_assume_master_vertex_property_local_complet": 468, "grin_assume_by_type_all_vertex_property_local_complet": 468, "grin_assume_by_type_master_vertex_property_local_complet": 468, "assumpt": 468, "wider": 468, "undefin": 468, "granular": 468, "grin_frag": 468, "storagespecif": 468, "vertexhandl": 468, "goe": 468, "grin_edge_list": 468, "grin_partition_list": 468, "grin_enable_": 468, "_list_arrai": 468, "vertexlist": 468, "grin_enable_vertex_list_arrai": 468, "vl": 468, "idx": 468, "sz": 468, "caller": 468, "_list_iter": 468, "grin_enable_vertex_list_iter": 468, "grin_vertex_list_iter": 468, "grin_get_vertex_list_begin": 468, "grin_get_next_vertex_list_it": 468, "vli": 468, "grin_is_vertex_list_end": 468, "grin_get_vertex_from_it": 468, "grin_get_vertex_type_by_nam": 468, "vtype": 468, "grin_vertex_property_list": 468, "grin_get_vertex_properties_by_nam": 468, "vprop": 468, "vpl": 468, "separatedli": 468, "with_vertex_label": 468, "with_edge_label": 468, "grin_serialize_vertex_ref": 468, "grin_deserialize_to_vertex_ref": 468, "grin_get_vertex_from_vertex_ref": 468, "vref": 468, "deseri": 468, "borrow": 468, "vertexcut": 468, "edgecut": 468, "judgement": 468, "columnar": 469, "gear": 469, "compromis": 469, "strict": 469, "multitud": 469, "exemplifi": 469, "said": 469, "grpc_port": 469, "grpc_endpoint": 469, "conn": 469, "add_vertex_label": 469, "v_label_nam": 469, "add_primary_kei": 469, "pk_name": 469, "prop_name_1": 469, "prop_name_2": 469, "add_edge_label": 469, "e_label_nam": 469, "prop_name_3": 469, "add_properti": 469, "xmln": 469, "xsi": 469, "w3": 469, "xmlschema": 469, "schemaloc": 469, "xsd": 469, "modelvers": 469, "gremlinexampl": 469, "codehau": 469, "mojo": 469, "classpath": 469, "mainclass": 469, "compliancelevel": 469, "killaft": 469, "credenti": 469, "valuemap": [469, 487], "javascript": 469, "data_load": 469, "load_tool": 469, "xzvf": 469, "alic": 469, "person_id_1": 469, "20210611151923": 469, "mapreduc": 469, "data_output": 469, "55555": 469, "propertiescolmap": 469, "srcpkcolmap": 469, "dstpkcolmap": 469, "mb": 469, "columnidx": 469, "_success": 469, "xxxxx": 469, "sst": 469, "00000": 469, "00001": 469, "00002": 469, "load_data": 469, "test_store_servic": 469, "insert_vertex": 469, "vertexrecordkei": 469, "insert_vertic": 469, "update_vertex_properti": 469, "vertex_pk": 469, "delete_vertic": 469, "insert_edg": 469, "edgerecordkei": 469, "update_edge_properti": 469, "edge_pk": 469, "remote_flush": 469, "snapshot_id": 469, "src_vertex_kei": 469, "dst_vertex_kei": 469, "realtimewrit": 469, "unus": 469, "current_timestamp": 469, "replay_record": 469, "grootclient": 469, "grootclientbuild": 469, "replayrecord": 469, "provis": 469, "lapp": 469, "reinstal": 469, "pv_name": 469, "pod_nam": [469, 477, 482], "logback": 469, "zk": 469, "storegcintervalm": 469, "try_catch_up_with_primari": 469, "otel": 469, "arrowfragmentgroup": 470, "spread": 470, "ipc": 470, "docket": 470, "string_oid": 470, "ipcclient": 470, "writeout": 470, "nb": 470, "fragmentloc": 470, "gettotalnodesnum": 470, "labeltyp": 470, "vlabel": 470, "vertex_data_t": 470, "edge_data_t": 470, "willing": 471, "implic": 471, "polymorph": 471, "instant": 471, "aka": 471, "pygrap": [471, 472], "frist": 471, "from_numpi": 471, "bind_sssp1": 471, "delai": 471, "screen": 471, "bind_sssp2": 471, "vertex_bal": 472, "vcut": 472, "ecut": 472, "repo_hom": 476, "flexbuild": 476, "graph_identifi": 476, "syoov": 477, "79b44f7b58": 477, "ctmqb": 477, "10m": 477, "9m53": 477, "9m46": 477, "6dd67c65fc": 477, "gn4mb": 477, "15334625083466732": 477, "33d": 477, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 479, "\u8be5\u7cfb\u7edf\u4e8e": 479, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 479, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 479, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 479, "\u5728": [479, 480, 481, 482, 483, 486, 487, 488, 489], "\u4e2d": [479, 481, 482, 483, 489], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 479, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 479, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 479, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 479, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 479, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 479, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 479, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 479, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 479, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 479, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 479, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 479, "\u521b\u5efa\u9ed8\u8ba4": 479, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 479, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 479, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 479, "result_lpa": 479, "result_sssp": 479, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 479, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 479, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 479, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 479, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 479, "\u7c7b": [479, 489], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 479, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 479, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 479, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 479, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 479, "\u6216\u5199\u5165": 479, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 479, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 479, "\u6216\u5199\u5165\u672c\u5730\u7684": 479, "lpa_result": 479, "\u6570\u636e\u7ed3\u6784": 479, "\u6b64\u5916": [479, 483], "\u5982": [479, 482, 485, 487], "\u5feb\u901f\u4e0a\u624b": [479, 485], "\u4e2d\u6240\u793a": 479, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 479, "\u7684\u65b0\u5c5e\u6027": 479, "\u5217": 479, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 479, "\u5217\u540d\u4e3a": 479, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 479, "new_graph": [479, 484], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 479, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 479, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 479, "\u7c7b\u4f3c\u7684": 479, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 479, "\u4f8b\u5982\u9876\u70b9id": 479, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 479, "\u4ee3\u8868\u7ed3\u679c": 479, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 479, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 479, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 479, "\u8f6c\u6362\u4e3a": [479, 488], "\u4f7f\u7528\u9876\u70b9\u7684": 479, "\u4f5c\u4e3a\u540d\u4e3a": 479, "\u7684\u5217": 479, "df_vd": 479, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 479, "df_result": 479, "property0": 479, "label0": 479, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 479, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 479, "\u5c06": [479, 488], "\u9876\u70b9\u7684": 479, "\u4f5c\u4e3a": [479, 480, 489], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 479, "gs_data": 479, "\u53ef\u4ee5\u67e5\u770b": 479, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 479, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 479, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 479, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 479, "\u5728\u7eaf": 479, "\u6a21\u5f0f": [479, 487], "\u4e0b\u4f7f\u7528": 479, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 479, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 479, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 479, "\u5982\u4ee3\u7801\u6240\u793a": 479, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 479, "\u88c5\u9970\u7684\u7c7b": 479, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 479, "\u56fe\u7b97\u6cd5\u51fd\u6570": 479, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 479, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 479, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 479, "\u4e0e": 479, "\u76f8\u5173\u7684\u5b8c\u6574": 479, "\u53ef\u4ee5\u53c2\u8003": 479, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 479, "\u4e3a\u4f8b": [479, 483], "\u7528\u6237\u5728": 479, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 479, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 479, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 479, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 479, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 479, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 479, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 479, "\u589e\u91cf\u8ba1\u7b97": 479, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 479, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 479, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 479, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [479, 489], "\u7ecf\u5178\u7684": 479, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 479, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 479, "\u6a21\u578b\u4e4b\u5916": 479, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 479, "\u7f16\u7a0b\u6a21\u578b": 479, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 479, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 479, "\u6a21\u578b\u4e0d\u540c": 479, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 479, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 479, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 479, "\u800c\u4e0d\u540c\u4e8e": 479, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 479, "\u8fd8\u662f\u4ee5": 479, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 479, "\u88c5\u9970\u5668": 479, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 479, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 479, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 479, "\u4e2d\u7684": [479, 480, 482], "\u51fd\u6570": [479, 487], "\u4e0b\u5217\u4ee3\u7801": 479, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 479, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 479, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 479, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 479, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 479, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 479, "\u8fd9\u91cc": [479, 480, 489], "\u662f\u4e0e": 479, "\u76f8\u5bf9\u5e94\u7684": 479, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 479, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 479, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 479, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 479, "\u5728\u6b64\u4e4b\u540e": 479, "\u60a8\u53ef\u4ee5\u4ece": 479, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 479, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 479, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 479, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 479, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 479, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 479, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 479, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 479, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 479, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 479, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 479, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 479, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 479, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 479, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 479, "dist_0": 479, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 479, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 479, "\u8bf7\u53c2\u8003": [479, 487], "\u6765\u5c06": 479, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 479, "\u5b89\u88c5\u5b8c\u6210\u540e": 479, "\u4f60\u9700\u8981\u5c06": 479, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 479, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 479, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 479, "\u6765\u786e\u4fdd": 479, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 479, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 479, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 479, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 479, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 479, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 479, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 479, "\u7528\u6237\u9700\u8981\u6309\u7167": 479, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 479, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 479, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 479, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 479, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 479, "defaultpropertyappbas": 479, "\u6216": [479, 480, 481, 482, 485, 487], "parallelpropertyappbas": 479, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 479, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 479, "defaultappbas": 479, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 479, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 479, "\u5176\u5e94\u8be5\u662f": 479, "defaultpropertycontextbas": 479, "parallelpropertycontextbas": 479, "defaultcontextbas": 479, "\u6216\u8005": [479, 481, 488, 489], "\u7684\u7684\u5b50\u7c7b": 479, "\u901a\u8fc7\u7ee7\u627f": 479, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 479, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 479, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 479, "client\u4e2dquery\u8fd4\u56de\u7684context": 479, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 479, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 479, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 479, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 479, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 479, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 479, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 479, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 479, "\u8fd9\u4e2a\u9700\u6c42": 479, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 479, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 479, "graphscope_repo": 479, "app_class_nam": 479, "java_path": 479, "path_to_your_jar": 479, "param_str": 479, "params_str": 479, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 479, "app\u7684\u7c7b\u7684\u5168\u540d": 479, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 479, "\u53ef\u4ee5\u901a\u8fc7": 479, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 479, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 479, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 479, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 479, "\u53ef\u4ee5": 479, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 479, "jar_path": 479, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 479, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 479, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 479, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 479, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 479, "\u7684app": 479, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 479, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 479, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [479, 480, 482], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 479, "\u76f8\u5173\u8bba\u6587": 479, "wenfei": 479, "jingbo": 479, "xu": 479, "wenyuan": 479, "yu": 479, "jingren": 479, "zhou": 479, "xiaojian": 479, "luo": 479, "qiang": 479, "yin": 479, "cao": 479, "ruiqi": 479, "tod": [479, 485], "yinghui": 479, "wu": 479, "jiaxin": 479, "jiang": 479, "43rd": 479, "zeyu": 479, "zheng": 479, "bohan": 479, "chao": 479, "tian": 479, "\u4ee5": [480, 483, 484, 486, 489], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 480, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [480, 482], "\u5982\u679c\u8fd0\u884c": 480, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 480, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 480, "\u56e0\u6b64": [480, 481, 483], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 480, "\u4f1a\u8bdd": [480, 483], "\u5ba2\u6237\u7aef": [480, 481, 485], "\u5b83\u5c01\u88c5": 480, "\u7ba1\u7406\u7740": 480, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 480, "\u5e76": 480, "\u8fde\u63a5": 480, "\u64cd\u4f5c\u7528\u6237\u5728": 480, "\u96c6\u7fa4\u4e0a\u7684": 480, "\u5f15\u64ce": 480, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 480, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 480, "\u5b9e\u4f8b": 480, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 480, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 480, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 480, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 480, "\u8def\u5f84": [480, 489], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 480, "\u7136\u540e": [480, 488], "\u5c06\u5176\u901a\u8fc7": 480, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 480, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 480, "\u8282\u70b9\u7684\u6982\u5ff5": 480, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 480, "\u521b\u5efa\u7684\u96c6\u7fa4": 480, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 480, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 480, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 480, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 480, "\u4e0a\u7684\u4e00\u4e2a": 480, "\u5b9e\u4f8b\u5305\u542b": 480, "\u4e00\u4e2a\u8fd0\u884c": 480, "\u7684": [480, 481, 482, 485, 490], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 480, "\u8d1f\u8d23\u5bf9": 480, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 480, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 480, "\u5f15\u64ce\u5bb9\u5668\u7684": 480, "replicaset": 480, "\u5bf9\u8c61": 480, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 480, "\u901a\u8fc7": [480, 483], "\u63a5\u6536\u6765\u81ea": 480, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 480, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 480, "\u56fe\u67e5\u8be2\u5f15\u64ce": 480, "\u56fe\u5b66\u4e60\u5f15\u64ce": [480, 485], "\u7684\u751f\u547d\u5468\u671f": 480, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 480, "\u8bf7\u5728": 480, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 480, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 480, "\u5b89\u88c5": [480, 485], "release_nam": 480, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 480, "\u53c2\u8003": 480, "\u8be5\u94fe\u63a5": 480, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 480, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 480, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 480, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 480, "\u96c6\u7fa4": [480, 482, 486], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 480, "\u7528\u6cd5\u5982\u4e0b": 480, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 480, "launch_clust": 480, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 480, "pyyaml": 480, "boto3": 480, "your_access_key_id": 480, "your_access_key_secret": 480, "region": 480, "your_region_nam": 480, "kube_config_path": 480, "alibabacloud_cs20151215": 480, "alibabacloud_ecs20140526": 480, "alibabacloud_vpc20160428": 480, "your_region_id": 480, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 480, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 480, "\u5e73\u53f0\u4e0a": 480, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 480, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 480, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 480, "\u672c\u5730\u90e8\u7f72": 480, "graphscope_env": [480, 481], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 481, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 481, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 481, "\u9075\u5faa": 481, "\u7684\u5f00\u6e90\u534f\u8bae": 481, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 481, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 481, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 481, "\u955c\u50cf": 481, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 481, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 481, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 481, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 481, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 481, "\u6267\u884c": 481, "10240m": 481, "minitest": 481, "unittest": 481, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 481, "\u6bd4\u5982": [481, 489], "\u56fe\u5206\u6790\u5f15\u64ce": [481, 485], "\u6a21\u5757": 481, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 481, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 481, "\u7684\u6784\u5efa\u8fc7\u7a0b": 481, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 481, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 481, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 481, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 481, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 481, "\u4e3a": [481, 482, 483], "shortsha": 481, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 481, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 481, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 481, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 481, "\u90a3\u4e48": 481, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 481, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 481, "\u5ba2\u6237\u7aef\u5373\u53ef": 481, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 481, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 481, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 481, "\u4e0b\u7684": 481, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 481, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 481, "install_prefix": 481, "\u4e0b\u5206\u522b\u6784\u5efa": 481, "\u7531\u4e8e": 481, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 481, "\u975edocker": 481, "\u4e2d\u8fdb\u884c": 481, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 481, "\u7684\u4f9d\u8d56": 481, "\u57fa\u4e8e\u5f53\u524d": 481, "\u73af\u5883\u4e0b\u7684": 481, "\u7248\u672c\u6784\u5efa": 481, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [481, 483], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 481, "\u7248\u672c": [481, 486], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 481, "conda": 481, "pyenv": 481, "\u5b89\u88c5\u591a\u4e2a": 481, "\u7684\u7248\u672c": 481, "\u98ce\u683c": 481, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 481, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 481, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 481, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 482, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 482, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 482, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 482, "\u6216\u8005\u5728": 482, "\u4e0e\u6211\u4eec\u8054\u7cfb": 482, "\u8fd0\u884c": 482, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 482, "\u5728\u901a\u8fc7": 482, "\u5ba2\u6237\u7aef\u4f7f\u7528": 482, "\u8fc7\u7a0b\u4e2d": 482, "\u9700\u8981\u7684\u6700\u4f4e": 482, "\u7248\u672c\u662f3": 482, "\u6700\u4f4epip\u7248\u672c\u662f": 482, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 482, "\u5355\u673a\u60c5\u51b5\u4e0b": 482, "\u8d44\u6e90\u9700\u6c42": 482, "\u6838": 482, "\u5185\u5b58": 482, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 482, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 482, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 482, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 482, "\u662f\u5426\u5f3a\u4f9d\u8d56": 482, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 482, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 482, "\u7684\u5f62\u5f0f\u5206\u53d1": 482, "\u53ef\u4ee5\u7528": 482, "\u5feb\u901f\u5b89\u88c5": 482, "\u5982\u4f55\u5982\u67e5\u770b": 482, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 482, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 482, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 482, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 482, "\u53ef\u4ee5\u4f7f\u7528": [482, 488], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 482, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 482, "\u7684\u78c1\u76d8": 482, "\u4e5f\u53ef\u5728": 482, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 482, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 482, "\u547d\u4ee4\u65f6": 482, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 482, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 482, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 482, "\u8fdb\u884c\u5220\u9664": 482, "\u901a\u5e38\u60c5\u51b5\u4e0b": 482, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 482, "\u90e8\u7f72": [482, 485], "\u65f6": [482, 483], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 482, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 482, "\u7b49\u6743\u9650": 482, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 482, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 482, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 482, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 482, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 482, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 482, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 482, "\u76ee\u524d": [482, 489], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 482, "\u53ef\u901a\u8fc7": 482, "\u8be5\u6587\u6863": 482, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 482, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 482, "\u5982\u679c": 482, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 482, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 482, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 482, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 482, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 482, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 482, "\u8f7d\u56fe\u9636\u6bb5": 482, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 482, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 482, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 482, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 482, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 482, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 482, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 482, "\u53ef\u89c1": 482, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 482, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 482, "\u90e8\u7f72\u7684": 482, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 482, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 482, "\u865a\u62df\u7684": 482, "\u6709\u4ec0\u4e48\u533a\u522b": 482, "\u5982\u4f55\u8bbe\u7f6e": 482, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 482, "\u5b83\u5b58\u50a8\u7531": 482, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 482, "\u7684\u5143\u4fe1\u606f": 482, "\u4f8b\u5982\u5f62\u72b6": 482, "\u540d\u79f0\u7b49": 482, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 482, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 482, "\u5b83\u76f8\u5f53\u4e8e": 482, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 482, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 482, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 482, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 482, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 482, "\u7684\u540c\u6837\u5927\u5c0f": 482, "\u5bfc\u81f4\u5728": 482, "\u73af\u5883\u4e0b\u5b89\u88c5": 482, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 482, "\u7f16\u8bd1": 482, "\u5931\u8d25": 482, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 482, "\u8be6\u60c5\u53ef\u53c2\u8003": 482, "\u4f60\u53ef\u4ee5\u6839\u636e": 482, "\u6b64\u6559\u7a0b": 482, "\u6765\u6e90\u7801\u7f16\u8bd1": 482, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 482, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 482, "\u4e0a\u5206\u914d": 482, "\u65f6\u9047\u5230\u4e86": 482, "\u95ee\u9898": 482, "\u5982\u4f55\u89e3\u51b3": 482, "\u901a\u5e38\u5f53\u4f7f\u7528": 482, "\u7684\u65b9\u5f0f\u5b89\u88c5": 482, "\u4f1a\u62a5": 482, "\u9519\u8bef": [482, 484], "\u6211\u4eec\u901a\u8fc7": 482, "\u6765\u67e5\u770b\u65e5\u5fd7": 482, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 482, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 482, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 482, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 482, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 482, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 482, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 482, "\u7136\u540e\u5c06": 482, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 482, "\u4e3a\u4ec0\u4e48\u5728": 482, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 482, "\u5b9e\u4f8b\u65f6": 482, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 482, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 482, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 482, "\u96c6\u7fa4\u62c9\u8d77": 482, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 482, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 482, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 482, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 482, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 482, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 482, "\u6216\u5bb9\u5668": 482, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 482, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 482, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 482, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 482, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 482, "\u4ee5\u53ca": [482, 489], "\u8bf7\u6ce8\u610f": 482, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 482, "stackexchang": 482, "23452": 482, "\u5176\u4ed6\u95ee\u9898": 482, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 482, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 482, "\u540c\u65f6": [482, 487], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 482, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 483, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 483, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 483, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 483, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 483, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 483, "\u4f7f\u7528": [483, 485, 488, 489, 490], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 483, "\u6570\u636e\u96c6": 483, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 483, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 483, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 483, "\u5373\u8bba\u6587": 483, "\u4f5c\u8005": 483, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 483, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 483, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 483, "\u7ed9\u51fa\u5f02\u6784\u7684": 483, "\u6570\u636e": 483, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 483, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 483, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 483, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 483, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 483, "\u5728\u8be5\u6570\u636e\u4e2d": 483, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 483, "\u6458\u8981\u62bd\u53d6\u7684": 483, "\u7ef4": 483, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 483, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 483, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 483, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 483, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 483, "\u5ba2\u6237\u7aef\u8c03\u7528": 483, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 483, "\u6b65\u9aa4": 483, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 483, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 483, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 483, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 483, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 483, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 483, "\u7684\u7b2c\u4e00\u6b65": 483, "\u6211\u4eec\u9700\u8981\u5728": 483, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 483, "\u5bf9\u4e8e": [483, 486], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 483, "\u670d\u52a1\u7c7b\u578b": 483, "\u9ed8\u8ba4\u662f": 483, "\u53e6\u5916": [483, 489], "\u6ce8\u610f": [483, 486], "\u662f": 483, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 483, "\u5f53\u5728": 483, "\u4e0a\u4f7f\u7528": 483, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 483, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 483, "\u901a\u5e38\u4e3a": 483, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 483, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 483, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 483, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 483, "\u8be5": 483, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 483, "\u6240\u6709\u8d44\u6e90": 483, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 483, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 483, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 483, "\u90fd\u6709\u4e00\u4e2a": 483, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 483, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 483, "\u8f7d\u56fe": [483, 484, 485], "\u4ee5\u5c5e\u6027\u56fe": 483, "\u5efa\u6a21\u56fe\u6570\u636e": [483, 489], "\u5c5e\u6027\u56fe\u4e2d": 483, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 483, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 483, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 483, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 483, "\u5206\u522b\u6807\u8bb0\u4e3a": 483, "\u8bba\u6587": 483, "\u673a\u6784": 483, "\u7814\u7a76\u9886\u57df": 483, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 483, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 483, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 483, "\u5f15\u7528": 483, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 483, "\u9876\u70b9": 483, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 483, "\u64b0\u5199": 483, "\u7684\u8fb9": [483, 489], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 483, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 483, "\u6240\u6709\u7684\u9876\u70b9": 483, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 483, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 483, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 483, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 483, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 483, "\u6570\u636e\u6587\u4ef6": 483, "\u7ed3\u5408\u4f7f\u7528": 483, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 483, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 483, "author_affiliated_with_institut": 483, "paper_has_topic_field_of_studi": 483, "hastop": 483, "paper_cites_pap": 483, "author_writes_pap": 483, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 483, "\u8fd9\u91cc\u7684": 483, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 483, "\u4e2d\u7684\u56fe": 483, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 483, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 483, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 483, "\u63a2\u7d22\u6027": 483, "\u65b9\u5f0f\u6765\u63a2\u7d22": 483, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 483, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 483, "\u91c7\u7528\u79f0\u4e3a": 483, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 483, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 483, "\u5728\u6b64\u793a\u4f8b\u4e2d": 483, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 483, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 483, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 483, "\u552f\u4e00\u6807\u8bc6": 483, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 483, "\u4e8b\u5b9e\u8bc1\u660e": 483, "\u8bb8\u591a\u7b97\u6cd5": 483, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 483, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 483, "\u96c6\u4e2d\u6027": 483, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 483, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 483, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 483, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 483, "\u80cc\u540e\u57fa\u4e8e": 483, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 483, "\u7136\u540e\u8fd0\u884c": 483, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 483, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 483, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 483, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 483, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 483, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 483, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 483, "\u5f53\u524d": 483, "\u652f\u6301\u7528\u6237\u4ee5": 483, "\u6a21\u578b\u548c": 483, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 483, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 483, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 483, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 483, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 483, "\u6211\u4eec\u8bad\u7ec3\u4e86": 483, "\u6a21\u578b": 483, "\u5c06\u8282\u70b9": 483, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 483, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 483, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 483, "\u4e3a\u6b64": 483, "\u63a5\u7740\u4e0a\u4e00\u6b65": 483, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 483, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 483, "train_gcn": 483, "\u6700\u540e": [483, 484, 487], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 483, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 483, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 483, "\u548c\u5f15\u64ce": 483, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 483, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 484, "\u6295\u5f71\u7684\u65b9\u6cd5": 484, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 484, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 484, "\u5177\u4f53\u800c\u8a00": 484, "\u56fe": 484, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 484, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 484, "\u6211\u4eec\u5df2\u7ecf\u5728": 484, "\u4e00\u8282\u89c1\u5230\u8fc7": 484, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 484, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 484, "\u8fdb\u4e00\u6b65\u7684": 484, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 484, "\u4e2d\u4e4b\u540e": 484, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 484, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 484, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 484, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 484, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 484, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 484, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 484, "pathlib": 484, "\u5230\u8fd9\u91cc": 484, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 484, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 484, "graph1": 484, "graph2": 484, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 484, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 484, "\u5728\u5e95\u5c42": 484, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 484, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 484, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 484, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 484, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 484, "\u6765\u5b8c\u6210": 484, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 484, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 484, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 484, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 484, "\u503c\u53ef\u4ee5\u4e3a": 484, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 484, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 484, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 484, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 484, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 484, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 484, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 484, "sub_graph2": 484, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 484, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 484, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 484, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 484, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 484, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 484, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 484, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 484, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 484, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 484, "\u8fb9\u6807\u7b7e": 484, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 484, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 484, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 484, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 484, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 484, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 484, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 484, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 485, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 485, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 485, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 485, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 485, "\u63d0\u4f9b\u4e86": 485, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 485, "\u5177\u6709\u4e00\u7ad9\u5f0f": 485, "\u5f00\u53d1\u4fbf\u6377": 485, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 485, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 485, "\u5305\u62ec": [485, 488], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 485, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 485, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 485, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 485, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 485, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 485, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 485, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 485, "\u5982\u98ce\u63a7": 485, "\u7535\u5546\u63a8\u8350": 485, "\u5e7f\u544a": 485, "\u7f51\u7edc\u5b89\u5168": [485, 488], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 485, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 485, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 485, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 485, "\u6700\u4f73\u8bba\u6587\u5956": 485, "vldb2017": 485, "\u6700\u4f73\u6f14\u793a\u5956": 485, "vldb2020": 485, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 485, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 485, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 485, "2021\u5f55\u7528": 485, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 485, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 485, "kdd\u7b49": 485, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 485, "\u57fa\u4e8e": [485, 490], "\u793a\u4f8b": 485, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 485, "\u521b\u5efa\u4f1a\u8bdd": 485, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 485, "\u56fe\u5206\u6790": 485, "\u56fe\u795e\u7ecf\u7f51\u7edc": 485, "\u5173\u95ed\u4f1a\u8bdd": 485, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 485, "\u5728aw": 485, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 485, "\u672c\u5730\u90e8\u7f72graphscop": 485, "\u5165\u95e8\u6559\u7a0b": 485, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [485, 490], "\u4f7f\u7528\u517c\u5bb9": [485, 490], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [485, 490], "\u7528": [485, 487, 490], "\u50cf": [485, 490], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [485, 490], "\u8f7d\u5165\u56fe\u6570\u636e": [485, 490], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [485, 490], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [485, 490], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [485, 490], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [485, 490], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [485, 490], "bipartitegraphsag": [485, 490], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [485, 490], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [485, 490], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [485, 490], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 485, "\u624b\u52a8\u914d\u7f6e\u56fe": 485, "\u9ad8\u7ea7\u7528\u6cd5": 485, "\u4ece": [485, 487], "\u4e2d\u8f7d\u56fe": 485, "\u7684\u53d8\u79cd": 485, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 485, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 485, "\u6295\u5f71": 485, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 485, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 485, "\u5185\u7f6e\u7b97\u6cd5": 485, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 485, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 485, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 485, "\u4e2d\u7684\u51fd\u6570": 485, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 485, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 485, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 485, "\u5229\u7528python": 485, "\u8fde\u63a5graphscop": 485, "\u5229\u7528java": 485, "\u5f00\u53d1\u63a7\u5236\u53f0": 485, "gremlin\u7f16\u7a0b\u5165\u95e8": 485, "gremlin\u517c\u5bb9\u6027": 485, "\u5bf9\u6bd4tinkerpop": 485, "\u56fe\u5b66\u4e60\u6a21\u578b": 485, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 485, "\u5e38\u89c1\u95ee\u9898": 485, "\u5f00\u53d1\u8005\u6307\u5357": 485, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 485, "\u6784\u5efa": 485, "\u4ee3\u7801\u98ce\u683c": 485, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 486, "monterei": 486, "\u7a0b\u5e8f\u5305": 486, "\u7684\u5f62\u5f0f\u53d1\u5e03": 486, "\u53ef\u76f4\u63a5\u901a\u8fc7": 486, "\u9700\u8981\u6ee1\u8db3": 486, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 486, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 486, "\u73af\u5883\u4e0b\u8fd0\u884c": 486, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 486, "\u7684\u7528\u6237": 486, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 486, "\u5e76\u5728": 486, "\u4e2d\u5f00\u542f": 486, "\u529f\u80fd": 486, "\u53d1\u884c\u7248\u7528\u6237": 486, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 486, "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 486, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 486, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 486, "\u4e0a\u5b89\u88c5": 486, "wsl2": 486, "\u6765\u6a21\u62df": 486, "\u73af\u5883": [486, 490], "\u63a5\u4e0b\u6765": [486, 487, 488], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 486, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 487, "\u7b80\u79f0gie": 487, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 487, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 487, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 487, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 487, "\u8be5\u5f15\u64ce\u652f\u6301": 487, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 487, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 487, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 487, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 487, "\u63a5\u53e3": [487, 488], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 487, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 487, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 487, "\u5982\u4e0b\u6240\u793a": 487, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 487, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 487, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 487, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 487, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 487, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 487, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 487, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 487, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 487, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 487, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 487, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 487, "\u683c\u5f0f": 487, "\u7684\u8f93\u51fa": 487, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 487, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 487, "python\u8bbf\u95ee\u56fe\u6570\u636e": 487, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 487, "\u5b98\u65b9\u6587\u6863": 487, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 487, "\u8be6\u89c1gremlin": 487, "java\u7684": 487, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 487, "\u4e5f\u53eb\u505arepl\u73af\u5883": 487, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 487, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 487, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 487, "\u5b89\u88c5gremlin": 487, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 487, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 487, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 487, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 487, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 487, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 487, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 487, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 487, "\u5176\u4e2d\u7684": 487, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 487, "\u6216ip": 487, "\u548c\u7aef\u53e3": 487, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 487, "\u63d0\u793a\u7b26\u4e0b": 487, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 487, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 487, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 487, "\u8fdc\u7a0b": 487, "graphscope\u6267\u884c": 487, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 487, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 487, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 487, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 487, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 487, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 487, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 487, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 487, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 487, "hoc": 487, "\u904d\u5386\u67e5\u8be2": 487, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 487, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 487, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 487, "\u70b9\u6216\u8fb9": 487, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 487, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 487, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 487, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 487, "\u952e": 487, "\u503c": 487, "\u5bf9": 487, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 487, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 487, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 487, "\u5b83\u5305\u542b": 487, "\u7528\u6237": 487, "\u5546\u54c1": 487, "\u5730\u5740": 487, "\u4e09\u7c7b\u70b9": 487, "\u5b83\u4eec\u901a\u8fc7": 487, "\u8d2d\u4e70": 487, "\u9012\u9001": 487, "belongs_to": 487, "\u5c5e\u4e8e": 487, "home_of": 487, "\u5bb6\u5ead\u5730\u5740": 487, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 487, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 487, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 487, "\u8def\u5f841": 487, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 487, "\u4e70\u5bb6": 487, "tom": 487, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 487, "jack": 487, "\u63d0\u4f9b\u7684\u6807\u4ef7": 487, "\u7684\u5546\u54c1": 487, "gift": 487, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 487, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 487, "\u904d\u5386\u5668": 487, "\u6807\u8bc6": 487, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 487, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 487, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 487, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 487, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 487, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 487, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 487, "\u8fb9\u6216\u5c5e\u6027": 487, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 487, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 487, "\u5d4c\u5957\u904d\u5386": 487, "\u7684\u652f\u6301": 487, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 487, "\u5b50": 487, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 487, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 487, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 487, "\u8fc7\u6ee4": 487, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 487, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 487, "\u800c": 487, "\u6620\u5c04": 487, "\u6392\u5e8f": 487, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 487, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 487, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 487, "\u5728gremlin\u4e2d\u901a\u8fc7": 487, "\u5faa\u73af": 487, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 487, "\u7ec8\u6b62\u6761\u4ef6": 487, "\u8868\u8fbe": 487, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 487, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 487, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 487, "\u6761\u4ef6\u7ec8\u6b62": 487, "\u64cd\u4f5c\u7c7b\u4f3c": 487, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 487, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 487, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 487, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 487, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 487, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 487, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 487, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 487, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 487, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 487, "\u7684\u6709\u5411\u73af\u8def": 487, "\u9996\u5148": [487, 489], "\u8f93\u5165\u56fe\u64cd\u4f5c": 487, "\u5305\u542b\u4e00\u4e2a": 487, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 487, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 487, "\u70b9": 487, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 487, "\u7684\u70b9": 487, "\u7d27\u968f\u5176\u540e\u7684": 487, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 487, "\u4fee\u9970\u7b26": 487, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 487, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 487, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 487, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 487, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 487, "\u67e5\u8be2\u6cbf\u7740": 487, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 487, "\u6b21": 487, "\u8f93\u51fahops\u5728": 487, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 487, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 487, "\u901a\u8fc7\u5728": 487, "\u5185\u914d\u7f6e": 487, "\u9009\u9879\u5b9e\u73b0": 487, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 487, "\u6307\u4ee3": 487, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 487, "\u7684\u73af": 487, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 487, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 487, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 487, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 487, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 487, "\u5982\u679c\u6709\u7684\u8bdd": 487, "gie\u652f\u6301apach": 487, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 487, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 487, "3\u548c3": 487, "4\u7248\u672c\u517c\u5bb9\u7684": 487, "\u670d\u52a1\u63a5\u53e3": 487, "\u9664\u6b64\u4e4b\u5916": 487, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 487, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 487, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 487, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 487, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 487, "\u76ee\u524d\u7684": 487, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 487, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 487, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 487, "\u4e0d\u53ef\u4fee\u6539": 487, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 487, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 487, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 487, "\u7ea6\u675f": 487, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 487, "\u5305\u62ec\u70b9": 487, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 487, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 487, "\u4e3b\u952e\u7ea6\u675f": 487, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 487, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 487, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 487, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 487, "id\u7f16\u7801\u4e86\u7c7b\u578b": 487, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 487, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 487, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 487, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 487, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 487, "\u56fe\u4fee\u6539\u64cd\u4f5c": 487, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 487, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 487, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 487, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 487, "\u4e8b\u52a1": 487, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 487, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 487, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 487, "\u548c\u793a\u4f8b\u7528\u6cd5": 487, "\u8f93\u5165\u56fe": 487, "labelnam": 487, "labelname1": 487, "labelname2": 487, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 487, "\u8bed\u6cd5\u7cd6": 487, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 487, "\u4ee3\u8868": 487, "\u8282\u70b9\u7684age\u5c5e\u6027": 487, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 487, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 487, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 487, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 487, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 487, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 487, "dedup": 487, "aaa": 487, "otherv": 487, "flatmap": 487, "\u591a\u91cd\u6620\u5c04": 487, "bothv": 487, "\u627e\u5230\u6240\u6709\u4ece": 487, "\u5f00\u59cb\u901a\u8fc7": 487, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 487, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 487, "\u70b9\u4e0d\u91cd\u590d": 487, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 487, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 487, "\u70b9\u53ef\u91cd\u590d": 487, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 487, "\u805a\u5408": 487, "groupbi": 487, "groupby\u591a\u4e2akei": 487, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 487, "groupby\u591a\u4e2avalu": 487, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 487, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 487, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 487, "\u4f1a\u9010\u6b65\u652f\u6301": 487, "\u53ef\u4ee5\u901a\u8fc7path": 487, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 487, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 487, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 487, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 487, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 487, "\u8ba1\u7b97\u5b50\u56fe": 487, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 487, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 487, "cap": 487, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 487, "\u4f8b\u5982pagerank\u548cshortestpath": 487, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 487, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 488, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 488, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 488, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 488, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 488, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 488, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 488, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 488, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 488, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 488, "\u57fa\u4e8egl": 488, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 488, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 488, "\u4f8b\u5982\u56fe\u91c7\u6837": 488, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 488, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 488, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 488, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 488, "\u539f\u59cb\u7684gcn": 488, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 488, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 488, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 488, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 488, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 488, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 488, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 488, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 488, "graphsaint\u7b49": 488, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 488, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 488, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 488, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 488, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 488, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 488, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 488, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 488, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 488, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 488, "\u5305\u62ectensorflow": 488, "\u548cpytorch": 488, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 488, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 488, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 488, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 488, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 488, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 488, "\u79f0\u4e3a": 488, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 488, "\u611f\u53d7\u91ce": 488, "\u591a\u8df3\u90bb\u5c45": 488, "\u7ec4\u6210": 488, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 488, "\u6211\u4eec\u5b9e\u73b0": 488, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 488, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 488, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 488, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 488, "\u7136\u540e\u7528": 488, "\u7ba1\u7406": 488, "\u5230": 488, "\u7684\u8f6c\u6362": 488, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 488, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 488, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 488, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 488, "\u5411\u91cf": 488, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 488, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 488, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 488, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 488, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 488, "\u56fe\u7f16\u7801\u5668": 488, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 488, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 488, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 488, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 488, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 488, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 488, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 488, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 488, "\u5982tensorflow": 488, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 488, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 488, "\u901a\u5e38\u6765\u8bf4": 488, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 488, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 488, "\u7528\u56fe\u91c7\u6837": 488, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 488, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 488, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 488, "\u4ee5\u8fd9\u4e9b": 488, "\u4e3a\u8f93\u5165\u4ea7\u751f": 488, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 488, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 488, "\u4ea7\u751f\u8d1f\u6837\u672c": 488, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 488, "\u6211\u4eec\u62bd\u8c61\u4e86": 488, "\u6765\u91c7\u6837\u90bb\u5c45": 488, "\u6700\u540e\u5c06": 488, "\u4ea7\u751f\u7684": 488, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 488, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 488, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 488, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 488, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 488, "\u624d\u80fd\u4f7f\u7528": 488, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 488, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 488, "\u5b9a\u4e49\u7f16\u7801\u5668": 488, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 488, "\u5f97\u5230": 488, "\u540e": 488, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 488, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 488, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 488, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 488, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 488, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 488, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 488, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 488, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 488, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 488, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 488, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 488, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 488, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 488, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 488, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 488, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 488, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 488, "\u6765": 488, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 488, "\u9700\u8981\u7684\u683c\u5f0f": 488, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 488, "\u5206\u522b\u662f\u70b9\u8868": 488, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 488, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 488, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 488, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 488, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 488, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 488, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 488, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 488, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 488, "\u56de\u4e00\u8df3\u90bb\u5c45": 488, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 488, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 488, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 488, "\u56e0\u6b64\u9009\u62e9": 488, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 488, "\u6210": 488, "\u8fd4\u56de": 488, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 488, "\u6765\u628a": 488, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 488, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 488, "\u4f60\u53ef\u4ee5\u4ece": 488, "\u83b7\u53d6\u548c\u524d\u9762": 488, "\u5bf9\u5e94\u7684": 488, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 488, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 488, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 488, "\u56e0\u4e3a": 488, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 488, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 488, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 488, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 488, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 488, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 488, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 488, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 488, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 488, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 488, "\u7136\u540e\u5728": 488, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 488, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 488, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 488, "\u6765\u8fdb\u884c\u8bad\u7ec3": 488, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 488, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 488, "\u76ee\u5f55": 488, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 488, "gat\u7b49\u6a21\u578b": 488, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 488, "\u5c5e\u6027\u56fe": 489, "\u56fe\u4e0a\u7684\u70b9": 489, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 489, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 489, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 489, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 489, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 489, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 489, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 489, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 489, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 489, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 489, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 489, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 489, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 489, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 489, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 489, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 489, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 489, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 489, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 489, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 489, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 489, "\u7684\u672c\u5730\u8def\u5f84": 489, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 489, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 489, "\u662f\u6211\u4eec\u901a\u8fc7": 489, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 489, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 489, "\u4f60\u53ef\u4ee5\u5728": 489, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 489, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 489, "\u7136\u800c": 489, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 489, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 489, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 489, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 489, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 489, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 489, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 489, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 489, "\u6211\u4eec\u5c06\u4f7f\u7528": 489, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 489, "\u627e\u5230\u6e90\u6570\u636e": 489, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 489, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 489, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 489, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 489, "\u4ee3\u8868\u6570\u636e\u6e90": 489, "\u6307\u793a": 489, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 489, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 489, "\u6570\u7ec4\u7b49": 489, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 489, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 489, "\u8f7d\u5165\u6570\u636e": 489, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 489, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 489, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 489, "\u9ed8\u8ba4\u4e3a": 489, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 489, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 489, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 489, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 489, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 489, "\u4e3e\u4e2a\u4f8b\u5b50": 489, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 489, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 489, "\u53ef\u9009\u9879": 489, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 489, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 489, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 489, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 489, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 489, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 489, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 489, "\u6bd4\u5982\u8bf4": 489, "\u5217\u7684\u5217\u540d": 489, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 489, "\u6216\u76ee\u6807\u70b9": 489, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 489, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 489, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 489, "\u4ee3\u8868\u7b2c\u51e0\u5217": 489, "\u4ece0\u5f00\u59cb": 489, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 489, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 489, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 489, "\u7c7b\u4f3c": 489, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 489, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 489, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 489, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 489, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 489, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 489, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 489, "\u8fb9\u7684\u6807\u7b7e\u540d": 489, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 489, "\u4e00\u5217\u5c5e\u6027": 489, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 489, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 489, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 489, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 489, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 489, "\u4e3e\u4f8b\u6765\u8bf4": 489, "\u8d77\u70b9\u7684": 489, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 489, "\u5217\u540d": 489, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 489, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 489, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 489, "\u4e00\u5217\u4e3a\u8d77\u70b9": 489, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 489, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 489, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 489, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 489, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 489, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 489, "\u5982\u679c\u7528\u6237\u7684": 489, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 489, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 489, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 489, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 489, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 489, "\u6709\u4e00\u4e2a\u540d\u4e3a": 489, "\u7684\u8fb9\u6807\u7b7e": 489, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 489, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 489, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 489, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 489, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 489, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 489, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 489, "\u50cf\u8fd9\u6837": 489, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 489, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 489, "\u5728\u8fd9\u91cc": 489, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 489, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 489, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 489, "\u7b49\u7c7b\u578b": 489, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 489, "\u5206\u522b\u4e3a": 489, "\u53ef\u4ee5\u4e3a": 489, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 489, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 489, "\u5f53id\u4e0d\u80fd\u7528": 489, "\u8868\u793a\u65f6": 489, "\u624d\u5e94\u8be5\u4f7f\u7528": 489, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 489, "\u5efa\u8bae\u4f7f\u7528": 489, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 489, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 489, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 489, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 489, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 489, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 489, "\u5c5e\u6027\u56fe\u7684": 489, "\u4f8b\u5b50": 489, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 489, "\u7684\u7c7b": 489, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 489, "\u652f\u6301\u4ece": 489, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 489, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 489, "\u9664\u4e86": 489, "\u5916": 489, "\u5176\u4ed6\u5c5e\u6027": 489, "id\u5217": 489, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 489, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 489, "\u6211\u4eec\u5c06\u5176\u4ee5": 489, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 489, "\u5f53": 489, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 489, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 489, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 489, "\u6807\u51c6": 489, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 489, "\u5c06\u4f1a\u89e3\u6790": 489, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 489, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 489, "\u672c\u5730": 489, "\u6570\u636e\u7531": 489, "\u8d1f\u8d23\u8f7d\u5165": 489, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 489, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 489, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 489, "\u4e4b\u4e8e": 489, "\u6216\u8005\u662f": 489, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 489, "\u6bd4\u5982\u53c2\u7167": 489, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 489, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 489, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 489, "abstractbufferedfil": 489, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 489, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 489, "write\u529f\u80fd": 489, "\u6700\u540e\u901a\u8fc7": 489, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 489, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 490, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 490, "\u5982\u4f55\u8f7d\u56fe": 490, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 490, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 490, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 490, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 490, "\u6211\u4eec\u7528jupyt": 490, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 490, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 490, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 490, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 490, "lab": 490, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 490, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 490}, "objects": {"": [[246, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [246, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [246, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [246, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [246, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [246, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [246, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [246, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [246, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [246, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [246, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [246, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [246, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [246, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [246, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [246, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [246, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [246, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [246, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [246, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [246, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [246, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [246, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [246, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [246, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [246, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [246, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [246, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [246, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [246, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [246, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [246, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [246, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [246, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [246, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [246, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [246, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [246, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [246, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [246, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [246, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [246, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [246, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [246, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [246, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [246, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [246, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [246, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [246, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [246, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [246, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [246, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [246, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [246, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [246, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [246, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [246, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [246, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [246, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [246, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [246, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [246, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [246, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [246, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [246, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [246, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [246, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [246, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [246, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [246, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [246, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [246, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [246, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [246, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [246, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [246, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [246, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [246, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [246, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [246, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [246, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [246, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [246, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [246, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [246, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [246, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [246, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [246, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [246, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [246, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [246, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [246, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [246, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [246, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [246, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [246, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [246, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [246, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [246, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [246, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [246, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [246, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [246, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [246, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [246, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [246, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [246, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [246, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [246, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [246, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [246, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [246, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [246, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [246, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [246, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [246, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [246, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [246, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [246, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [246, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [246, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [246, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [246, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [246, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [246, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [246, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [246, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [246, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [246, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [246, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [246, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [246, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [246, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [246, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [246, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [246, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [246, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [246, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [246, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [246, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [246, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [246, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [246, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [246, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [246, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [246, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [246, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [246, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [246, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [246, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [246, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [246, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [246, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [246, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [246, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [246, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [246, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [246, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [246, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [246, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [246, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [246, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [246, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [246, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [246, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [246, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [246, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [246, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [246, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [246, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [246, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [246, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [246, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [246, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [246, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [246, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [246, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [246, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [246, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [246, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [246, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [246, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [246, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [246, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [246, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [246, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [246, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [246, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [246, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [246, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [246, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [246, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [246, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [246, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [246, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [246, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [246, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [246, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [246, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [246, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [246, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [246, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [246, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [246, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [246, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [246, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [246, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [246, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [246, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [246, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [246, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [246, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [246, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [246, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [246, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [246, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [246, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [246, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [246, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [246, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [246, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [246, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [246, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [246, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [246, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [246, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [246, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [246, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [246, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [246, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [246, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [246, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [246, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [246, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [246, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [246, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [246, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [246, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [246, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [246, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [246, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [246, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [246, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [246, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [246, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [246, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [246, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [246, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [246, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [246, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [246, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [246, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [246, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [246, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [246, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [246, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [246, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [246, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [246, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [246, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [246, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [246, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [246, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [246, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [246, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [246, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [246, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [246, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [246, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [246, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [246, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [246, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [246, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [246, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [246, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [246, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [246, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [246, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [246, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [246, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [246, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [246, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [246, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [246, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [246, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [246, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [246, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [246, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [246, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [246, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [246, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [246, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [246, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [246, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [246, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [246, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [246, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [246, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [246, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [246, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [246, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [246, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [246, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [246, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [246, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [246, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [246, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [246, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [246, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [246, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [246, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [246, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [246, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [246, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [246, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [246, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[463, 9, 1, "", "Session"], [253, 12, 1, "", "Vertex"], [247, 8, 1, "", "attribute_assortativity_coefficient"], [247, 8, 1, "", "average_degree_connectivity"], [247, 8, 1, "", "average_shortest_path_length"], [247, 8, 1, "", "avg_clustering"], [247, 8, 1, "", "bfs"], [247, 8, 1, "", "cdlp"], [247, 8, 1, "", "clustering"], [254, 8, 1, "", "declare"], [247, 8, 1, "", "degree_assortativity_coefficient"], [247, 8, 1, "", "degree_centrality"], [247, 8, 1, "", "eigenvector_centrality"], [297, 8, 1, "", "g"], [298, 8, 1, "", "get_default_session"], [299, 8, 1, "", "graphlearn"], [300, 8, 1, "", "gremlin"], [301, 8, 1, "", "has_default_session"], [247, 8, 1, "", "hits"], [247, 8, 1, "", "is_simple_path"], [247, 8, 1, "", "k_core"], [247, 8, 1, "", "k_shell"], [247, 8, 1, "", "katz_centrality"], [247, 8, 1, "", "louvain"], [247, 8, 1, "", "lpa"], [247, 8, 1, "", "lpa_u2i"], [247, 8, 1, "", "numeric_assortativity_coefficient"], [247, 8, 1, "", "pagerank"], [247, 8, 1, "", "pagerank_nx"], [302, 14, 1, "", "session"], [303, 8, 1, "", "set_option"], [247, 8, 1, "", "sssp"], [247, 8, 1, "", "triangles"], [247, 8, 1, "", "voterank"], [247, 8, 1, "", "wcc"]], "graphscope.Session": [[463, 10, 1, "", "__enter__"], [463, 10, 1, "", "__exit__"], [463, 10, 1, "", "__init__"], [463, 10, 1, "", "add_lib"], [463, 10, 1, "", "as_default"], [463, 10, 1, "", "close"], [463, 10, 1, "", "connected"], [463, 11, 1, "", "engine_config"], [463, 10, 1, "", "g"], [463, 10, 1, "", "get_config"], [463, 10, 1, "", "get_vineyard_object_mapping_table"], [463, 10, 1, "", "graphlearn"], [463, 11, 1, "", "info"], [463, 10, 1, "", "interactive"], [463, 10, 1, "", "load_from"], [463, 10, 1, "", "restore_from_pvc"], [463, 10, 1, "", "run_fetches"], [463, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[247, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[247, 10, 1, "", "__call__"], [247, 10, 1, "", "__init__"], [247, 10, 1, "", "is_compatible"], [247, 10, 1, "", "signature"]], "graphscope.framework.app": [[247, 9, 1, "", "App"], [247, 9, 1, "", "AppAssets"], [247, 9, 1, "", "AppDAGNode"], [255, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[247, 10, 1, "", "__del__"], [247, 10, 1, "", "__init__"], [247, 11, 1, "", "key"], [247, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[247, 10, 1, "", "__init__"], [247, 11, 1, "", "algo"], [247, 11, 1, "", "context_type"], [247, 11, 1, "", "gar"], [247, 10, 1, "", "is_compatible"], [247, 11, 1, "", "signature"], [247, 11, 1, "", "type"]], "graphscope.framework.context": [[248, 9, 1, "", "BaseContextDAGNode"], [248, 9, 1, "", "Context"], [248, 9, 1, "", "DynamicVertexDataContext"], [248, 9, 1, "", "LabeledVertexDataContextDAGNode"], [248, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [248, 9, 1, "", "ResultDAGNode"], [248, 9, 1, "", "TensorContextDAGNode"], [248, 9, 1, "", "VertexDataContextDAGNode"], [248, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[248, 10, 1, "", "to_dataframe"], [248, 10, 1, "", "to_numpy"], [248, 10, 1, "", "to_vineyard_dataframe"], [248, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[460, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[256, 8, 1, "", "add_column"], [257, 8, 1, "", "add_labels_to_graph"], [258, 8, 1, "", "arrow_to_dynamic"], [259, 8, 1, "", "bind_app"], [260, 8, 1, "", "clear_edges"], [261, 8, 1, "", "clear_graph"], [262, 8, 1, "", "context_to_dataframe"], [263, 8, 1, "", "context_to_numpy"], [264, 8, 1, "", "copy_graph"], [265, 8, 1, "", "create_app"], [266, 8, 1, "", "create_graph"], [267, 8, 1, "", "create_graph_view"], [268, 8, 1, "", "create_loader"], [269, 8, 1, "", "create_subgraph"], [270, 8, 1, "", "create_unload_op"], [271, 8, 1, "", "dynamic_to_arrow"], [272, 8, 1, "", "get_context_data"], [273, 8, 1, "", "graph_to_dataframe"], [274, 8, 1, "", "graph_to_numpy"], [275, 8, 1, "", "gremlin_to_subgraph"], [276, 8, 1, "", "modify_edges"], [277, 8, 1, "", "modify_vertices"], [278, 8, 1, "", "output"], [279, 8, 1, "", "project_arrow_property_graph"], [280, 8, 1, "", "project_to_simple"], [281, 8, 1, "", "report_graph"], [282, 8, 1, "", "run_app"], [283, 8, 1, "", "to_data_sink"], [284, 8, 1, "", "to_directed"], [285, 8, 1, "", "to_undirected"], [286, 8, 1, "", "to_vineyard_dataframe"], [287, 8, 1, "", "to_vineyard_tensor"], [288, 8, 1, "", "unload_app"], [289, 8, 1, "", "unload_context"], [290, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[318, 9, 1, "", "Graph"], [318, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[318, 10, 1, "", "__init__"], [318, 10, 1, "", "add_column"], [318, 10, 1, "", "add_edges"], [318, 10, 1, "", "add_vertices"], [318, 10, 1, "", "consolidate_columns"], [318, 10, 1, "", "detach"], [318, 11, 1, "", "key"], [318, 10, 1, "", "load_from"], [318, 10, 1, "", "loaded"], [318, 10, 1, "", "project"], [318, 10, 1, "", "save_to"], [318, 11, 1, "", "schema"], [318, 11, 1, "", "schema_path"], [318, 11, 1, "", "session_id"], [318, 10, 1, "", "to_dataframe"], [318, 10, 1, "", "to_directed"], [318, 10, 1, "", "to_numpy"], [318, 10, 1, "", "to_undirected"], [318, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[318, 10, 1, "", "__init__"], [318, 10, 1, "", "add_column"], [318, 10, 1, "", "add_edges"], [318, 10, 1, "", "add_vertices"], [318, 10, 1, "", "consolidate_columns"], [318, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[318, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[318, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[318, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[460, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[291, 10, 1, "", "__init__"], [292, 10, 1, "", "as_op_def"], [293, 10, 1, "", "eval"], [294, 11, 1, "", "evaluated"], [295, 11, 1, "", "key"], [296, 11, 1, "", "signature"]], "graphscope.interactive.query": [[319, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[319, 10, 1, "", "__init__"], [319, 10, 1, "", "close"], [319, 11, 1, "", "cypher_driver"], [319, 11, 1, "", "cypher_url"], [319, 10, 1, "", "execute"], [319, 11, 1, "", "graph_url"], [319, 11, 1, "", "gremlin_client"], [319, 11, 1, "", "gremlin_url"], [319, 11, 1, "", "object_id"], [319, 11, 1, "", "session"], [319, 11, 1, "", "session_id"], [319, 10, 1, "", "subgraph"], [319, 10, 1, "", "submit"], [319, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[320, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[320, 10, 1, "", "E"], [320, 10, 1, "", "V"], [320, 10, 1, "", "__init__"], [320, 10, 1, "", "get_handle"]], "graphscope.nx": [[456, 9, 1, "", "DiGraph"], [456, 9, 1, "", "Graph"], [458, 8, 1, "", "read_adjlist"], [458, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[456, 10, 1, "", "__contains__"], [456, 10, 1, "", "__getitem__"], [456, 10, 1, "", "__init__"], [456, 10, 1, "", "__iter__"], [456, 10, 1, "", "__len__"], [456, 10, 1, "", "add_edge"], [456, 10, 1, "", "add_edges_from"], [456, 10, 1, "", "add_node"], [456, 10, 1, "", "add_nodes_from"], [456, 10, 1, "", "add_weighted_edges_from"], [456, 11, 1, "", "adj"], [456, 10, 1, "", "adjacency"], [456, 14, 1, "", "adjlist_inner_dict_factory"], [456, 14, 1, "", "adjlist_outer_dict_factory"], [456, 10, 1, "", "clear"], [456, 10, 1, "", "clear_edges"], [456, 10, 1, "", "copy"], [456, 11, 1, "", "degree"], [456, 14, 1, "", "edge_attr_dict_factory"], [456, 10, 1, "", "edge_subgraph"], [456, 11, 1, "", "edges"], [456, 10, 1, "", "get_edge_data"], [456, 14, 1, "", "graph_attr_dict_factory"], [456, 14, 1, "", "graph_cache_factory"], [456, 11, 1, "", "graph_type"], [456, 10, 1, "", "has_edge"], [456, 10, 1, "", "has_node"], [456, 10, 1, "", "has_predecessor"], [456, 10, 1, "", "has_successor"], [456, 11, 1, "", "in_degree"], [456, 11, 1, "", "in_edges"], [456, 10, 1, "", "is_directed"], [456, 10, 1, "", "is_multigraph"], [456, 11, 1, "", "key"], [456, 11, 1, "", "name"], [456, 10, 1, "", "nbunch_iter"], [456, 10, 1, "", "neighbors"], [456, 14, 1, "", "node_attr_dict_factory"], [456, 14, 1, "", "node_dict_factory"], [456, 11, 1, "", "nodes"], [456, 10, 1, "", "number_of_edges"], [456, 10, 1, "", "number_of_nodes"], [456, 11, 1, "", "op"], [456, 10, 1, "", "order"], [456, 11, 1, "", "out_degree"], [456, 11, 1, "", "out_edges"], [456, 11, 1, "", "pred"], [456, 10, 1, "", "predecessors"], [456, 10, 1, "", "remove_edge"], [456, 10, 1, "", "remove_edges_from"], [456, 10, 1, "", "remove_node"], [456, 10, 1, "", "remove_nodes_from"], [456, 10, 1, "", "reverse"], [456, 11, 1, "", "schema"], [456, 11, 1, "", "session"], [456, 11, 1, "", "session_id"], [456, 10, 1, "", "set_edge_data"], [456, 10, 1, "", "set_node_data"], [456, 11, 1, "", "signature"], [456, 10, 1, "", "size"], [456, 10, 1, "", "subgraph"], [456, 11, 1, "", "succ"], [456, 10, 1, "", "successors"], [456, 10, 1, "", "to_directed"], [456, 10, 1, "", "to_undirected"], [456, 10, 1, "", "to_undirected_class"], [456, 10, 1, "", "update"]], "graphscope.nx.Graph": [[456, 10, 1, "", "__contains__"], [456, 10, 1, "", "__getitem__"], [459, 8, 1, "", "__init__"], [456, 10, 1, "", "__iter__"], [456, 10, 1, "", "__len__"], [459, 8, 1, "", "_convert_arrow_to_dynamic"], [456, 10, 1, "", "add_edge"], [456, 10, 1, "", "add_edges_from"], [456, 10, 1, "", "add_node"], [456, 10, 1, "", "add_nodes_from"], [456, 10, 1, "", "add_weighted_edges_from"], [456, 11, 1, "", "adj"], [456, 10, 1, "", "adjacency"], [456, 14, 1, "", "adjlist_inner_dict_factory"], [456, 14, 1, "", "adjlist_outer_dict_factory"], [456, 10, 1, "", "clear"], [456, 10, 1, "", "clear_edges"], [456, 10, 1, "", "copy"], [456, 11, 1, "", "degree"], [456, 14, 1, "", "edge_attr_dict_factory"], [456, 10, 1, "", "edge_subgraph"], [456, 11, 1, "", "edges"], [456, 10, 1, "", "get_edge_data"], [456, 14, 1, "", "graph_attr_dict_factory"], [456, 14, 1, "", "graph_cache_factory"], [456, 11, 1, "", "graph_type"], [456, 10, 1, "", "has_edge"], [456, 10, 1, "", "has_node"], [456, 10, 1, "", "is_directed"], [456, 10, 1, "", "is_multigraph"], [456, 11, 1, "", "key"], [456, 11, 1, "", "name"], [456, 10, 1, "", "nbunch_iter"], [456, 10, 1, "", "neighbors"], [456, 14, 1, "", "node_attr_dict_factory"], [456, 14, 1, "", "node_dict_factory"], [456, 11, 1, "", "nodes"], [456, 10, 1, "", "number_of_edges"], [456, 10, 1, "", "number_of_nodes"], [456, 11, 1, "", "op"], [456, 10, 1, "", "order"], [456, 10, 1, "", "remove_edge"], [456, 10, 1, "", "remove_edges_from"], [456, 10, 1, "", "remove_node"], [456, 10, 1, "", "remove_nodes_from"], [456, 11, 1, "", "schema"], [456, 11, 1, "", "session"], [456, 11, 1, "", "session_id"], [456, 10, 1, "", "set_edge_data"], [456, 10, 1, "", "set_node_data"], [456, 11, 1, "", "signature"], [456, 10, 1, "", "size"], [456, 10, 1, "", "subgraph"], [456, 10, 1, "", "to_directed"], [456, 10, 1, "", "to_undirected"], [456, 10, 1, "", "to_undirected_class"], [456, 10, 1, "", "update"]], "graphscope.nx.builtin": [[321, 8, 1, "", "average_clustering"], [321, 8, 1, "", "average_shortest_path_length"], [321, 8, 1, "", "bfs_edges"], [321, 8, 1, "", "clustering"], [321, 8, 1, "", "degree_centrality"], [321, 8, 1, "", "eigenvector_centrality"], [321, 8, 1, "", "has_path"], [321, 8, 1, "", "hits"], [321, 8, 1, "", "in_degree_centrality"], [321, 8, 1, "", "k_core"], [321, 8, 1, "", "katz_centrality"], [321, 8, 1, "", "out_degree_centrality"], [321, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[322, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[323, 8, 1, "", "add_cycle"], [324, 8, 1, "", "add_path"], [325, 8, 1, "", "add_star"], [326, 8, 1, "", "all_neighbors"], [327, 8, 1, "", "common_neighbors"], [328, 8, 1, "", "create_empty_copy"], [329, 8, 1, "", "degree"], [330, 8, 1, "", "degree_histogram"], [331, 8, 1, "", "density"], [332, 8, 1, "", "edge_subgraph"], [333, 8, 1, "", "edges"], [334, 8, 1, "", "freeze"], [335, 8, 1, "", "induced_subgraph"], [336, 8, 1, "", "info"], [337, 8, 1, "", "is_directed"], [338, 8, 1, "", "is_empty"], [339, 8, 1, "", "is_frozen"], [340, 8, 1, "", "is_negatively_weighted"], [341, 8, 1, "", "is_weighted"], [342, 8, 1, "", "neighbors"], [343, 8, 1, "", "nodes"], [344, 8, 1, "", "nodes_with_selfloops"], [345, 8, 1, "", "non_edges"], [346, 8, 1, "", "non_neighbors"], [347, 8, 1, "", "number_of_edges"], [348, 8, 1, "", "number_of_nodes"], [349, 8, 1, "", "number_of_selfloops"], [350, 8, 1, "", "selfloop_edges"], [351, 8, 1, "", "subgraph"], [352, 8, 1, "", "to_directed"], [353, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[455, 13, 0, "-", "atlas"], [455, 13, 0, "-", "classic"], [455, 13, 0, "-", "community"], [455, 13, 0, "-", "degree_seq"], [455, 13, 0, "-", "directed"], [455, 13, 0, "-", "duplication"], [455, 13, 0, "-", "ego"], [455, 13, 0, "-", "expanders"], [455, 13, 0, "-", "geometric"], [455, 13, 0, "-", "harary_graph"], [455, 13, 0, "-", "intersection"], [455, 13, 0, "-", "joint_degree_seq"], [455, 13, 0, "-", "mycielski"], [455, 13, 0, "-", "nonisomorphic_trees"], [455, 13, 0, "-", "small"], [455, 13, 0, "-", "social"], [455, 13, 0, "-", "spectral_graph_forge"], [455, 13, 0, "-", "sudoku"], [455, 13, 0, "-", "trees"], [455, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[354, 8, 1, "", "graph_atlas"], [355, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[356, 8, 1, "", "balanced_tree"], [357, 8, 1, "", "barbell_graph"], [358, 8, 1, "", "binomial_tree"], [359, 8, 1, "", "circulant_graph"], [360, 8, 1, "", "circular_ladder_graph"], [361, 8, 1, "", "complete_graph"], [362, 8, 1, "", "complete_multipartite_graph"], [363, 8, 1, "", "cycle_graph"], [364, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [365, 8, 1, "", "empty_graph"], [366, 8, 1, "", "full_rary_tree"], [367, 8, 1, "", "ladder_graph"], [368, 8, 1, "", "lollipop_graph"], [369, 8, 1, "", "null_graph"], [370, 8, 1, "", "path_graph"], [371, 8, 1, "", "star_graph"], [372, 8, 1, "", "trivial_graph"], [373, 8, 1, "", "turan_graph"], [374, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[375, 8, 1, "", "LFR_benchmark_graph"], [376, 8, 1, "", "caveman_graph"], [377, 8, 1, "", "connected_caveman_graph"], [378, 8, 1, "", "gaussian_random_partition_graph"], [379, 8, 1, "", "planted_partition_graph"], [380, 8, 1, "", "random_partition_graph"], [381, 8, 1, "", "relaxed_caveman_graph"], [382, 8, 1, "", "ring_of_cliques"], [383, 8, 1, "", "stochastic_block_model"], [384, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[385, 8, 1, "", "configuration_model"], [386, 8, 1, "", "degree_sequence_tree"], [387, 8, 1, "", "directed_configuration_model"], [388, 8, 1, "", "directed_havel_hakimi_graph"], [389, 8, 1, "", "expected_degree_graph"], [390, 8, 1, "", "havel_hakimi_graph"], [391, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[392, 8, 1, "", "gn_graph"], [393, 8, 1, "", "gnc_graph"], [394, 8, 1, "", "gnr_graph"], [395, 8, 1, "", "random_k_out_graph"], [396, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[397, 8, 1, "", "duplication_divergence_graph"], [398, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[399, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[400, 8, 1, "", "chordal_cycle_graph"], [401, 8, 1, "", "margulis_gabber_galil_graph"], [402, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[403, 8, 1, "", "geographical_threshold_graph"], [404, 8, 1, "", "random_geometric_graph"], [405, 8, 1, "", "soft_random_geometric_graph"], [406, 8, 1, "", "thresholded_random_geometric_graph"], [407, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[408, 8, 1, "", "hkn_harary_graph"], [409, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[410, 8, 1, "", "general_random_intersection_graph"], [411, 8, 1, "", "k_random_intersection_graph"], [412, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[413, 8, 1, "", "directed_joint_degree_graph"], [414, 8, 1, "", "is_valid_directed_joint_degree"], [415, 8, 1, "", "is_valid_joint_degree"], [416, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[417, 8, 1, "", "mycielski_graph"], [418, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[419, 8, 1, "", "nonisomorphic_trees"], [420, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[421, 8, 1, "", "LCF_graph"], [422, 8, 1, "", "bull_graph"], [423, 8, 1, "", "chvatal_graph"], [424, 8, 1, "", "cubical_graph"], [425, 8, 1, "", "desargues_graph"], [426, 8, 1, "", "diamond_graph"], [427, 8, 1, "", "dodecahedral_graph"], [428, 8, 1, "", "frucht_graph"], [429, 8, 1, "", "heawood_graph"], [430, 8, 1, "", "house_graph"], [431, 8, 1, "", "house_x_graph"], [432, 8, 1, "", "icosahedral_graph"], [433, 8, 1, "", "krackhardt_kite_graph"], [434, 8, 1, "", "make_small_graph"], [435, 8, 1, "", "moebius_kantor_graph"], [436, 8, 1, "", "octahedral_graph"], [437, 8, 1, "", "pappus_graph"], [438, 8, 1, "", "petersen_graph"], [439, 8, 1, "", "sedgewick_maze_graph"], [440, 8, 1, "", "tetrahedral_graph"], [441, 8, 1, "", "truncated_cube_graph"], [442, 8, 1, "", "truncated_tetrahedron_graph"], [443, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[444, 8, 1, "", "davis_southern_women_graph"], [445, 8, 1, "", "florentine_families_graph"], [446, 8, 1, "", "karate_club_graph"], [447, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[448, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[449, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[450, 8, 1, "", "prefix_tree"], [451, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[452, 8, 1, "", "triad_graph"]], "networkx.generators": [[455, 13, 0, "-", "internet_as_graphs"], [455, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[453, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[454, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 225, 235, 316, 469, 471], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 225, 304, 321, 471, 473], "all": [0, 31, 32, 36, 41], "pair": 0, "shortest": 0, "path": [0, 218, 220, 222], "length": 0, "attribut": [0, 20, 305, 322], "assort": 0, "averag": 0, "degre": [0, 329, 455], "connect": [0, 29, 30, 213, 221, 469, 476], "between": [0, 218, 465], "central": [0, 17], "breadth": 0, "first": [0, 209], "search": 0, "cdlp": 0, "close": [0, 476], "cluster": [0, 27, 30, 33, 41, 209, 231, 233], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 213], "label": [0, 220, 222, 235, 305, 468, 489], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 44, 46, 220, 229, 241, 304, 308, 310, 313, 316], "singl": [0, 48, 206], "sourc": [0, 17, 31, 32, 46, 220, 251, 305, 311, 314, 315], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 44, 45, 48, 212, 469], "aggreg": [1, 218, 220, 222, 226], "local": [1, 7, 32, 36, 38, 41, 211, 212, 220, 227, 228, 232, 234, 468, 469], "vertex": [1, 10, 24, 46, 222, 235, 253, 462, 468, 489], "map": [1, 46, 202, 465], "support": [1, 11, 23, 46, 215, 220, 225], "deploy": [2, 27, 38, 48, 208, 209], "gae": [2, 34, 238, 473, 477], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 195, 209, 469], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 191, 213, 221, 225, 245, 461, 469, 473, 481], "sdk": [2, 16, 34, 121, 191, 197, 221, 249], "helm": [2, 29, 48], "execut": [2, 34, 214, 236], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 45, 46, 47, 48, 196, 205, 206, 208, 214, 217, 218, 222, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 304, 306, 307, 308, 309, 310, 312, 316, 318, 320, 322, 455, 456, 458, 459, 465, 467, 468, 469, 470, 471, 477], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 205, 208, 225, 236, 237, 239, 244, 246, 247, 477], "uninstal": [2, 29, 469], "design": [3, 9, 34, 210, 225, 226, 236, 314, 468], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 44, 208, 212, 225, 227, 228, 232, 233, 234, 236, 244, 246, 468, 477], "dev": [4, 32, 36, 41, 211, 227], "test": [4, 36, 37, 41, 191, 211, 227, 233, 234, 311], "setup": [4, 32], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 17, 32, 36, 41, 211, 227, 251, 304, 311, 469, 489], "faq": [5, 218], "program": [6, 12, 14, 34, 206, 314], "model": [6, 12, 14, 15, 16, 17, 24, 34, 47, 196, 226, 231, 232, 233, 234, 238, 241, 304, 312, 316, 468, 469], "flash": [6, 15, 238], "motiv": [6, 9, 210, 236, 468], "The": [6, 19, 30, 196, 200, 210, 467], "overview": [6, 9, 12, 192, 196, 200, 208, 312, 469], "api": [6, 9, 12, 19, 20, 43, 121, 191, 192, 214, 246, 249, 250, 305, 316, 457, 461, 485], "strong": 6, "express": [6, 220, 222], "implement": [6, 15, 17, 37, 314, 468], "architectur": [6, 12, 210, 465], "optim": [6, 13, 217, 218, 234], "get": [7, 17, 37, 121, 191, 193, 204, 212, 228, 237, 311, 466], "start": [7, 45, 121, 191, 192, 193, 204, 211, 212, 222, 228, 237, 316, 466], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 121, 191, 195, 208, 212, 227, 228, 311, 469, 476], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 193, 206, 212, 220, 228, 233, 311], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 42, 49, 50, 51, 197, 201, 206, 208, 212, 228, 236, 239, 241, 242, 243, 246, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 465, 467, 477, 481, 485, 486], "what": [7, 14, 212, 218, 228, 239, 241, 242], "": [7, 212, 218, 228, 246], "next": [7, 212, 228, 242], "guid": [8, 35, 36, 49, 219, 230, 469, 473, 474], "exampl": [8, 17, 22, 23, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 219, 220, 230, 473, 474], "ingress": [9, 238], "increment": [9, 12], "messag": [9, 226], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 206, 306, 314], "runtim": [9, 34, 314], "kei": [10, 196, 214, 218, 225, 295], "concept": [10, 468], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 46, 222, 235, 322, 333, 458, 468, 489], "cut": [10, 468], "vertic": [10, 222, 235, 489], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 20, 453, 454, 457], "compat": [11, 218], "convert": 11, "nx": [11, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "oper": [11, 20, 28, 215, 222, 291, 292, 293, 294, 295, 296, 314, 460], "storag": [12, 33, 34, 208, 236, 465, 468], "layer": [12, 236], "grape": [12, 17, 238, 251], "ffi": 12, "comput": [12, 206, 208, 236, 468], "applic": [12, 15, 22, 23, 222, 236, 471], "perform": [13, 19, 34, 218, 225, 244], "tune": 13, "memori": [13, 235, 470], "footprint": 13, "properti": [13, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 196, 215, 218, 220, 222, 235, 467, 468, 489], "data": [13, 45, 46, 47, 48, 121, 191, 206, 209, 215, 218, 235, 305, 312, 315, 316, 467, 469], "structur": [13, 121, 191, 215, 251, 322], "usag": [13, 191, 200, 218, 235], "estim": [13, 464], "pie": [14, 16, 17, 18, 238, 249, 479], "i": [14, 220, 239, 241, 242], "workflow": [14, 225, 465], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 222, 224, 231, 232, 233, 234, 245], "develop": [15, 16, 17, 18, 22, 23, 36, 49, 192, 208, 304, 316, 469, 473], "your": [15, 16, 17, 18, 22, 37, 44, 209, 232, 234, 235, 304, 314, 473], "c": [15, 16, 35, 50, 473], "defin": [15, 16, 232, 233, 234, 314, 465], "A": [15, 196, 208, 217], "function": [15, 18, 233, 234, 247, 249, 304, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 463], "integr": [15, 37, 206, 315], "client": [15, 27, 30, 36, 233, 306, 476], "step": [16, 45, 220, 222, 241], "1": [16, 45, 202, 214, 305, 306, 308, 316], "context": [16, 246, 248, 462], "class": [16, 314, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "2": [16, 45, 202, 214, 305, 306, 316, 469], "3": [16, 45, 202, 214, 305, 306, 316, 469], "packag": [16, 31, 32, 233, 311], "4": [16, 202, 214, 305, 316], "gar": 16, "file": [16, 27, 31, 46, 315, 467], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 39, 121, 221, 224, 252, 469, 473], "jar": 17, "own": [17, 18, 22, 209, 235, 304, 314], "prepar": [17, 27, 30, 41, 193, 316], "jdk": [17, 251], "from": [17, 19, 20, 31, 32, 33, 46, 208, 214, 222, 235, 251, 311, 465, 469], "maven": [17, 121], "repositori": 17, "submit": [17, 22, 23, 37, 40], "javasdk": 17, "write": [18, 233, 469], "pregel": [18, 24, 249, 479], "us": [18, 20, 27, 32, 45, 209, 214, 218, 225, 242, 311, 314, 316, 462, 465, 469, 470], "math": [18, 479], "h": [18, 479], "how": [19, 37, 39, 40, 41, 207, 218, 227, 304, 314, 316, 477], "doe": 19, "analysi": [19, 236], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 45, 50, 231, 234], "an": [20, 214, 314], "empti": 20, "ad": [20, 235], "node": [20, 48, 226, 231, 232, 233, 234, 322, 343, 469], "examin": 20, "element": 20, "remov": [20, 209], "constructor": 20, "access": 20, "neighbor": [20, 234, 342], "deepcopi": 20, "subgraph": [20, 218, 220, 226, 229, 241, 351], "edge_subgraph": [20, 332], "copi": [20, 31], "direct": [20, 392, 393, 394, 395, 396, 455], "analyz": 20, "object": [20, 247, 248, 306, 318, 460, 463], "transform": [20, 459], "builtin": [21, 247, 321, 460], "giraph": 22, "try": [22, 45, 316], "some": [22, 222], "app": [22, 23, 246, 247, 255], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 48, 209, 469], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 311], "toward": 23, "centric": [24, 226], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 225, 305], "k8": [27, 231, 233, 477], "kubernet": [27, 30, 33, 38, 41, 231, 481, 486], "launch": [27, 232, 233, 234], "default": 27, "paramet": [27, 52, 53, 54, 55, 90, 91, 95, 100, 122, 123, 124, 125, 160, 161, 166, 170, 233, 235], "frequent": [27, 203], "imag": [27, 32, 41, 311, 469], "uri": 27, "specifi": [27, 235], "number": 27, "worker": [27, 246], "provid": 27, "kubeconfig": 27, "other": [27, 45, 121, 209, 235, 315, 469], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36, 42, 43], "configur": [28, 29, 44, 46, 48, 209, 212, 233, 317, 469], "releas": [29, 37], "offlin": [29, 31, 469], "exist": 30, "vineyard": [30, 211, 238, 470], "lifecycl": 30, "load": [30, 46, 214, 222, 231, 232, 233, 234, 235, 465, 467, 469, 470], "dataset": [30, 214, 235, 469], "anoth": 30, "session": [30, 231, 302, 463], "environ": [31, 32, 36, 41, 211, 214, 227], "wheel": [31, 311, 481], "download": [31, 214], "destin": 31, "extract": [31, 222], "them": [31, 235], "locat": 31, "basic": [31, 222, 305], "gcc": 31, "g": [31, 297], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 481], "maco": [32, 481], "persist": [33, 469], "pv": 33, "pvc": 33, "store": [33, 50, 51, 194, 198, 211, 469], "retor": 33, "framework": [34, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "multi": [34, 462], "languag": [34, 196, 310], "high": [34, 225, 236, 469], "librari": [34, 225, 311], "code": [35, 37, 192, 314, 475], "style": [35, 37, 457, 468], "rust": 35, "script": [35, 233, 476], "linter": 35, "checker": 35, "contain": [36, 227], "dep": [36, 227], "target": [36, 41, 235], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 455], "report": [37, 207], "bug": [37, 207], "request": [37, 40, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192], "featur": [37, 196, 225, 467, 469], "improv": 37, "document": [37, 121, 191, 192], "chang": [37, 476], "pre": 37, "commit": [37, 469], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 220], "suit": 37, "format": [37, 305, 467, 469], "right": 37, "keep": 37, "pull": [37, 40], "updat": [37, 476], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 477], "log": [38, 465, 469, 477], "command": [38, 192, 200, 476], "techniqu": [38, 235], "instrument": 39, "automat": 39, "rest": [43, 192], "servic": [44, 45, 121, 191, 192, 193, 200, 209, 211, 469], "avail": [44, 469], "new": [45, 314], "import": [45, 46, 233, 469], "modern": 46, "csv": 46, "odp": 46, "tabl": [46, 202, 208, 305], "breakdown": 46, "entiti": 47, "primit": 47, "type": [47, 52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 215, 217, 235, 243, 249, 305, 456, 467], "string": 47, "tempor": 47, "arrai": [47, 468], "docker": [48, 227, 311, 481], "quickstart": 48, "multipl": [48, 218, 222, 235], "valu": [48, 218, 220, 222], "yaml": 48, "interact": [49, 50, 51, 193, 195, 197, 201, 205, 208, 212, 237, 240, 244, 319, 477], "procedur": [50, 51, 194, 198, 200], "turn": 51, "cypher": [51, 193, 194, 196, 213, 215, 225, 240], "queri": [51, 193, 196, 198, 205, 210, 214, 218, 222, 236, 237, 307, 319, 469], "craft": 51, "compil": [51, 192, 194, 198, 311, 314], "enabl": [51, 192, 198], "invok": 51, "adminservicegraphmanagementapi": [52, 122], "createdataloadingjob": 52, "return": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170], "author": [52, 53, 54, 55, 90, 91, 100, 121, 122, 123, 124, 125, 160, 161, 170, 191], "http": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192], "header": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170], "respons": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192], "detail": [52, 53, 54, 55, 90, 91, 100, 122, 123, 124, 125, 160, 161, 170, 192, 200, 468], "creategraph": [52, 192], "deletegraph": [52, 192], "getgraph": 52, "getgraphstatist": [52, 192], "getschema": 52, "listgraph": [52, 192], "adminservicejobmanagementapi": [53, 123], "deletejobbyid": 53, "getjobbyid": [53, 192], "listjob": 53, "adminserviceproceduremanagementapi": [54, 124], "createprocedur": [54, 192], "deleteprocedur": [54, 192], "getprocedur": [54, 192], "listprocedur": 54, "updateprocedur": [54, 192], "adminserviceservicemanagementapi": [55, 125], "getservicestatu": 55, "restartservic": [55, 192], "startservic": [55, 192], "stopservic": [55, 192], "baseedgetyp": [56, 126], "baseedgetypevertextypepairrelationsinn": [57, 127], "enum": [57, 58, 67, 82, 84, 87, 93, 96, 102, 106], "relationenum": 57, "baseedgetypevertextypepairrelationsinnerxcsrparam": [58, 128], "edgestoragestrategyenum": 58, "basepropertymeta": [59, 129], "basevertextyp": [60, 130], "basevertextypexcsrparam": [61, 131], "columnmap": [62, 132], "createedgetyp": [63, 133], "creategraphrequest": [64, 134], "creategraphrespons": [65, 135], "creategraphschemarequest": [66, 136], "createprocedurerequest": [67, 137], "typeenum": [67, 87, 106], "createprocedurerespons": [68, 138], "createpropertymeta": [69, 139], "createvertextyp": [70, 140], "datetyp": [71, 141], "edgedata": [72, 142], "edgemap": [73, 143], "edgemappingdestinationvertexmappingsinn": [74, 144], "edgemappingsourcevertexmappingsinn": [75, 145], "edgemappingsourcevertexmappingsinnercolumn": [76, 146], "edgemappingtypetriplet": [77, 147], "edgerequest": [78, 148], "edgestatist": [79, 149], "fixedchar": [80, 150], "fixedcharchar": [81, 151], "gsdatatyp": [82, 152], "primitivetypeenum": [82, 96], "getedgetyp": [83, 153], "getgraphrespons": [84, 154], "storetypeenum": 84, "getgraphschemarespons": [85, 155], "getgraphstatisticsrespons": [86, 156], "getprocedurerespons": [87, 157], "getpropertymeta": [88, 158], "getvertextyp": [89, 159], "graphserviceedgemanagementapi": [90, 160], "addedg": 90, "deleteedg": 90, "getedg": 90, "updateedg": 90, "graphservicevertexmanagementapi": [91, 161], "addvertex": 91, "deletevertex": 91, "getvertex": 91, "updatevertex": 91, "jobrespons": [92, 162], "jobstatu": [93, 163], "statusenum": 93, "longtext": [94, 164], "primitivetyp": [96, 167], "propertyarrai": [98, 168], "queryrequest": [99, 169], "queryserviceapi": [100, 170], "proccal": 100, "proccallcurr": 100, "schemamap": [101, 171], "schemamappingloadingconfig": [102, 172], "importoptionenum": 102, "schemamappingloadingconfigformat": [103, 173], "servicestatu": [104, 174, 192], "startservicerequest": [105, 175], "storedproceduremeta": [106, 176], "stringtyp": [107, 177], "stringtypestr": [108, 178], "temporaltyp": [109, 179], "temporaltypetempor": [110, 180], "timestamptyp": [111, 181], "typedvalu": [112, 182], "updateprocedurerequest": [113, 183], "varchar": [114, 184], "varcharvarchar": [115, 185], "vertexdata": [116, 186], "vertexmap": [117, 187], "vertexrequest": [118, 188], "vertexstatist": [119, 189], "vertextypepairstatist": [120, 190], "refer": [121, 191, 208, 246, 250, 252, 461, 468], "requir": [121, 191], "user": [121, 224, 245, 305, 473, 474], "interactive_sdk": [122, 123, 124, 125, 160, 161, 170], "openapi": [122, 123, 124, 125, 160, 161, 170], "create_dataloading_job": 122, "create_graph": [122, 266], "delete_graph": 122, "get_graph": 122, "get_graph_statist": 122, "get_schema": 122, "list_graph": 122, "delete_job_by_id": 123, "get_job_by_id": 123, "list_job": 123, "create_procedur": 124, "delete_procedur": 124, "get_procedur": 124, "list_procedur": 124, "update_procedur": 124, "get_service_statu": 125, "restart_servic": 125, "start_servic": 125, "stop_servic": 125, "add_edg": 160, "delete_edg": 160, "get_edg": 160, "update_edg": 160, "add_vertex": 161, "delete_vertex": 161, "get_vertex": 161, "update_vertex": 161, "modelproperti": 165, "proc_cal": 170, "proc_call_curr": 170, "pip": [191, 311], "setuptool": 191, "For": [191, 216, 223, 468], "introduct": [192, 202, 220, 308], "graphmanag": 192, "categori": 192, "descript": 192, "curl": 192, "expect": 192, "statu": [192, 193], "getgraphschema": 192, "getgraphmeta": 192, "importgraph": 192, "proceduremanag": 192, "listallprocedur": 192, "servicemanag": 192, "systemmetr": 192, "nodemetr": 192, "jobmanag": 192, "getalljob": 192, "canceljobbyid": 192, "adminservic": 192, "error": [192, 475], "manag": 193, "initi": 193, "stop": [193, 208, 237], "restart": [193, 469], "check": 193, "destroi": [193, 469], "gremlin": [193, 194, 196, 218, 220, 221, 222, 225, 240, 300, 487], "glossari": [194, 238], "solid": 196, "foundat": 196, "limit": [196, 220, 222, 242, 469], "disabl": 198, "view": [198, 469], "tool": [199, 200], "administr": 200, "root": 200, "databas": [200, 243], "arrowfrag": 202, "0": [202, 214], "\u672f\u8bed": 202, "\u8f7d\u56fe": [202, 489], "\u521d\u59cb\u5316partition": 202, "\u6784\u5efa\u539f\u59cbarrow": 202, "shuffl": 202, "vtabl": 202, "\u6784\u5efavertex": 202, "basicarrowvertexmapbuild": 202, "5": [202, 214, 305], "\u6784\u5efafragment\u51c6\u5907": 202, "\u5904\u7406edg": 202, "basicevfragmentload": 202, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 202, "basicarrowfragmentbuild": 202, "6": 202, "fragment\u6784\u5efa": 202, "\u8bbf\u95eefragment": 202, "\u8bbf\u95ee\u9876\u70b9": 202, "\u8bbf\u95ee\u5185\u90e8\u70b9": 202, "\u8303\u56f4\u5916\u90e8\u70b9": 202, "\u8bbf\u95ee\u5168\u90e8\u70b9": 202, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 202, "\u8bbf\u95ee\u8fb9": 202, "\u8bbf\u95ee\u51fa\u8fb9": 202, "\u8bbf\u95ee\u5165\u8fb9": 202, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 202, "ask": 203, "question": [203, 214], "gle": [204, 226, 474, 477], "workload": [205, 239, 240, 241, 243, 465], "learn": [205, 208, 226, 227, 228, 232, 234, 236, 237, 241, 243, 304, 312, 320, 477], "scientist": 206, "challeng": [206, 239, 241], "handl": [206, 243], "solut": 206, "machin": [206, 232, 234], "pydata": 206, "ecosystem": [206, 216, 223], "One": [208, 237, 462], "larg": [208, 235, 239, 241], "scale": [208, 472], "system": [208, 243, 315, 317], "alibaba": [208, 305], "flex": [208, 250], "troubleshoot": [208, 469], "util": [208, 476], "indic": 208, "standalon": 209, "gie": [209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 223, 238, 477], "process": [210, 232, 233, 237, 243, 304, 469], "manual": [211, 235], "instanc": [212, 469], "via": [213, 221], "driver": 213, "llm": 214, "assist": 214, "set": [214, 233], "endpoint": 214, "gener": [214, 217, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "sentenc": 214, "construct": [215, 316], "claus": 215, "neo4j": [216, 240], "tinkerpop": [216, 218, 223, 240, 487], "rule": 217, "base": [217, 226], "rbo": 217, "filtermatchrul": 217, "degreefusionrul": 217, "notmatchtoantijoinrul": 217, "fieldtrimrul": 217, "cost": 217, "cbo": 217, "infer": [217, 225], "constraint": 218, "differ": [218, 462], "inner": 218, "id": [218, 220, 222, 468], "expand": [218, 220, 400, 401, 402, 455], "filter": [218, 220, 222], "like": 218, "sql": 218, "group": [218, 220, 222], "appropri": 218, "index": 218, "standard": [220, 467], "v": 220, "e": 220, "out": [220, 222, 316], "inE": [220, 222], "both": [220, 222], "outv": [220, 222], "inv": [220, 222], "otherv": [220, 222], "bothv": [220, 222], "hasid": [220, 222], "haslabel": 220, "ha": 220, "hasnot": 220, "where": [220, 222], "travers": [220, 222, 225, 229, 240, 309], "predic": 220, "dedup": [220, 222], "project": [220, 222, 251], "constant": [220, 222], "valuemap": [220, 222], "elementmap": 220, "select": [220, 222], "count": 220, "fold": [220, 222], "sum": [220, 222], "min": [220, 222], "max": [220, 222], "mean": [220, 222], "groupcount": [220, 222], "h3": 220, "order": [220, 222, 468], "statist": 220, "coin": 220, "union": 220, "match": [220, 222, 240], "ident": 220, "unfold": 220, "syntact": [220, 222], "sugar": [220, 222], "pathexpand": 220, "endv": 220, "To": 220, "Will": 220, "Not": 220, "repeat": 220, "sideeffect": 220, "consol": [221, 487], "ldbc": 222, "retriev": [222, 468], "appli": [222, 241], "real": 222, "expans": 222, "mani": 222, "point": 222, "after": 222, "pattern": [222, 240], "relat": [222, 235, 465], "syntax": 222, "complex": 222, "bi2": 222, "bi3": 222, "bi4": 222, "left": 222, "part": 222, "bi11": 222, "bi14": 222, "apach": [223, 487], "eas": 225, "interfac": [225, 314, 315, 468], "extens": 225, "gnn": [225, 231, 241, 316, 483], "train": [225, 231, 232, 233, 234, 241, 304], "nativ": 225, "across": 225, "orchestr": 225, "paradigm": [226, 241], "egograph": 226, "pass": 226, "pipelin": 226, "neighborhood": 229, "neg": [229, 313], "gsl": [229, 310], "classif": [231, 232, 233, 234], "neural": [231, 241], "network": [231, 241, 455], "egographsag": 232, "pyg": [233, 234], "server": [233, 306, 476], "pod": 233, "loader": [233, 235, 318, 489], "main": 233, "evalu": [234, 294], "loaderfor": 234, "valid": 234, "graphsag": 234, "advanc": 235, "deduc": 235, "when": 235, "ambigu": 235, "put": [235, 305], "togeth": [235, 305], "panda": [235, 489], "numpi": [235, 489], "variant": 235, "tip": 235, "reduc": 235, "consumpt": 235, "unifi": [236, 468], "platform": 236, "disaggreg": 236, "divers": 236, "bi": 236, "qp": 236, "task": 237, "quick": [237, 316], "gart": [238, 465], "grin": [238, 468], "graphar": [238, 467], "groot": [238, 469, 477], "gum": 238, "maxgraph": 238, "deprec": 238, "v6d": 238, "gaia": 238, "pegasu": 238, "can": [239, 241], "do": [239, 241], "typic": 241, "introduc": 242, "why": 242, "ar": 242, "case": 242, "posit": 243, "compar": 243, "variou": 243, "benchmark": 244, "result": [244, 462], "gpu": 244, "reproduc": 244, "fragment": 246, "appasset": 247, "javaapp": 247, "cython": 249, "about": 251, "javadoc": 252, "declar": 254, "load_app": 255, "dag_util": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "add_column": 256, "add_labels_to_graph": 257, "arrow_to_dynam": 258, "bind_app": 259, "clear_edg": 260, "clear_graph": 261, "context_to_datafram": 262, "context_to_numpi": 263, "copy_graph": 264, "create_app": 265, "create_graph_view": 267, "create_load": 268, "create_subgraph": 269, "create_unload_op": 270, "dynamic_to_arrow": 271, "get_context_data": 272, "graph_to_datafram": 273, "graph_to_numpi": 274, "gremlin_to_subgraph": 275, "modify_edg": 276, "modify_vertic": 277, "output": 278, "project_arrow_property_graph": 279, "project_to_simpl": 280, "report_graph": 281, "run_app": 282, "to_data_sink": 283, "to_direct": [284, 352], "to_undirect": [285, 353], "to_vineyard_datafram": 286, "to_vineyard_tensor": 287, "unload_app": 288, "unload_context": 289, "unload_graph": 290, "__init__": 291, "as_op_def": 292, "eval": 293, "signatur": 296, "get_default_sess": 298, "graphlearn": 299, "has_default_sess": 301, "set_opt": 303, "encod": [304, 312], "loss": 304, "weight": 305, "maxcomput": 305, "describ": 306, "topologi": 306, "stand": 306, "alon": 306, "mode": [306, 476], "tensorflow": 311, "git": 311, "clone": 314, "regist": [314, 315], "bytestreamaccessfil": 315, "structuredaccessfil": 315, "writablefil": 315, "scheme": 315, "gl": 316, "self": 322, "loop": 322, "freez": [322, 334], "add_cycl": 323, "add_path": 324, "add_star": 325, "all_neighbor": 326, "common_neighbor": 327, "create_empty_copi": 328, "degree_histogram": 330, "densiti": 331, "induced_subgraph": 335, "info": 336, "is_direct": 337, "is_empti": 338, "is_frozen": 339, "is_negatively_weight": 340, "is_weight": 341, "nodes_with_selfloop": 344, "non_edg": 345, "non_neighbor": 346, "number_of_edg": 347, "number_of_nod": 348, "number_of_selfloop": 349, "selfloop_edg": 350, "atla": [354, 355, 455], "graph_atla": 354, "graph_atlas_g": 355, "classic": [356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 455], "balanced_tre": 356, "barbell_graph": 357, "binomial_tre": 358, "circulant_graph": 359, "circular_ladder_graph": 360, "complete_graph": 361, "complete_multipartite_graph": 362, "cycle_graph": 363, "dorogovtsev_goltsev_mendes_graph": 364, "empty_graph": 365, "full_rary_tre": 366, "ladder_graph": 367, "lollipop_graph": 368, "null_graph": 369, "path_graph": 370, "star_graph": 371, "trivial_graph": 372, "turan_graph": 373, "wheel_graph": 374, "lfr_benchmark_graph": 375, "caveman_graph": 376, "connected_caveman_graph": 377, "gaussian_random_partition_graph": 378, "planted_partition_graph": 379, "random_partition_graph": 380, "relaxed_caveman_graph": 381, "ring_of_cliqu": 382, "stochastic_block_model": 383, "windmill_graph": 384, "degree_seq": [385, 386, 387, 388, 389, 390, 391], "configuration_model": 385, "degree_sequence_tre": 386, "directed_configuration_model": 387, "directed_havel_hakimi_graph": 388, "expected_degree_graph": 389, "havel_hakimi_graph": 390, "random_degree_sequence_graph": 391, "gn_graph": 392, "gnc_graph": 393, "gnr_graph": 394, "random_k_out_graph": 395, "scale_free_graph": 396, "duplic": [397, 398, 455], "duplication_divergence_graph": 397, "partial_duplication_graph": 398, "ego": [399, 455], "ego_graph": 399, "chordal_cycle_graph": 400, "margulis_gabber_galil_graph": 401, "paley_graph": 402, "geometr": [403, 404, 405, 406, 407, 455], "geographical_threshold_graph": 403, "random_geometric_graph": 404, "soft_random_geometric_graph": 405, "thresholded_random_geometric_graph": 406, "waxman_graph": 407, "harary_graph": [408, 409], "hkn_harary_graph": 408, "hnm_harary_graph": 409, "intersect": [410, 411, 412, 455], "general_random_intersection_graph": 410, "k_random_intersection_graph": 411, "uniform_random_intersection_graph": 412, "joint_degree_seq": [413, 414, 415, 416], "directed_joint_degree_graph": 413, "is_valid_directed_joint_degre": 414, "is_valid_joint_degre": 415, "joint_degree_graph": 416, "mycielski": [417, 418, 455], "mycielski_graph": 417, "mycielskian": 418, "nonisomorphic_tre": [419, 420], "number_of_nonisomorphic_tre": 420, "small": [421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 455], "lcf_graph": 421, "bull_graph": 422, "chvatal_graph": 423, "cubical_graph": 424, "desargues_graph": 425, "diamond_graph": 426, "dodecahedral_graph": 427, "frucht_graph": 428, "heawood_graph": 429, "house_graph": 430, "house_x_graph": 431, "icosahedral_graph": 432, "krackhardt_kite_graph": 433, "make_small_graph": 434, "moebius_kantor_graph": 435, "octahedral_graph": 436, "pappus_graph": 437, "petersen_graph": 438, "sedgewick_maze_graph": 439, "tetrahedral_graph": 440, "truncated_cube_graph": 441, "truncated_tetrahedron_graph": 442, "tutte_graph": 443, "social": [444, 445, 446, 447, 455], "davis_southern_women_graph": 444, "florentine_families_graph": 445, "karate_club_graph": 446, "les_miserables_graph": 447, "spectral_graph_forg": 448, "sudoku": [449, 455], "sudoku_graph": 449, "tree": [450, 451, 455], "prefix_tre": 450, "random_tre": 451, "triad": [452, 455], "triad_graph": 452, "internet_as_graph": 453, "random_internet_as_graph": 453, "stochast": [454, 455], "stochastic_graph": 454, "diverg": 455, "sequenc": 455, "AS": 455, "spectral": 455, "non": 455, "isomorph": 455, "joint": 455, "harari": 455, "digraph": 456, "read": 458, "list": [458, 468], "adjac": 458, "selector": 462, "tensorcontext": 462, "vertexdatacontext": 462, "labeledvertexdatacontext": 462, "vertexpropertycontext": 462, "labeledvertexpropertycontext": 462, "method": 462, "dimension": 462, "rang": 462, "resourc": 464, "bridg": 465, "gap": 465, "oltp": 465, "inform": 467, "save": 467, "predefin": 468, "macro": 468, "partit": [468, 469, 472], "strategi": 468, "guidelin": 468, "handler": 468, "iter": 468, "master": 468, "mirror": 468, "complet": 468, "natur": 468, "trait": 468, "known": 469, "artifacthub": 469, "directori": 469, "common": 469, "modifi": 469, "j": 469, "realtim": 469, "secondari": 469, "trace": 469, "In": 470, "immut": 470, "bind": 471, "repartit": 472, "fennel": 472, "xtrapulp": 472, "hybrid": 472, "line": 476, "gsctl": 476, "scope": 476, "monitor": 478, "\u56fe\u5206\u6790\u5f15\u64ce": 479, "\u5185\u7f6e\u7b97\u6cd5": 479, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 479, "\u4f7f\u7528": 479, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 479, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 479, "\u4e2d\u7684\u51fd\u6570": 479, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 479, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 479, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 479, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 479, "\u90e8\u7f72": 480, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 480, "\u5728aw": 480, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 480, "\u672c\u5730\u90e8\u7f72graphscop": 480, "\u5f00\u53d1\u8005\u6307\u5357": 481, "\u57fa\u4e8e": [481, 486], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 481, "\u6784\u5efa": 481, "\u4ee3\u7801\u98ce\u683c": 481, "\u5e38\u89c1\u95ee\u9898": 482, "\u5feb\u901f\u4e0a\u624b": 483, "\u793a\u4f8b": 483, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 483, "\u521b\u5efa\u4f1a\u8bdd": 483, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 483, "\u56fe\u5206\u6790": 483, "\u56fe\u795e\u7ecf\u7f51\u7edc": 483, "\u5173\u95ed\u4f1a\u8bdd": 483, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 484, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 484, "\u6295\u5f71": 484, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 484, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 484, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 485, "\u76ee\u5f55": [485, 490], "\u53c2\u8003": 485, "\u7d22\u5f15": 485, "\u5b89\u88c5": 486, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 486, "\u5ba2\u6237\u7aef": 486, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 487, "\u5229\u7528python": 487, "\u8fde\u63a5graphscop": 487, "\u5229\u7528java": 487, "\u5f00\u53d1\u63a7\u5236\u53f0": 487, "gremlin\u7f16\u7a0b\u5165\u95e8": 487, "101": 487, "\u56fe\u6570\u636e\u6a21\u578b": 487, "\u67e5\u8be2\u8bed\u8a00": 487, "\u4e00\u4e2a\u4f8b\u5b50": 487, "gremlin\u517c\u5bb9\u6027": 487, "\u5bf9\u6bd4tinkerpop": 487, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 487, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 487, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 487, "\u5df2\u77e5\u9650\u5236": 487, "\u56fe\u5b66\u4e60\u5f15\u64ce": 488, "\u56fe\u5b66\u4e60\u6a21\u578b": 488, "\u6570\u636e\u6a21\u578b": 488, "\u7f16\u7801\u5668": 488, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 488, "\u91c7\u6837": 488, "\u56fe\u6570\u636e\u6d41": 488, "\u6a21\u578b": 488, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 488, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 489, "\u624b\u52a8\u914d\u7f6e\u56fe": 489, "vid_field": 489, "src_label": 489, "dst_label": 489, "src_field": 489, "dst_field": 489, "\u9ad8\u7ea7\u7528\u6cd5": 489, "\u6ca1\u6709\u6b67\u4e49\u65f6": 489, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 489, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 489, "\u591a\u79cd\u8fb9\u5173\u7cfb": 489, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 489, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 489, "\u5b8c\u6574\u7684\u793a\u4f8b": 489, "\u4ece": 489, "\u6216": 489, "\u4e2d\u8f7d\u56fe": 489, "\u7684\u53d8\u79cd": 489, "\u5165\u95e8\u6559\u7a0b": 490}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [195, "prerequisites"], [209, "prerequisites"], [469, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [211, "dev-and-test"], [227, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [236, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [196, "overview"], [200, "overview"], [208, null], [312, "overview"], [469, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [121, "getting-started"], [191, "getting-started"], [193, "getting-started"], [212, "getting-started"], [228, "getting-started"], [237, "getting-started"], [466, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [121, "installation"], [195, "installation"], [212, "installation"], [228, "installation"], [469, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [212, "whats-the-next"], [228, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [219, "guide-and-examples"], [230, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Build from source": [[17, "build-from-source"], [311, "build-from-source"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, "tutorial-graph-algorithms-with-networkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetworkX APIs": [[20, "tutorial-graph-operations-with-networkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [235, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [211, "dev-environment"], [227, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [227, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [455, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to instrument": [[39, "how-to-instrument"]], "Java": [[39, "java"], [469, "java"], [469, "id2"]], "Automatic instrument": [[39, "automatic-instrument"]], "How to Submit Pull-requests": [[40, "how-to-submit-pull-requests"]], "How to Test": [[41, "how-to-test"], [227, "how-to-test"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[41, "build-images"]], "GraphScope Coordinator": [[42, "graphscope-coordinator"]], "Coordinator RESTFul API": [[43, "coordinator-restful-api"]], "Engine Configuration": [[44, "engine-configuration"]], "Customizing Your Service Configuration": [[44, "customizing-your-service-configuration"]], "Sample Configuration": [[44, "sample-configuration"]], "Available Configurations": [[44, "available-configurations"]], "Service configurations": [[44, "service-configurations"]], "Using Custom Graph": [[45, "using-custom-graph"]], "Step 1: Create a New Graph": [[45, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[45, "step-2-import-graph-data"]], "Step 3: Start the Service with the New Graph": [[45, "step-3-start-the-service-with-the-new-graph"]], "Try other graphs": [[45, "try-other-graphs"]], "Data Import Configuration": [[46, "data-import-configuration"]], "Supported data source": [[46, "supported-data-source"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[46, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[46, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Configuration Breakdown": [[46, "configuration-breakdown"]], "Loading Configurations": [[46, "loading-configurations"]], "Vertex Mappings": [[46, "vertex-mappings"]], "Edge Mappings": [[46, "edge-mappings"]], "Data Model": [[47, "data-model"]], "Graph Data": [[47, "graph-data"]], "Entity Data": [[47, "entity-data"]], "Primitive Types": [[47, "primitive-types"]], "String Types": [[47, "string-types"]], "Temporal types": [[47, "temporal-types"]], "Array Types": [[47, "array-types"]], "Deployment": [[48, "deployment"]], "Deploy with docker": [[48, "deploy-with-docker"]], "Deploy with helm": [[48, "deploy-with-helm"]], "QuickStart": [[48, "quickstart"]], "Customizing Configuration": [[48, "customizing-configuration"]], "Customize Graph Data.": [[48, "customize-graph-data"]], "Single Node": [[48, "single-node"]], "Multiple nodes": [[48, "multiple-nodes"]], "Customize Values.yaml": [[48, "customize-values-yaml"]], "GraphScope Interactive Development guide": [[49, "graphscope-interactive-development-guide"]], "Create c++ Stored Procedures on GraphScope Interactive": [[50, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[51, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Crafting a Cypher Stored Procedure": [[51, "crafting-a-cypher-stored-procedure"]], "Compiling and Enabling the Stored Procedure": [[51, "compiling-and-enabling-the-stored-procedure"]], "Invoking the Cypher Stored Procedure": [[51, "invoking-the-cypher-stored-procedure"]], "AdminServiceGraphManagementApi": [[52, "adminservicegraphmanagementapi"]], "createDataloadingJob": [[52, "createdataloadingjob"]], "Example": [[52, "example"], [52, "id1"], [52, "id7"], [52, "id13"], [52, "id19"], [52, "id25"], [52, "id31"], [53, "example"], [53, "id1"], [53, "id7"], [54, "example"], [54, "id1"], [54, "id7"], [54, "id13"], [54, "id19"], [55, "example"], [55, "id1"], [55, "id7"], [55, "id13"], [90, "example"], [90, "id1"], [90, "id7"], [90, "id13"], [91, "example"], [91, "id1"], [91, "id7"], [91, "id13"], [100, "example"], [100, "id1"], [122, "example"], [122, "id1"], [122, "id7"], [122, "id13"], [122, "id19"], [122, "id25"], [122, "id31"], [123, "example"], [123, "id1"], [123, "id7"], [124, "example"], [124, "id1"], [124, "id7"], [124, "id13"], [124, "id19"], [125, "example"], [125, "id1"], [125, "id7"], [125, "id13"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [160, "id1"], [160, "id7"], [160, "id13"], [161, "example"], [161, "id1"], [161, "id7"], [161, "id13"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [166, "example"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [170, "id1"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [175, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"]], "Parameters": [[52, "parameters"], [52, "id2"], [52, "id8"], [52, "id14"], [52, "id20"], [52, "id26"], [52, "id32"], [53, "parameters"], [53, "id2"], [53, "id8"], [54, "parameters"], [54, "id2"], [54, "id8"], [54, "id14"], [54, "id20"], [55, "parameters"], [55, "id2"], [55, "id8"], [55, "id14"], [90, "parameters"], [90, "id2"], [90, "id8"], [90, "id14"], [91, "parameters"], [91, "id2"], [91, "id8"], [91, "id14"], [100, "parameters"], [100, "id2"], [122, "parameters"], [122, "id2"], [122, "id8"], [122, "id14"], [122, "id20"], [122, "id26"], [122, "id32"], [123, "parameters"], [123, "id2"], [123, "id8"], [124, "parameters"], [124, "id2"], [124, "id8"], [124, "id14"], [124, "id20"], [125, "parameters"], [125, "id2"], [125, "id8"], [125, "id14"], [160, "parameters"], [160, "id2"], [160, "id8"], [160, "id14"], [161, "parameters"], [161, "id2"], [161, "id8"], [161, "id14"], [170, "parameters"], [170, "id2"]], "Return type": [[52, "return-type"], [52, "id3"], [52, "id9"], [52, "id15"], [52, "id21"], [52, "id27"], [52, "id33"], [53, "return-type"], [53, "id3"], [53, "id9"], [54, "return-type"], [54, "id3"], [54, "id9"], [54, "id15"], [54, "id21"], [55, "return-type"], [55, "id3"], [55, "id9"], [55, "id15"], [90, "return-type"], [90, "id3"], [90, "id9"], [90, "id15"], [91, "return-type"], [91, "id3"], [91, "id9"], [91, "id15"], [100, "return-type"], [100, "id3"], [122, "return-type"], [122, "id3"], [122, "id9"], [122, "id15"], [122, "id21"], [122, "id27"], [122, "id33"], [123, "return-type"], [123, "id3"], [123, "id9"], [124, "return-type"], [124, "id3"], [124, "id9"], [124, "id15"], [124, "id21"], [125, "return-type"], [125, "id3"], [125, "id9"], [125, "id15"], [160, "return-type"], [160, "id3"], [160, "id9"], [160, "id15"], [161, "return-type"], [161, "id3"], [161, "id9"], [161, "id15"], [170, "return-type"], [170, "id3"]], "Authorization": [[52, "authorization"], [52, "id4"], [52, "id10"], [52, "id16"], [52, "id22"], [52, "id28"], [52, "id34"], [53, "authorization"], [53, "id4"], [53, "id10"], [54, "authorization"], [54, "id4"], [54, "id10"], [54, "id16"], [54, "id22"], [55, "authorization"], [55, "id4"], [55, "id10"], [55, "id16"], [90, "authorization"], [90, "id4"], [90, "id10"], [90, "id16"], [91, "authorization"], [91, "id4"], [91, "id10"], [91, "id16"], [100, "authorization"], [100, "id4"], [122, "authorization"], [122, "id4"], [122, "id10"], [122, "id16"], [122, "id22"], [122, "id28"], [122, "id34"], [123, "authorization"], [123, "id4"], [123, "id10"], [124, "authorization"], [124, "id4"], [124, "id10"], [124, "id16"], [124, "id22"], [125, "authorization"], [125, "id4"], [125, "id10"], [125, "id16"], [160, "authorization"], [160, "id4"], [160, "id10"], [160, "id16"], [161, "authorization"], [161, "id4"], [161, "id10"], [161, "id16"], [170, "authorization"], [170, "id4"]], "HTTP request headers": [[52, "http-request-headers"], [52, "id5"], [52, "id11"], [52, "id17"], [52, "id23"], [52, "id29"], [52, "id35"], [53, "http-request-headers"], [53, "id5"], [53, "id11"], [54, "http-request-headers"], [54, "id5"], [54, "id11"], [54, "id17"], [54, "id23"], [55, "http-request-headers"], [55, "id5"], [55, "id11"], [55, "id17"], [90, "http-request-headers"], [90, "id5"], [90, "id11"], [90, "id17"], [91, "http-request-headers"], [91, "id5"], [91, "id11"], [91, "id17"], [100, "http-request-headers"], [100, "id5"], [122, "http-request-headers"], [122, "id5"], [122, "id11"], [122, "id17"], [122, "id23"], [122, "id29"], [122, "id35"], [123, "http-request-headers"], [123, "id5"], [123, "id11"], [124, "http-request-headers"], [124, "id5"], [124, "id11"], [124, "id17"], [124, "id23"], [125, "http-request-headers"], [125, "id5"], [125, "id11"], [125, "id17"], [160, "http-request-headers"], [160, "id5"], [160, "id11"], [160, "id17"], [161, "http-request-headers"], [161, "id5"], [161, "id11"], [161, "id17"], [170, "http-request-headers"], [170, "id5"]], "HTTP response details": [[52, "http-response-details"], [52, "id6"], [52, "id12"], [52, "id18"], [52, "id24"], [52, "id30"], [52, "id36"], [53, "http-response-details"], [53, "id6"], [53, "id12"], [54, "http-response-details"], [54, "id6"], [54, "id12"], [54, "id18"], [54, "id24"], [55, "http-response-details"], [55, "id6"], [55, "id12"], [55, "id18"], [90, "http-response-details"], [90, "id6"], [90, "id12"], [90, "id18"], [91, "http-response-details"], [91, "id6"], [91, "id12"], [91, "id18"], [100, "http-response-details"], [100, "id6"], [122, "http-response-details"], [122, "id6"], [122, "id12"], [122, "id18"], [122, "id24"], [122, "id30"], [122, "id36"], [123, "http-response-details"], [123, "id6"], [123, "id12"], [124, "http-response-details"], [124, "id6"], [124, "id12"], [124, "id18"], [124, "id24"], [125, "http-response-details"], [125, "id6"], [125, "id12"], [125, "id18"], [160, "http-response-details"], [160, "id6"], [160, "id12"], [160, "id18"], [161, "http-response-details"], [161, "id6"], [161, "id12"], [161, "id18"], [170, "http-response-details"], [170, "id6"]], "createGraph": [[52, "creategraph"]], "deleteGraph": [[52, "deletegraph"]], "getGraph": [[52, "getgraph"]], "getGraphStatistic": [[52, "getgraphstatistic"]], "getSchema": [[52, "getschema"]], "listGraphs": [[52, "listgraphs"]], "AdminServiceJobManagementApi": [[53, "adminservicejobmanagementapi"]], "deleteJobById": [[53, "deletejobbyid"]], "getJobById": [[53, "getjobbyid"]], "listJobs": [[53, "listjobs"]], "AdminServiceProcedureManagementApi": [[54, "adminserviceproceduremanagementapi"]], "createProcedure": [[54, "createprocedure"]], "deleteProcedure": [[54, "deleteprocedure"]], "getProcedure": [[54, "getprocedure"]], "listProcedures": [[54, "listprocedures"]], "updateProcedure": [[54, "updateprocedure"]], "AdminServiceServiceManagementApi": [[55, "adminserviceservicemanagementapi"]], "getServiceStatus": [[55, "getservicestatus"]], "restartService": [[55, "restartservice"]], "startService": [[55, "startservice"]], "stopService": [[55, "stopservice"]], "BaseEdgeType": [[56, "baseedgetype"], [126, "baseedgetype"]], "Properties": [[56, "properties"], [57, "properties"], [58, "properties"], [59, "properties"], [60, "properties"], [61, "properties"], [62, "properties"], [63, "properties"], [64, "properties"], [65, "properties"], [66, "properties"], [67, "properties"], [68, "properties"], [69, "properties"], [70, "properties"], [71, "properties"], [72, "properties"], [73, "properties"], [74, "properties"], [75, "properties"], [76, "properties"], [77, "properties"], [78, "properties"], [79, "properties"], [80, "properties"], [81, "properties"], [82, "properties"], [83, "properties"], [84, "properties"], [85, "properties"], [86, "properties"], [87, "properties"], [88, "properties"], [89, "properties"], [92, "properties"], [93, "properties"], [94, "properties"], [95, "properties"], [96, "properties"], [97, "properties"], [98, "properties"], [99, "properties"], [101, "properties"], [102, "properties"], [103, "properties"], [104, "properties"], [105, "properties"], [106, "properties"], [107, "properties"], [108, "properties"], [109, "properties"], [110, "properties"], [111, "properties"], [112, "properties"], [113, "properties"], [114, "properties"], [115, "properties"], [116, "properties"], [117, "properties"], [118, "properties"], [119, "properties"], [120, "properties"], [126, "properties"], [127, "properties"], [128, "properties"], [129, "properties"], [130, "properties"], [131, "properties"], [132, "properties"], [133, "properties"], [134, "properties"], [135, "properties"], [136, "properties"], [137, "properties"], [138, "properties"], [139, "properties"], [140, "properties"], [141, "properties"], [142, "properties"], [143, "properties"], [144, "properties"], [145, "properties"], [146, "properties"], [147, "properties"], [148, "properties"], [149, "properties"], [150, "properties"], [151, "properties"], [152, "properties"], [153, "properties"], [154, "properties"], [155, "properties"], [156, "properties"], [157, "properties"], [158, "properties"], [159, "properties"], [162, "properties"], [163, "properties"], [164, "properties"], [165, "properties"], [166, "properties"], [167, "properties"], [168, "properties"], [169, "properties"], [171, "properties"], [172, "properties"], [173, "properties"], [174, "properties"], [175, "properties"], [176, "properties"], [177, "properties"], [178, "properties"], [179, "properties"], [180, "properties"], [181, "properties"], [182, "properties"], [183, "properties"], [184, "properties"], [185, "properties"], [186, "properties"], [187, "properties"], [188, "properties"], [189, "properties"], [190, "properties"]], "BaseEdgeTypeVertexTypePairRelationsInner": [[57, "baseedgetypevertextypepairrelationsinner"], [127, "baseedgetypevertextypepairrelationsinner"]], "Enum: RelationEnum": [[57, "enum-relationenum"]], "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams": [[58, "baseedgetypevertextypepairrelationsinnerxcsrparams"], [128, "baseedgetypevertextypepairrelationsinnerxcsrparams"]], "Enum: EdgeStorageStrategyEnum": [[58, "enum-edgestoragestrategyenum"]], "BasePropertyMeta": [[59, "basepropertymeta"], [129, "basepropertymeta"]], "BaseVertexType": [[60, "basevertextype"], [130, "basevertextype"]], "BaseVertexTypeXCsrParams": [[61, "basevertextypexcsrparams"], [131, "basevertextypexcsrparams"]], "ColumnMapping": [[62, "columnmapping"], [132, "columnmapping"]], "CreateEdgeType": [[63, "createedgetype"], [133, "createedgetype"]], "CreateGraphRequest": [[64, "creategraphrequest"], [134, "creategraphrequest"]], "CreateGraphResponse": [[65, "creategraphresponse"], [135, "creategraphresponse"]], "CreateGraphSchemaRequest": [[66, "creategraphschemarequest"], [136, "creategraphschemarequest"]], "CreateProcedureRequest": [[67, "createprocedurerequest"], [137, "createprocedurerequest"]], "Enum: TypeEnum": [[67, "enum-typeenum"], [87, "enum-typeenum"], [106, "enum-typeenum"]], "CreateProcedureResponse": [[68, "createprocedureresponse"], [138, "createprocedureresponse"]], "CreatePropertyMeta": [[69, "createpropertymeta"], [139, "createpropertymeta"]], "CreateVertexType": [[70, "createvertextype"], [140, "createvertextype"]], "DateType": [[71, "datetype"], [141, "datetype"]], "EdgeData": [[72, "edgedata"], [142, "edgedata"]], "EdgeMapping": [[73, "edgemapping"], [143, "edgemapping"]], "EdgeMappingDestinationVertexMappingsInner": [[74, "edgemappingdestinationvertexmappingsinner"], [144, "edgemappingdestinationvertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInner": [[75, "edgemappingsourcevertexmappingsinner"], [145, "edgemappingsourcevertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInnerColumn": [[76, "edgemappingsourcevertexmappingsinnercolumn"], [146, "edgemappingsourcevertexmappingsinnercolumn"]], "EdgeMappingTypeTriplet": [[77, "edgemappingtypetriplet"], [147, "edgemappingtypetriplet"]], "EdgeRequest": [[78, "edgerequest"], [148, "edgerequest"]], "EdgeStatistics": [[79, "edgestatistics"], [149, "edgestatistics"]], "FixedChar": [[80, "fixedchar"], [150, "fixedchar"]], "FixedCharChar": [[81, "fixedcharchar"], [151, "fixedcharchar"]], "GSDataType": [[82, "gsdatatype"], [152, "gsdatatype"]], "Enum: PrimitiveTypeEnum": [[82, "enum-primitivetypeenum"], [96, "enum-primitivetypeenum"]], "GetEdgeType": [[83, "getedgetype"], [153, "getedgetype"]], "GetGraphResponse": [[84, "getgraphresponse"], [154, "getgraphresponse"]], "Enum: StoreTypeEnum": [[84, "enum-storetypeenum"]], "GetGraphSchemaResponse": [[85, "getgraphschemaresponse"], [155, "getgraphschemaresponse"]], "GetGraphStatisticsResponse": [[86, "getgraphstatisticsresponse"], [156, "getgraphstatisticsresponse"]], "GetProcedureResponse": [[87, "getprocedureresponse"], [157, "getprocedureresponse"]], "GetPropertyMeta": [[88, "getpropertymeta"], [158, "getpropertymeta"]], "GetVertexType": [[89, "getvertextype"], [159, "getvertextype"]], "GraphServiceEdgeManagementApi": [[90, "graphserviceedgemanagementapi"]], "addEdge": [[90, "addedge"]], "deleteEdge": [[90, "deleteedge"]], "getEdge": [[90, "getedge"]], "updateEdge": [[90, "updateedge"]], "GraphServiceVertexManagementApi": [[91, "graphservicevertexmanagementapi"]], "addVertex": [[91, "addvertex"]], "deleteVertex": [[91, "deletevertex"]], "getVertex": [[91, "getvertex"]], "updateVertex": [[91, "updatevertex"]], "JobResponse": [[92, "jobresponse"], [162, "jobresponse"]], "JobStatus": [[93, "jobstatus"], [163, "jobstatus"]], "Enum: StatusEnum": [[93, "enum-statusenum"]], "LongText": [[94, "longtext"], [164, "longtext"]], "Parameter": [[95, "parameter"], [166, "parameter"]], "PrimitiveType": [[96, "primitivetype"], [167, "primitivetype"]], "Property": [[97, "property"], [468, "property"]], "PropertyArray": [[98, "propertyarray"], [168, "propertyarray"]], "QueryRequest": [[99, "queryrequest"], [169, "queryrequest"]], "QueryServiceApi": [[100, "queryserviceapi"]], "procCall": [[100, "proccall"]], "procCallCurrent": [[100, "proccallcurrent"]], "SchemaMapping": [[101, "schemamapping"], [171, "schemamapping"]], "SchemaMappingLoadingConfig": [[102, "schemamappingloadingconfig"], [172, "schemamappingloadingconfig"]], "Enum: ImportOptionEnum": [[102, "enum-importoptionenum"]], "SchemaMappingLoadingConfigFormat": [[103, "schemamappingloadingconfigformat"], [173, "schemamappingloadingconfigformat"]], "ServiceStatus": [[104, "servicestatus"], [174, "servicestatus"], [192, "servicestatus"]], "StartServiceRequest": [[105, "startservicerequest"], [175, "startservicerequest"]], "StoredProcedureMeta": [[106, "storedproceduremeta"], [176, "storedproceduremeta"]], "StringType": [[107, "stringtype"], [177, "stringtype"]], "StringTypeString": [[108, "stringtypestring"], [178, "stringtypestring"]], "TemporalType": [[109, "temporaltype"], [179, "temporaltype"]], "TemporalTypeTemporal": [[110, "temporaltypetemporal"], [180, "temporaltypetemporal"]], "TimeStampType": [[111, "timestamptype"], [181, "timestamptype"]], "TypedValue": [[112, "typedvalue"], [182, "typedvalue"]], "UpdateProcedureRequest": [[113, "updateprocedurerequest"], [183, "updateprocedurerequest"]], "VarChar": [[114, "varchar"], [184, "varchar"]], "VarCharVarChar": [[115, "varcharvarchar"], [185, "varcharvarchar"]], "VertexData": [[116, "vertexdata"], [186, "vertexdata"]], "VertexMapping": [[117, "vertexmapping"], [187, "vertexmapping"]], "VertexRequest": [[118, "vertexrequest"], [188, "vertexrequest"]], "VertexStatistics": [[119, "vertexstatistics"], [189, "vertexstatistics"]], "VertexTypePairStatistics": [[120, "vertextypepairstatistics"], [190, "vertextypepairstatistics"]], "Java SDK Reference": [[121, "java-sdk-reference"]], "Requirements": [[121, "requirements"]], "Maven users": [[121, "maven-users"]], "Others": [[121, "others"]], "Documentation for Service APIs": [[121, "documentation-for-service-apis"], [191, "documentation-for-service-apis"]], "Documentation for Data Structures": [[121, "documentation-for-data-structures"], [191, "documentation-for-data-structures"]], "Documentation for Authorization": [[121, "documentation-for-authorization"]], "interactive_sdk.openapi.AdminServiceGraphManagementApi": [[122, "interactive-sdk-openapi-adminservicegraphmanagementapi"]], "create_dataloading_job": [[122, "create-dataloading-job"]], "create_graph": [[122, "create-graph"]], "delete_graph": [[122, "delete-graph"]], "get_graph": [[122, "get-graph"]], "get_graph_statistic": [[122, "get-graph-statistic"]], "get_schema": [[122, "get-schema"]], "list_graphs": [[122, "list-graphs"]], "interactive_sdk.openapi.AdminServiceJobManagementApi": [[123, "interactive-sdk-openapi-adminservicejobmanagementapi"]], "delete_job_by_id": [[123, "delete-job-by-id"]], "get_job_by_id": [[123, "get-job-by-id"]], "list_jobs": [[123, "list-jobs"]], "interactive_sdk.openapi.AdminServiceProcedureManagementApi": [[124, "interactive-sdk-openapi-adminserviceproceduremanagementapi"]], "create_procedure": [[124, "create-procedure"]], "delete_procedure": [[124, "delete-procedure"]], "get_procedure": [[124, "get-procedure"]], "list_procedures": [[124, "list-procedures"]], "update_procedure": [[124, "update-procedure"]], "interactive_sdk.openapi.AdminServiceServiceManagementApi": [[125, "interactive-sdk-openapi-adminserviceservicemanagementapi"]], "get_service_status": [[125, "get-service-status"]], "restart_service": [[125, "restart-service"]], "start_service": [[125, "start-service"]], "stop_service": [[125, "stop-service"]], "interactive_sdk.openapi.GraphServiceEdgeManagementApi": [[160, "interactive-sdk-openapi-graphserviceedgemanagementapi"]], "add_edge": [[160, "add-edge"]], "delete_edge": [[160, "delete-edge"]], "get_edge": [[160, "get-edge"]], "update_edge": [[160, "update-edge"]], "interactive_sdk.openapi.GraphServiceVertexManagementApi": [[161, "interactive-sdk-openapi-graphservicevertexmanagementapi"]], "add_vertex": [[161, "add-vertex"]], "delete_vertex": [[161, "delete-vertex"]], "get_vertex": [[161, "get-vertex"]], "update_vertex": [[161, "update-vertex"]], "ModelProperty": [[165, "modelproperty"]], "interactive_sdk.openapi.QueryServiceApi": [[170, "interactive-sdk-openapi-queryserviceapi"]], "proc_call": [[170, "proc-call"]], "proc_call_current": [[170, "proc-call-current"]], "Python SDK Reference": [[191, "python-sdk-reference"]], "Requirements.": [[191, "requirements"]], "Installation & Usage": [[191, "installation-usage"]], "pip install": [[191, "pip-install"]], "Setuptools": [[191, "setuptools"]], "Tests": [[191, "tests"]], "Documentation For Authorization": [[191, "documentation-for-authorization"]], "RESTful API Documentation": [[192, "restful-api-documentation"]], "Introduction": [[192, "introduction"], [220, "introduction"]], "API Overview": [[192, "api-overview"]], "Detailed API Documentation": [[192, "detailed-api-documentation"]], "ListGraphs API (GraphManagement Category)": [[192, "listgraphs-api-graphmanagement-category"]], "Description": [[192, "description"], [192, "id1"], [192, "id6"], [192, "id11"], [192, "id16"], [192, "id21"], [192, "id26"], [192, "id31"], [192, "id36"], [192, "id41"], [192, "id46"], [192, "id51"], [192, "id56"], [192, "id61"], [192, "id66"], [192, "id71"], [192, "id75"], [192, "id80"], [192, "id85"], [192, "id90"]], "HTTP Request": [[192, "http-request"], [192, "id2"], [192, "id7"], [192, "id12"], [192, "id17"], [192, "id22"], [192, "id27"], [192, "id32"], [192, "id37"], [192, "id42"], [192, "id47"], [192, "id52"], [192, "id57"], [192, "id62"], [192, "id67"], [192, "id72"], [192, "id76"], [192, "id81"], [192, "id86"], [192, "id91"]], "Curl Command Example": [[192, "curl-command-example"], [192, "id3"], [192, "id8"], [192, "id13"], [192, "id18"], [192, "id23"], [192, "id28"], [192, "id33"], [192, "id38"], [192, "id43"], [192, "id48"], [192, "id53"], [192, "id58"], [192, "id63"], [192, "id68"], [192, "id77"], [192, "id82"], [192, "id87"], [192, "id92"]], "Expected Response": [[192, "expected-response"], [192, "id4"], [192, "id9"], [192, "id14"], [192, "id19"], [192, "id24"], [192, "id29"], [192, "id34"], [192, "id39"], [192, "id44"], [192, "id49"], [192, "id54"], [192, "id59"], [192, "id64"], [192, "id69"], [192, "id73"], [192, "id78"], [192, "id83"], [192, "id88"], [192, "id93"]], "Status Codes": [[192, "status-codes"], [192, "id5"], [192, "id10"], [192, "id15"], [192, "id20"], [192, "id25"], [192, "id30"], [192, "id35"], [192, "id40"], [192, "id45"], [192, "id50"], [192, "id55"], [192, "id60"], [192, "id65"], [192, "id70"], [192, "id74"], [192, "id79"], [192, "id84"], [192, "id89"], [192, "id94"]], "GetGraphStatistics API (GraphManagement Category)": [[192, "getgraphstatistics-api-graphmanagement-category"]], "CreateGraph (GraphManagement Category)": [[192, "creategraph-graphmanagement-category"]], "DeleteGraph  (GraphManagement Category)": [[192, "deletegraph-graphmanagement-category"]], "GetGraphSchema  (GraphManagement Category)": [[192, "getgraphschema-graphmanagement-category"]], "GetGraphMeta  (GraphManagement Category)": [[192, "getgraphmeta-graphmanagement-category"]], "ImportGraph  (GraphManagement Category)": [[192, "importgraph-graphmanagement-category"]], "CreateProcedure (ProcedureManagement Category)": [[192, "createprocedure-proceduremanagement-category"]], "ListAllProcedure  (ProcedureManagement Category)": [[192, "listallprocedure-proceduremanagement-category"]], "GetProcedure (ProcedureManagement Category)": [[192, "getprocedure-proceduremanagement-category"]], "UpdateProcedure (ProcedureManagement Category)": [[192, "updateprocedure-proceduremanagement-category"]], "DeleteProcedure (ProcedureManagement Category)": [[192, "deleteprocedure-proceduremanagement-category"]], "StartService (ServiceManagement Category)": [[192, "startservice-servicemanagement-category"]], "RestartService (ServiceManagement Category)": [[192, "restartservice-servicemanagement-category"]], "StopService (ServiceManagement Category)": [[192, "stopservice-servicemanagement-category"]], "SystemMetrics (NodeMetrics Category)": [[192, "systemmetrics-nodemetrics-category"]], "GetJobById (JobManagement Category)": [[192, "getjobbyid-jobmanagement-category"]], "GetAllJobs (JobManagement category)": [[192, "getalljobs-jobmanagement-category"]], "CancelJobById (JobManagement category)": [[192, "canceljobbyid-jobmanagement-category"]], "Enable AdminService in development": [[192, "enable-adminservice-in-development"]], "Start Compiler Service": [[192, "start-compiler-service"]], "Http error code": [[192, "http-error-code"]], "Preparation": [[193, "preparation"]], "Manage Interactive Service": [[193, "manage-interactive-service"]], "Initialize the Service": [[193, "initialize-the-service"]], "Start the Service": [[193, "start-the-service"]], "Stop the Service": [[193, "stop-the-service"]], "Restart the Service": [[193, "restart-the-service"]], "Check Service Status": [[193, "check-service-status"]], "Destroy the Service": [[193, "destroy-the-service"]], "Running Cypher Queries": [[193, "running-cypher-queries"]], "Running Gremlin Queries": [[193, "running-gremlin-queries"]], "Glossary": [[194, "glossary"], [238, "glossary"]], "Stored Procedure.": [[194, "stored-procedure"]], "Cypher.": [[194, "cypher"]], "Gremlin": [[194, "gremlin"]], "Compile.": [[194, "compile"]], "Install Interactive": [[195, "install-interactive"]], "A Solid Foundation": [[196, "a-solid-foundation"]], "Key Features": [[196, "key-features"], [225, "key-features"]], "Property Graph Model and Graph Queries": [[196, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[196, "the-cypher-query-language"]], "The Gremlin Query Language": [[196, "the-gremlin-query-language"]], "Limitations": [[196, "limitations"], [220, "limitations"]], "GraphScope Interactive SDK": [[197, "graphscope-interactive-sdk"]], "Stored Procedures": [[198, "stored-procedures"]], "Compiling a Stored Procedure": [[198, "compiling-a-stored-procedure"]], "Enabling Stored Procedures": [[198, "enabling-stored-procedures"]], "Disabling Stored Procedures": [[198, "disabling-stored-procedures"]], "Viewing Enabled Stored Procedures": [[198, "viewing-enabled-stored-procedures"]], "Querying Stored Procedures": [[198, "querying-stored-procedures"]], "Tools": [[199, "tools"]], "The Administrative tool": [[200, "the-administrative-tool"]], "Detailed Usage": [[200, "detailed-usage"]], "Root Commands": [[200, "root-commands"]], "Service Commands": [[200, "service-commands"]], "Database Commands": [[200, "database-commands"]], "Procedure Commands": [[200, "procedure-commands"]], "GraphScope Interactive": [[201, "graphscope-interactive"]], "Introduction to ArrowFragment": [[202, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[202, "id1"]], "1. \u8f7d\u56fe": [[202, "id2"]], "1.1 \u521d\u59cb\u5316partitioner": [[202, "partitioner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[202, "arrow-table"]], "1.3. Shuffle vtable": [[202, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[202, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[202, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[202, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[202, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[202, "id3"]], "2. \u8bbf\u95eeFragment": [[202, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[202, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[202, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[202, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[202, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[202, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[202, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[202, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[202, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[202, "id13"]], "Frequently Asked Questions": [[203, "frequently-asked-questions"]], "Getting Started for GLE": [[204, "getting-started-for-gle"]], "Graph Workloads": [[205, "graph-workloads"]], "Graph Analytics": [[205, "graph-analytics"]], "Graph Interactive Query": [[205, "graph-interactive-query"]], "Graph Learning": [[205, "graph-learning"], [320, "graph-learning"]], "GraphScope for Data Scientists": [[206, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[206, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[206, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[206, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[206, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[207, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[208, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[208, null]], "GraphScope Flex": [[208, null]], "Graph Analytical Engine": [[208, null], [244, "graph-analytical-engine"]], "Graph Interactive Engine": [[208, null], [244, "graph-interactive-engine"]], "Graph Learning Engine": [[208, null]], "Storage Engine": [[208, null]], "Troubleshooting & Utilities": [[208, null]], "Development": [[208, null]], "Reference": [[208, null], [468, "reference"]], "Indices and tables": [[208, "indices-and-tables"]], "Standalone Deployment for GIE": [[209, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[209, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[209, "remove-the-gie-service"]], "Using Your Own Data": [[209, "using-your-own-data"]], "Deploy on a Cluster": [[209, "deploy-on-a-cluster"]], "Other Useful Configurations": [[209, "other-useful-configurations"]], "Design of GIE": [[210, "design-of-gie"]], "The Motivations": [[210, "the-motivations"]], "The Architecture": [[210, "the-architecture"]], "Query Processing": [[210, "query-processing"]], "Build GIE with Vineyard Store on Local": [[211, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[211, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[211, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[212, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[212, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[213, "gie-for-cypher"]], "Connecting via Python Driver": [[213, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[213, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[214, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[214, "environment"]], "1. Download Datasets": [[214, "download-datasets"]], "2. Load the Graph": [[214, "load-the-graph"]], "3. Set Endpoint and API Key": [[214, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[214, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[214, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[215, "cypher-support"]], "Data Types": [[215, "data-types"], [467, "data-types"]], "Property Types": [[215, "property-types"]], "Structural types": [[215, "structural-types"]], "Constructed Types": [[215, "constructed-types"]], "Operators": [[215, "operators"]], "Clause": [[215, "clause"]], "Neo4j Ecosystem": [[216, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[216, null], [223, null]], "A Generic Graph Optimizer for GIE": [[217, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[217, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[217, "filtermatchrule"]], "DegreeFusionRule": [[217, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[217, "notmatchtoantijoinrule"]], "FieldTrimRule": [[217, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[217, "cost-based-optimizer-cbo"]], "Graph Type Inference": [[217, "graph-type-inference"]], "FAQs for GIE Gremlin Usage": [[218, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[218, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[218, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[218, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[218, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[218, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[218, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[218, "group-by-multiple-keys"]], "group by multiple values:": [[218, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[218, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[218, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[218, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[220, "supported-gremlin-steps"]], "Standard Steps": [[220, "standard-steps"]], "Source": [[220, "source"]], "V()": [[220, "v"]], "E()": [[220, "e"]], "Expand": [[220, "expand"]], "outE()": [[220, "oute"]], "inE()": [[220, "ine"]], "bothE()": [[220, "bothe"]], "out()": [[220, "out"], [220, "id7"]], "in()": [[220, "in"], [220, "id8"]], "both()": [[220, "both"], [220, "id9"]], "outV()": [[220, "outv"]], "inV()": [[220, "inv"]], "otherV()": [[220, "otherv"]], "bothV()": [[220, "bothv"]], "Filter": [[220, "filter"]], "hasId()": [[220, "hasid"], [222, "hasid"]], "hasLabel()": [[220, "haslabel"]], "has()": [[220, "has"]], "hasNot()": [[220, "hasnot"]], "is()": [[220, "is"]], "where(traversal)": [[220, "where-traversal"]], "where(predicate)": [[220, "where-predicate"]], "not(traversal)": [[220, "not-traversal"]], "dedup()": [[220, "dedup"], [222, "dedup"]], "Project": [[220, "project"]], "id()": [[220, "id"]], "label()": [[220, "label"]], "constant()": [[220, "constant"], [222, "constant"]], "valueMap()": [[220, "valuemap"], [222, "valuemap"]], "values()": [[220, "values"]], "elementMap()": [[220, "elementmap"]], "select()": [[220, "select"], [222, "select"]], "Aggregate": [[220, "aggregate"]], "count()": [[220, "count"]], "fold()": [[220, "fold"], [222, "fold"]], "sum()": [[220, "sum"]], "min()": [[220, "min"]], "max()": [[220, "max"]], "mean()": [[220, "mean"]], "group()": [[220, "group"], [222, "group"]], "groupCount()": [[220, "groupcount"], [222, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[220, "order"]], "order()": [[220, "id1"]], "Statistics": [[220, "statistics"]], "limit()": [[220, "limit"]], "coin()": [[220, "coin"]], "sample()": [[220, "sample"]], "Union": [[220, "union"]], "union()": [[220, "id2"]], "Match": [[220, "match"]], "match()": [[220, "id3"]], "Subgraph": [[220, "subgraph"]], "subgraph()": [[220, "id4"]], "Identity": [[220, "identity"]], "identity()": [[220, "id5"]], "Unfold": [[220, "unfold"]], "unfold()": [[220, "id6"], [220, "id10"]], "Syntactic Sugars": [[220, "syntactic-sugars"]], "PathExpand": [[220, "pathexpand"]], "endV()": [[220, "endv"]], "Expression": [[220, "expression"]], "Running Examples": [[220, "running-examples"]], "Aggregate (Group)": [[220, "aggregate-group"]], "To be Supported": [[220, "to-be-supported"]], "path()": [[220, "path"]], "local()": [[220, "local"]], "Will Not be Supported": [[220, "will-not-be-supported"]], "repeat()": [[220, "repeat"]], "properties()": [[220, "properties"]], "sideEffect": [[220, "sideeffect"]], "branch": [[220, "branch"]], "GIE for Gremlin": [[221, "gie-for-gremlin"]], "Connecting via Python SDK": [[221, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[221, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[221, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[222, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[222, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[222, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[222, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[222, "apply-some-filters"]], "Extract Property Values": [[222, "extract-property-values"]], "Real Applications": [[222, "real-applications"], [222, "id1"]], "Basic Traversal Query": [[222, "basic-traversal-query"]], "Expansion": [[222, "expansion"]], "out(), in() and both()": [[222, "out-in-and-both"]], "outE(), inE() and bothE()": [[222, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[222, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[222, "multiple-expansion-steps"]], "Expansion from many starting points": [[222, "expansion-from-many-starting-points"]], "Filter & Expansion": [[222, "filter-expansion"]], "Apply filters after expansion": [[222, "apply-filters-after-expansion"]], "Expansion as filters": [[222, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[222, "path-expansion-syntactic-sugar"]], "Pattern Match": [[222, "pattern-match"]], "Relational Operations": [[222, "relational-operations"]], "Filter Steps": [[222, "filter-steps"]], "where()": [[222, "where"]], "Project Steps": [[222, "project-steps"]], "id() and label()": [[222, "id-and-label"]], "Aggregate Steps": [[222, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[222, "sum-min-max-and-mean"]], "Order Step": [[222, "order-step"]], "Limit Step": [[222, "limit-step"]], "Expression(Syntax Sugar)": [[222, "expression-syntax-sugar"]], "Complex Queries": [[222, "complex-queries"]], "LDBC BI2": [[222, "ldbc-bi2"]], "LDBC BI3": [[222, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[222, "ldbc-bi4-left-part"]], "LDBC BI11": [[222, "ldbc-bi11"]], "LDBC BI14": [[222, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[223, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[224, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[225, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[225, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[225, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[225, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[225, "gnn-training-inference"]], "Cloud Native Design": [[225, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[225, "across-engine-workflow-orchestration"]], "Design of GLE": [[226, "design-of-gle"]], "Model Paradigms": [[226, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[226, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[226, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[226, "pipeline-for-learning"]], "Dev on docker container": [[227, "dev-on-docker-container"]], "Build Learning Engine": [[227, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[228, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[229, "graph-sampling"], [308, "graph-sampling"]], "Graph Traversal": [[229, "graph-traversal"], [240, "graph-traversal"], [309, "graph-traversal"]], "Neighborhood Sampling": [[229, "neighborhood-sampling"]], "Subgraph Sampling": [[229, "subgraph-sampling"], [241, "subgraph-sampling"]], "Negative Sampling": [[229, "negative-sampling"], [313, "negative-sampling"]], "GSL": [[229, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[231, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[231, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[231, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[232, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[232, "load-graph"], [234, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[232, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[232, "launch-the-learning-engine"], [234, "launch-the-learning-engine"]], "Train the Model": [[232, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster": [[233, "tutorial-training-a-node-classification-model-pyg-on-a-k8s-cluster"]], "Set parameters & load graph": [[233, "set-parameters-load-graph"]], "Launch the Server Engine": [[233, "launch-the-server-engine"]], "Configure the parameters for client pods": [[233, "configure-the-parameters-for-client-pods"]], "Write training and testing script": [[233, "write-training-and-testing-script"]], "Import packages": [[233, "import-packages"]], "Define test function": [[233, "define-test-function"]], "Define the loader and training process": [[233, "define-the-loader-and-training-process"]], "main function": [[233, "main-function"]], "Run the script": [[233, "run-the-script"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[234, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[234, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[234, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[234, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[234, "train-and-test"]], "Loading Graphs": [[235, "loading-graphs"]], "Load Built-in Datasets": [[235, "load-built-in-datasets"]], "Loading Your Own Datasets": [[235, "loading-your-own-datasets"]], "Adding Vertices": [[235, "adding-vertices"]], "Advanced Usages": [[235, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[235, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[235, "deduce-vertex-from-edges"]], "Multiple relations": [[235, "multiple-relations"]], "Specify data types of properties manually": [[235, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[235, "other-parameters-of-graph"]], "Putting them Together": [[235, "putting-them-together"]], "Loading From Pandas or Numpy": [[235, "loading-from-pandas-or-numpy"]], "From Pandas": [[235, "from-pandas"]], "From Numpy": [[235, "from-numpy"]], "Loader Variants": [[235, "loader-variants"]], "Techniques targeting at large graph": [[235, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[235, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[236, "design-of-graphscope"]], "Unified Graph Computing Platform": [[236, "unified-graph-computing-platform"]], "Application layer": [[236, "application-layer"]], "Execution engine layer": [[236, "execution-engine-layer"]], "Storage layer": [[236, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[236, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[236, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[236, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[236, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[236, "graphscope-for-learning"]], "One-stop Graph Processing": [[237, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[237, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[237, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[237, "graph-learning-quick-start"]], "FLASH": [[238, "flash"]], "GRAPE": [[238, "grape"]], "GAE": [[238, "gae"]], "GART": [[238, "gart"]], "GRIN": [[238, "grin"]], "GraphAr": [[238, "graphar"]], "Groot": [[238, "groot"]], "GUM": [[238, "gum"]], "MaxGraph (deprecated)": [[238, "maxgraph-deprecated"]], "Vineyard, or v6d": [[238, "vineyard-or-v6d"]], "GIE": [[238, "gie"]], "GAIA": [[238, "gaia"]], "Pegasus": [[238, "pegasus"]], "Ingress": [[238, "ingress"]], "PIE-model": [[238, "pie-model"]], "Graph Analytics Workloads": [[239, "graph-analytics-workloads"]], "What is Graph Analytics": [[239, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[239, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[239, "what-can-graphscope-do"], [241, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[240, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[240, "tinkerpop-and-gremlin"]], "Pattern Matching": [[240, "pattern-matching"], [240, "id1"]], "Neo4j and Cypher": [[240, "neo4j-and-cypher"]], "Graph Learning Workloads": [[241, "graph-learning-workloads"]], "What is Graph Neural Network": [[241, "what-is-graph-neural-network"]], "Typical GNN Models": [[241, "typical-gnn-models"]], "Paradigm of Model Training": [[241, "paradigm-of-model-training"]], "Steps of Model Training": [[241, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[241, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[242, "introducing-graphscope"]], "What is GraphScope": [[242, "what-is-graphscope"]], "Why use GraphScope": [[242, "why-use-graphscope"]], "What are the Use Cases": [[242, "what-are-the-use-cases"]], "What are the Limitations": [[242, "what-are-the-limitations"]], "What are the Next": [[242, "what-are-the-next"]], "Positioning of GraphScope": [[243, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[243, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[243, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[243, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[243, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[244, "performance-and-benchmark"]], "Results": [[244, "results"]], "Performance on GPUs": [[244, "performance-on-gpus"]], "Reproducing the results": [[244, "reproducing-the-results"]], "Tutorials for Python Users": [[245, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[246, "analytical-engine-api-reference"]], "Analytical Engine": [[246, "analytical-engine"]], "Fragments in GraphScope": [[246, "fragments-in-graphscope"]], "Analytical Apps": [[246, "analytical-apps"]], "Analytical Workers": [[246, "analytical-workers"]], "App\u2019s Context": [[246, "app-s-context"]], "Analytical App": [[247, "analytical-app"]], "AppAssets": [[247, "appassets"]], "JavaApp": [[247, "javaapp"]], "App object": [[247, "app-object"]], "Functions": [[247, "functions"], [249, "functions"], [322, "functions"]], "BuiltIn apps": [[247, "builtin-apps"]], "Context": [[248, "context"]], "Context object": [[248, "context-object"]], "Cython SDK API": [[249, "cython-sdk-api"]], "Pregel": [[249, "pregel"]], "PIE": [[249, "pie"]], "GraphScope types": [[249, "graphscope-types"]], "Flex API Reference": [[250, "flex-api-reference"]], "About Grape JDK": [[251, "about-grape-jdk"]], "Project Structure": [[251, "project-structure"]], "Building from source": [[251, "building-from-source"]], "Java Reference (javadoc)": [[252, "java-reference-javadoc"]], "graphscope.Vertex": [[253, "graphscope-vertex"]], "graphscope.declare": [[254, "graphscope-declare"]], "graphscope.framework.app.load_app": [[255, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[256, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[257, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[258, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[259, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[260, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[261, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[262, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[263, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[264, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[265, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[266, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[267, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[268, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[269, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[270, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[271, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[272, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[273, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[274, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[275, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[276, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[277, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[278, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[279, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[280, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[281, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[282, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[283, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[284, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[285, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[286, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[287, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[288, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[289, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[290, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[291, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[292, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[293, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[294, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[295, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[296, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[297, "graphscope-g"]], "graphscope.get_default_session": [[298, "graphscope-get-default-session"]], "graphscope.graphlearn": [[299, "graphscope-graphlearn"]], "graphscope.gremlin": [[300, "graphscope-gremlin"]], "graphscope.has_default_session": [[301, "graphscope-has-default-session"]], "graphscope.session": [[302, "graphscope-session"]], "graphscope.set_option": [[303, "graphscope-set-option"]], "Developing Your Own Model": [[304, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[304, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[304, "sampling"]], "Encoder": [[304, "encoder"], [312, "encoder"]], "Loss Function and Training Process": [[304, "loss-function-and-training-process"]], "Data Source": [[305, "data-source"]], "1 Data format": [[305, "data-format"]], "1.1 Basic format": [[305, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[305, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[305, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[305, "label-format-labeled"]], "1.5 Putting together": [[305, "putting-together"]], "2 Data source type": [[305, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[305, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[305, "user-api"]], "Graph Object": [[306, "graph-object"]], "2 Describe the Topology": [[306, "describe-the-topology"]], "3.1 Stand-alone Mode": [[306, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[306, "distributed-mode-client-server-mode"]], "Graph Query": [[307, "graph-query"]], "1 Introduction": [[308, "introduction"]], "Graph Sampling Language\uff08GSL)": [[310, "graph-sampling-language-gsl"]], "Install from pip": [[311, "install-from-pip"]], "Get wheel package": [[311, "get-wheel-package"]], "Install using pip": [[311, "install-using-pip"]], "Install TensorFlow": [[311, "install-tensorflow"]], "Install git": [[311, "install-git"]], "Install dependent libraries": [[311, "install-dependent-libraries"]], "Compile": [[311, "compile"], [314, "compile"]], "Install": [[311, "install"]], "Run test": [[311, "run-test"]], "Docker image": [[311, "docker-image"]], "Graph Learning Model": [[312, "graph-learning-model"]], "Data model": [[312, "data-model"]], "Defining Your Own Operator": [[314, "defining-your-own-operator"]], "Programming Interface": [[314, "programming-interface"]], "Distributed Runtime Design": [[314, "distributed-runtime-design"]], "Implement a New Operator": [[314, "implement-a-new-operator"]], "Clone source code": [[314, "clone-source-code"]], "Implement your operator class": [[314, "implement-your-operator-class"]], "Register Operator": [[314, "register-operator"]], "How to Use an Operator": [[314, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[315, "integrating-other-data-sources"]], "File System Interface": [[315, "file-system-interface"]], "ByteStreamAccessFile": [[315, "bytestreamaccessfile"]], "StructuredAccessFile": [[315, "structuredaccessfile"]], "WritableFile": [[315, "writablefile"]], "Register with Scheme": [[315, "register-with-scheme"]], "Quick Start": [[316, "quick-start"]], "1 Trying out the built-in models": [[316, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[316, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[316, "developing-a-gnn-model"]], "3.1 Data Preparation": [[316, "data-preparation"]], "3.2 Graph Construction": [[316, "graph-construction"]], "3.3 Graph Sampling": [[316, "graph-sampling"]], "3.4 GNN Model": [[316, "gnn-model"]], "System configuration": [[317, "system-configuration"]], "Graph": [[318, "graph"], [322, "graph"], [456, "graph"]], "Graph object": [[318, "graph-object"]], "Loader object": [[318, "loader-object"]], "Graph Functions": [[318, "graph-functions"]], "Interactive Query": [[319, "interactive-query"]], "Builtin algorithms": [[321, "builtin-algorithms"]], "Nodes": [[322, "nodes"]], "Edges": [[322, "edges"]], "Self loops": [[322, "self-loops"]], "Attributes": [[322, "attributes"]], "Freezing graph structure": [[322, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[323, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[324, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[325, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[326, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[327, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[328, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[329, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[330, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[331, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[332, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[333, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[334, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[335, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[336, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[337, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[338, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[339, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[340, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[341, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[342, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[343, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[344, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[345, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[346, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[347, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[348, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[349, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[350, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[351, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[352, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[353, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[354, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[355, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[356, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[357, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[358, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[359, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[360, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[361, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[362, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[363, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[364, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[365, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[366, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[367, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[368, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[369, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[370, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[371, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[372, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[373, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[374, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[375, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[376, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[377, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[378, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[379, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[380, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[381, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[382, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[383, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[384, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[385, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[386, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[387, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[388, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[389, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[390, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[391, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[392, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[393, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[394, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[395, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[396, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[397, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[398, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[399, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[400, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[401, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[402, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[403, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[404, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[405, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[406, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[407, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[408, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[409, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[410, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[411, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[412, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[413, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[414, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[415, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[416, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[417, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[418, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[419, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[420, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[421, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[422, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[423, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[424, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[425, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[426, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[427, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[428, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[429, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[430, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[431, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[432, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[433, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[434, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[435, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[436, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[437, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[438, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[439, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[440, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[441, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[442, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[443, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[444, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[445, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[446, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[447, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[448, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[449, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[450, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[451, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[452, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[453, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[454, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[455, "graph-generators"]], "Atlas": [[455, "module-graphscope.nx.generators.atlas"]], "Classic": [[455, "module-graphscope.nx.generators.classic"]], "Expanders": [[455, "module-graphscope.nx.generators.expanders"]], "Small": [[455, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[455, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[455, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[455, "module-graphscope.nx.generators.directed"]], "Geometric": [[455, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[455, "module-graphscope.nx.generators.ego"]], "Stochastic": [[455, "module-networkx.generators.stochastic"]], "AS graph": [[455, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[455, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[455, "module-graphscope.nx.generators.social"]], "Spectral": [[455, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[455, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[455, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[455, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[455, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[455, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[455, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[455, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[456, "graph-types"]], "DiGraph": [[456, "digraph"]], "NetworkX-style API": [[457, "networkx-style-api"]], "Reading graphs": [[458, "reading-graphs"]], "Edge List": [[458, "edge-list"]], "Adjacency List": [[458, "adjacency-list"]], "Graph Transformation": [[459, "graph-transformation"]], "Operation": [[460, "operation"]], "Operation object": [[460, "operation-object"]], "BuiltIn operations": [[460, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[461, "python-api-reference"]], "Selector": [[462, "selector"]], "Selectors in different context": [[462, "selectors-in-different-context"]], "TensorContext": [[462, "tensorcontext"]], "VertexDataContext": [[462, "vertexdatacontext"]], "LabeledVertexDataContext": [[462, "labeledvertexdatacontext"]], "VertexPropertyContext": [[462, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[462, "labeledvertexpropertycontext"]], "Methods that use selectors": [[462, "methods-that-use-selectors"]], "One-dimensional results": [[462, "one-dimensional-results"]], "Multi-dimensional results": [[462, "multi-dimensional-results"]], "Vertex Range": [[462, "vertex-range"]], "Session": [[463, "session"]], "Session object": [[463, "session-object"]], "Session Functions": [[463, "session-functions"]], "Resources Estimator": [[464, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[465, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[465, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[465, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[465, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[465, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[467, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[467, "the-graphar-file-format"]], "Features": [[467, "features"]], "File Format": [[467, "file-format"]], "Information files": [[467, "information-files"]], "Data files": [[467, "data-files"]], "Property Data Types": [[467, "property-data-types"]], "GraphAr in GraphScope": [[467, "graphar-in-graphscope"]], "Saving Graph Data in GraphAr": [[467, "saving-graph-data-in-graphar"]], "Loading GraphAr Data into GraphScope": [[467, "loading-graphar-data-into-graphscope"]], "GRIN: Graph Retrieval INterface": [[468, "grin-graph-retrieval-interface"]], "Motivations": [[468, "motivations"]], "Unified Graph Retrieval": [[468, "unified-graph-retrieval"]], "GRIN Concepts": [[468, "grin-concepts"]], "Predefined Macros": [[468, "predefined-macros"]], "Partition Strategy": [[468, "partition-strategy"]], "Edge-cut Partition Strategy": [[468, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[468, "vertex-cut-partition-strategy"]], "Property Graph Model": [[468, "property-graph-model"]], "Implementation Guideline": [[468, "implementation-guideline"]], "For computing engine": [[468, "for-computing-engine"]], "For storage engine": [[468, "for-storage-engine"]], "Design Details": [[468, "design-details"]], "Handler": [[468, "handler"]], "Edge": [[468, "edge"]], "List": [[468, "list"]], "Array-style Retrieval": [[468, "array-style-retrieval"]], "List Iterator": [[468, "list-iterator"]], "Label": [[468, "label"], [489, "label"]], "Order": [[468, "order"]], "Master and Mirror": [[468, "master-and-mirror"]], "Local Complete": [[468, "local-complete"]], "Natural ID Trait": [[468, "natural-id-trait"]], "Groot: Persistent Graph Store": [[469, "groot-persistent-graph-store"]], "Known Limitation": [[469, "known-limitation"]], "Deploy Groot": [[469, "deploy-groot"]], "Install from ArtifactHub": [[469, "install-from-artifacthub"]], "Installing from a local directory": [[469, "installing-from-a-local-directory"]], "Common Configurations": [[469, "common-configurations"]], "Connecting to Groot": [[469, "connecting-to-groot"]], "Connection": [[469, "connection"]], "Building and Modifying Graph Models": [[469, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[469, "using-built-in-datasets"]], "Customizing Models and Datasets": [[469, "customizing-models-and-datasets"]], "Querying Data": [[469, "querying-data"]], "Python": [[469, "python"], [469, "id1"]], "Node.js": [[469, "node-js"]], "Data Import": [[469, "data-import"]], "Offline Import": [[469, "offline-import"]], "Prerequisite": [[469, "prerequisite"]], "Data Format": [[469, "data-format"]], "Loading Process": [[469, "loading-process"]], "Build: Building a partitioned graph": [[469, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[469, "loading-graph-partitions"]], "3. Commit to store service": [[469, "commit-to-store-service"]], "Realtime Write": [[469, "realtime-write"]], "Other features": [[469, "other-features"]], "Uninstalling and Restarting": [[469, "uninstalling-and-restarting"]], "Uninstall Groot": [[469, "uninstall-groot"]], "Restart Groot": [[469, "restart-groot"]], "Destroy Groot": [[469, "destroy-groot"]], "Developing Guide": [[469, "developing-guide"]], "Build image": [[469, "build-image"]], "Persistence": [[469, "persistence"]], "Troubleshooting": [[469, "troubleshooting"]], "Viewing logs": [[469, "viewing-logs"]], "Configuring logs": [[469, "configuring-logs"]], "Secondary Instance": [[469, "secondary-instance"]], "Traces": [[469, "traces"]], "Write High-availability": [[469, "write-high-availability"]], "In-memory immutable graphs on Vineyard": [[470, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[470, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[470, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[470, "using-loaded-graphs"]], "Applications and algorithms": [[471, "applications-and-algorithms"]], "Bind application to graph": [[471, "bind-application-to-graph"]], "Built-in algorithms": [[471, "built-in-algorithms"]], "Scaling and repartitioning": [[472, "scaling-and-repartitioning"]], "Fennel": [[472, "fennel"]], "XtraPuLP": [[472, "xtrapulp"]], "Hybrid partitioning": [[472, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[473, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[473, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[473, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[473, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[474, "user-guide-and-examples-of-gle"]], "Error Codes": [[475, "error-codes"]], "Command-line Utility gsctl": [[476, "command-line-utility-gsctl"]], "Install/Update gsctl": [[476, "install-update-gsctl"]], "Commands": [[476, "commands"]], "Utility Scripts": [[476, "utility-scripts"]], "Client/Server Mode": [[476, "client-server-mode"]], "Change scope": [[476, "change-scope"]], "Close the connection": [[476, "close-the-connection"]], "How to Find logs": [[477, "how-to-find-logs"]], "Find logs in k8s": [[477, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[477, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[477, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[477, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[477, "find-logs-for-groot"]], "Monitoring": [[478, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[479, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[479, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[479, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[479, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[479, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[479, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[479, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[479, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[479, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[479, "id7"]], "\u90e8\u7f72": [[480, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[480, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[480, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[480, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[481, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[481, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[481, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[481, "python-wheels"]], "Linux": [[481, "linux"]], "macOS": [[481, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[481, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[482, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[483, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[483, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[483, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[483, "id6"]], "\u56fe\u5206\u6790": [[483, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[483, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[483, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[484, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[484, "id2"]], "\u6295\u5f71": [[484, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[484, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[484, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[485, "graphscope"]], "\u76ee\u5f55": [[485, null], [490, null]], "API \u53c2\u8003": [[485, null]], "\u7d22\u5f15": [[485, "id1"]], "\u5b89\u88c5": [[486, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[486, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[486, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[487, "id1"]], "Apache TinkerPop": [[487, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[487, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[487, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[487, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[487, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[487, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[487, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[487, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[487, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[487, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[487, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[487, "id13"]], "\u5df2\u77e5\u9650\u5236": [[487, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[488, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[488, "id2"]], "\u6570\u636e\u6a21\u578b": [[488, "id3"]], "\u7f16\u7801\u5668": [[488, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[488, "id5"]], "\u91c7\u6837": [[488, "id6"]], "\u56fe\u6570\u636e\u6d41": [[488, "id7"]], "\u6a21\u578b": [[488, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[488, "id9"]], "\u8f7d\u56fe": [[489, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[489, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[489, "id4"]], "Build Vertex": [[489, "build-vertex"]], "vertices": [[489, "vertices"]], "properties": [[489, "properties"], [489, "id7"]], "vid_field": [[489, "vid-field"]], "Build Edge": [[489, "build-edge"]], "edges": [[489, "edges"]], "label": [[489, "id6"]], "src_label and dst_label": [[489, "src-label-and-dst-label"]], "src_field and dst_field": [[489, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[489, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[489, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[489, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[489, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[489, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[489, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[489, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[489, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[489, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[489, "numpy"]], "Loader \u7684\u53d8\u79cd": [[489, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[490, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[246, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[246, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[246, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[246, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[246, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[246, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[246, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[246, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[246, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[246, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[246, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[246, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[246, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[246, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[246, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[246, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[246, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[246, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [246, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[246, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[246, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [246, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [246, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [246, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [246, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [246, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [246, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [246, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[246, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[246, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[246, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[246, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[246, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[246, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[246, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[246, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[246, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[246, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[246, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [246, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[246, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[246, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[246, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[246, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[246, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[246, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[246, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[246, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[246, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[246, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[246, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[246, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[246, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[246, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[246, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[246, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[246, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[246, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[246, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[246, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[246, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[246, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[246, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[246, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[246, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[246, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[246, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[246, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[246, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[246, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [246, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[246, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[246, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[246, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[246, "_CPPv4N2gs14DispatchResult9graph_defEv"], [246, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[246, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[246, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[246, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [246, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[246, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[246, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[246, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[246, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[246, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[246, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[246, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[246, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[246, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[246, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[246, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[246, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[246, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[246, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[246, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[246, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[246, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[246, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[246, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[246, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[246, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[246, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[246, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[246, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[246, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [246, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[246, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[246, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[246, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[246, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[246, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[246, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[246, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[246, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[246, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [246, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[246, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[246, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[246, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[246, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[246, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[246, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[246, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[246, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[246, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[246, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[246, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[246, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[246, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[246, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[246, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[246, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[246, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[246, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[246, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[246, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[246, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[246, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[246, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[246, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[246, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[246, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[246, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[246, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[246, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[246, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[246, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[246, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[246, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[246, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[246, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[246, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[246, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[246, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[246, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[246, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[246, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[246, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[246, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[246, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[246, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [246, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[246, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[246, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[246, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[246, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[246, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[246, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[246, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[246, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[246, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[246, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[246, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[246, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[246, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[246, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[246, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [246, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[246, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [246, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[246, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[246, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[246, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[246, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[246, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[246, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[246, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[246, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[246, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[247, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[247, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[247, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[247, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[247, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[247, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[247, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[247, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[247, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[247, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[247, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[247, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[247, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[247, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[247, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[247, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[247, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[247, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[247, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[247, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[247, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[247, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[247, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[247, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[247, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[247, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[247, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[247, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[247, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[247, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[247, "graphscope.louvain"]], "lpa() (in module graphscope)": [[247, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[247, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[247, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[247, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[247, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[247, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[247, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[247, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[247, "graphscope.sssp"]], "triangles() (in module graphscope)": [[247, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[247, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[247, "graphscope.voterank"]], "wcc() (in module graphscope)": [[247, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[248, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[248, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[248, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[248, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[248, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[248, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[248, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[253, "graphscope.Vertex"]], "declare() (in module graphscope)": [[254, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[255, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[256, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[257, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[258, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[259, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[260, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[261, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[262, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[263, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[264, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[265, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[266, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[267, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[268, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[269, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[270, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[271, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[272, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[273, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[274, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[275, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[276, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[277, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[278, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[279, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[280, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[281, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[282, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[283, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[284, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[285, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[286, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[287, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[288, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[289, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[290, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[291, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[292, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[293, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[294, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[295, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[296, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[297, "graphscope.g"]], "get_default_session() (in module graphscope)": [[298, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[299, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[300, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[301, "graphscope.has_default_session"]], "session (in module graphscope)": [[302, "graphscope.session"]], "set_option() (in module graphscope)": [[303, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[318, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[318, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[318, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[318, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[318, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[318, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[318, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[318, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[318, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[318, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[318, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[318, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[318, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[318, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[318, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[318, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[318, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[318, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[319, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[319, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[319, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[319, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[319, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[319, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[319, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[319, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[320, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[320, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[320, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[320, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[320, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[321, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[322, "module-graphscope.nx.classes.function"]], "module": [[322, "module-graphscope.nx.classes.function"], [455, "module-graphscope.nx.generators.atlas"], [455, "module-graphscope.nx.generators.classic"], [455, "module-graphscope.nx.generators.community"], [455, "module-graphscope.nx.generators.degree_seq"], [455, "module-graphscope.nx.generators.directed"], [455, "module-graphscope.nx.generators.duplication"], [455, "module-graphscope.nx.generators.ego"], [455, "module-graphscope.nx.generators.expanders"], [455, "module-graphscope.nx.generators.geometric"], [455, "module-graphscope.nx.generators.harary_graph"], [455, "module-graphscope.nx.generators.intersection"], [455, "module-graphscope.nx.generators.joint_degree_seq"], [455, "module-graphscope.nx.generators.mycielski"], [455, "module-graphscope.nx.generators.nonisomorphic_trees"], [455, "module-graphscope.nx.generators.small"], [455, "module-graphscope.nx.generators.social"], [455, "module-graphscope.nx.generators.spectral_graph_forge"], [455, "module-graphscope.nx.generators.sudoku"], [455, "module-graphscope.nx.generators.trees"], [455, "module-graphscope.nx.generators.triads"], [455, "module-networkx.generators.internet_as_graphs"], [455, "module-networkx.generators.stochastic"], [460, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[323, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[324, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[325, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[326, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[327, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[328, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[329, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[330, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[331, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[332, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[333, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[334, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[335, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[336, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[337, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[338, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[339, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[340, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[341, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[342, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[343, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[344, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[345, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[346, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[347, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[348, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[349, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[350, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[351, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[352, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[353, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[354, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[355, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[356, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[357, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[358, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[359, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[360, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[361, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[362, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[363, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[364, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[365, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[366, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[367, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[368, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[369, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[370, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[371, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[372, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[373, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[374, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[375, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[376, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[377, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[378, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[379, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[380, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[381, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[382, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[383, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[384, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[385, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[386, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[387, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[388, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[389, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[390, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[391, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[392, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[393, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[394, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[395, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[396, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[397, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[398, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[399, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[400, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[401, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[402, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[403, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[404, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[405, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[406, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[407, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[408, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[409, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[410, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[411, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[412, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[413, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[414, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[415, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[416, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[417, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[418, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[419, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[420, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[421, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[422, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[423, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[424, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[425, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[426, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[427, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[428, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[429, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[430, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[431, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[432, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[433, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[434, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[435, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[436, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[437, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[438, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[439, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[440, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[441, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[442, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[443, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[444, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[445, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[446, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[447, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[448, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[449, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[450, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[451, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[452, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[453, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[454, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[455, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[455, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[455, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[455, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[455, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[455, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[455, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[455, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[455, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[455, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[455, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[455, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[455, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[455, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[455, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[455, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[455, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[455, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[455, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[455, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[455, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[455, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[456, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[456, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[456, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[456, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[456, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[456, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[456, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[456, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[458, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[458, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[459, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[459, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[460, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[460, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[463, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[463, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[463, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[463, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[463, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[463, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[463, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[463, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[463, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[463, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[463, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[463, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[463, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[463, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[463, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[463, "graphscope.Session.load_from"]], "restore_from_pvc() (graphscope.session method)": [[463, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[463, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[463, "graphscope.Session.store_to_pvc"]]}})